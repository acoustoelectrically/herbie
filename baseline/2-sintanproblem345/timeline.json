[{"memory":[[16976,16976]],"time":0.031982421875,"type":"start"},{"compiler":[[17,12]],"memory":[[3666720,103817056]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[11,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[10,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[9,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[8,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[7,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[6,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[5,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[4,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[3,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}]],"time":516.681884765625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.501171875,"valid":0.498828125}],"memory":[[-26129712,551376960]],"mixsample":[[244.74267578125,"adjust",800],[151.57568359375,"ival-div",0],[0.030029296875,"ival-div",400],[0.09033203125,"ival-sub",2000],[6.16845703125,"ival-assert",0],[373.514892578125,"ival-sub",0],[70.623291015625,"ival-tan",0],[23.5263671875,"ival-and",0],[0.041015625,"ival-sub",400],[299.612548828125,"const",0],[219.548583984375,"ival-tan",400],[2621.281982421875,"ival-sin",1600],[135.227783203125,"adjust",2000],[4638.420654296875,"ival-tan",1600],[0.054931640625,"ival-sub",800],[263.281982421875,"ival-sin",400],[670.89013671875,"ival-tan",3600],[96.564697265625,"ival-sin",0],[0.038818359375,"ival-div",800],[28.425537109375,"adjust",2800],[0.06396484375,"ival-div",2000],[701.234375,"ival-sin",3600],[68.911865234375,"ival-<=",0]],"outcomes":[[791.6826171875,1,"valid",2418],[8303.869384765625,2,"valid",4576],[1989.7255859375,3,"valid",1132],[18.929443359375,0,"valid",130]],"time":11838.2080078125,"type":"sample"},{"compiler":[[9,6],[24,8],[24,8]],"confusion":[[254,1,1,0]],"explanations":[["-.f64","(-.f64 eps (tan.f64 eps))","cancellation",84,2,[],[[2]]],["-.f64","(-.f64 eps (sin.f64 eps))","cancellation",86,1,[],[[1]]],["/.f64","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","u/u",169,0,[["(-.f64 eps (sin.f64 eps))","underflow",169],["(-.f64 eps (tan.f64 eps))","underflow",169]],[[]]]],"fperrors":[["(-.f64 eps (tan.f64 eps))",85,0,false,1,[-0.205657979103641]],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",172,0,false,3,[-1.6784088750003255e-105]],["(-.f64 eps (sin.f64 eps))",86,1,[6.515990854709964e-108],1,[0.3147253903718977]],["(tan.f64 eps)",0,0,false,0,false],["eps",0,0,false,0,false],["(sin.f64 eps)",0,0,false,0,false]],"freqs":[[2,84],[1,171],[0,1]],"maybe-confusion":[[254,1,0,1,0,0]],"memory":[[-918944,59781312]],"mixsample":[[14.2666015625,"adjust",800],[300.88232421875,"ival-tan",1600],[9.381591796875,"ival-div",0],[0.02294921875,"ival-sub",800],[16.55322265625,"ival-sin",400],[27.5478515625,"ival-tan",3600],[5.09765625,"ival-sin",0],[0.376708984375,"ival-assert",0],[21.435302734375,"ival-sub",0],[5.3115234375,"ival-tan",0],[0.710693359375,"ival-true",0],[1.775146484375,"adjust",2800],[38.258544921875,"ival-sin",3600],[17.95458984375,"ival-tan",400],[170.406494140625,"ival-sin",1600],[7.514404296875,"adjust",2000]],"outcomes":[[47.54248046875,1,"valid",144],[521.5859375,2,"valid",284],[104.605712890625,3,"valid",76],[0.68798828125,0,"valid",8]],"time":755.4150390625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,6]],"egraph":[[0,999,9,0.002776782],[10,999,9,0.004322037],[9,998,9,0.006732367],[8,983,9,0.007743216],[7,645,9,0.007978416],[6,328,9,0.003669904],[5,153,9,0.001723433],[4,79,9,0.000678085],[3,45,9,0.000359738],[2,28,9,0.000215886],[1,18,9,0.000176575],[0,11,9,0.000156421],[0,6,9,0.000227619],[8,777,18,0.004077587],[7,748,18,0.005281038],[6,710,18,0.004233978],[5,693,18,0.005240506],[4,504,18,0.005205833],[3,238,18,0.002819482],[2,78,18,0.00093669],[1,29,23,0.000277915],[0,8,27,0.000174068]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"memory":[[-1010864,6656144]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[["(abs eps)"]],"time":87.18115234375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.07080078125,"type":"eval"},{"alts":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","next",62.4997601057073,"binary64"]],"compiler":[[9,6]],"memory":[[266304,266304]],"time":0.35498046875,"type":"prune"},{"egraph":[[0,999,22,0.002666913],[10,999,22,0.003955836],[9,998,22,0.004027874],[8,983,22,0.005392283],[7,645,22,0.007676867],[6,328,22,0.003648571],[5,153,22,0.00186952],[4,79,22,0.000797046],[3,45,22,0.000354852],[2,28,22,0.000220631],[1,18,22,0.000172831],[0,11,22,0.000163542],[0,6,22,0.000108031]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"locations":[["(-.f64 eps (tan.f64 eps))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","cost-diff",0]],"memory":[[1782544,1782544]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":40.89501953125,"type":"simplify"},{"compiler":[[24,8]],"locations":[["(sin.f64 eps)","accuracy",0.0],["(-.f64 eps (tan.f64 eps))","accuracy",18.649331084513907],["(-.f64 eps (sin.f64 eps))","accuracy",18.650177745972837],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","accuracy",42.44956689519755]],"memory":[[-1435392,16132384]],"mixsample":[[6.665283203125,"adjust",800],[144.747802734375,"ival-tan",1600],[3.9677734375,"ival-div",0],[0.01123046875,"ival-sub",800],[7.98486328125,"ival-sin",400],[13.5771484375,"ival-tan",3600],[2.738037109375,"ival-sin",0],[0.141845703125,"ival-assert",0],[9.22802734375,"ival-sub",0],[1.900390625,"ival-tan",0],[0.2470703125,"ival-true",0],[0.718994140625,"adjust",2800],[19.2861328125,"ival-sin",3600],[7.897216796875,"ival-tan",400],[81.2421875,"ival-sin",1600],[3.69091796875,"adjust",2000]],"outcomes":[[32.014404296875,1,"valid",72],[248.40234375,2,"valid",142],[51.343994140625,3,"valid",38],[0.31201171875,0,"valid",4]],"time":344.10400390625,"type":"localize"},{"count":[[4,28]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))"]],"memory":[[1482768,1482768]],"outputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"series":[[1.192138671875,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)))","eps","-inf"],[1.617919921875,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)))","eps","inf"],[1.14892578125,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)))","eps","0"]],"time":4.486083984375,"type":"series"},{"count":[[28,27]],"egraph":[[0,8263,341,0.08459737],[3,5663,369,0.025966095],[2,1323,408,0.019369125],[1,422,433,0.004246356],[0,148,465,0.001522549]],"inputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"memory":[[5284944,42576704]],"method":["egg-herbie"],"outputs":[["-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(* 1/6 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 #s(literal -1/6 binary64) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* -1/3 (pow eps 3))","(*.f64 #s(literal -1/3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -17/315 binary64) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -62/2835 binary64) (*.f64 eps eps) #s(literal -17/315 binary64)) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","1","#s(literal 1 binary64)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(-.f64 (fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) (*.f64 eps eps)) (+.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (cos.f64 eps)) (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(sin eps)","(sin.f64 eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) #s(literal 1 binary64))) (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))"]],"stop":[["iter limit",1],["node limit",1]],"time":238.550048828125,"type":"simplify"},{"count":[[4,419]],"egraph":[[0,8306,19,0.055895006],[3,5978,19,0.042287002],[2,409,19,0.019111988],[1,51,19,0.001463974],[0,11,19,0.000625283],[0,6,19,0.000117315]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))"]],"memory":[[-1040432,49806688]],"outputs":[["(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) eps) (*.f64 eps eps)))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (sin.f64 eps)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps))) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (-.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (+.f64 (tan.f64 eps) eps))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 eps) eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(*.f64 (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))))","(*.f64 (pow.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (-.f64 eps (sin.f64 eps))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (-.f64 eps (sin.f64 eps)))","(*.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(*.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 eps (tan.f64 eps))))","(*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)))","(*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps)))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 eps (tan.f64 eps))))","(*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))","(*.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))","(*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(pow.f64 (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))","(/.f64 (/.f64 (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps)))","(/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))","(/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (/.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 eps (tan.f64 eps)))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) eps) (*.f64 eps eps)))","(/.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (tan.f64 eps)))","(/.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(/.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps)))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps)))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) (-.f64 (tan.f64 eps) eps))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(/.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps)))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))) (neg.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (sin.f64 eps)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (-.f64 eps (tan.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (-.f64 eps (sin.f64 eps))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))","(/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))) (+.f64 (sin.f64 eps) eps))","(/.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (sin.f64 eps) #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))) (+.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64))) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(neg.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (*.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (*.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (*.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 eps eps)))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 eps eps) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (*.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) eps (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) eps (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) eps (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 #s(literal -1 binary64) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(fma.f64 (*.f64 eps eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(fma.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(fma.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 eps eps) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) #s(literal -1 binary64)))","(+.f64 (*.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(+.f64 (*.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(+.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 (*.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 (*.f64 eps eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 eps eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 eps eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 eps eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(+.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (-.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (sin.f64 eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) eps) (*.f64 eps eps)))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))","(*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (sin.f64 eps) eps))","(*.f64 (+.f64 (sin.f64 eps) eps) (*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 eps (sin.f64 eps)))","(*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (sin.f64 eps) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))) (+.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64))) (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (neg.f64 (sin.f64 eps)) eps))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (+.f64 (sin.f64 eps) eps))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (sin.f64 eps) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (sin.f64 eps) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))))","(/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (neg.f64 (sin.f64 eps)) eps))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(neg.f64 (-.f64 (sin.f64 eps) eps))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (-.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (sin.f64 eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (pow.f64 eps #s(literal 3/2 binary64)) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 #s(literal -1 binary64) (sin.f64 eps) eps)","(fma.f64 (*.f64 eps eps) (/.f64 eps (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 (*.f64 eps eps) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 eps (/.f64 (*.f64 eps eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (+.f64 eps #s(literal 0 binary64)) (sin.f64 eps))","(-.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(-.f64 #s(literal 0 binary64) (-.f64 (sin.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (sin.f64 eps)))","(+.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(+.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(+.f64 (neg.f64 (sin.f64 eps)) eps)","(+.f64 eps (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal 1 binary64) (sin.f64 eps))","(neg.f64 (neg.f64 (sin.f64 eps)))","(sin.f64 eps)","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (tan.f64 eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) eps) (*.f64 eps eps)))","(*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))","(*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) (pow.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps))","(*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps)))","(*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (tan.f64 eps) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 eps) eps) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (fma.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (neg.f64 (tan.f64 eps)) eps))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (+.f64 (tan.f64 eps) eps))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (tan.f64 eps) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 eps) eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (tan.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (tan.f64 eps) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (+.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 eps) eps) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))","(/.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (tan.f64 eps) (tan.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (neg.f64 (tan.f64 eps)) eps))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(/.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(/.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))","(neg.f64 (-.f64 (tan.f64 eps) eps))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) eps) (*.f64 eps eps)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (tan.f64 eps)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 (pow.f64 eps #s(literal 3/2 binary64)) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 #s(literal -1 binary64) (tan.f64 eps) eps)","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (*.f64 eps eps) (/.f64 eps (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 (*.f64 eps eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 (tan.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 (sin.f64 eps) (neg.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64))) eps)","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(fma.f64 eps (/.f64 (*.f64 eps eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(-.f64 (+.f64 eps #s(literal 0 binary64)) (tan.f64 eps))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 1 binary64)))","(-.f64 (/.f64 eps #s(literal 1 binary64)) (/.f64 (tan.f64 eps) #s(literal 1 binary64)))","(-.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(-.f64 #s(literal 0 binary64) (-.f64 (tan.f64 eps) eps))","(-.f64 eps (tan.f64 eps))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (tan.f64 eps)))","(+.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(+.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(+.f64 (neg.f64 (tan.f64 eps)) eps)","(+.f64 eps (neg.f64 (tan.f64 eps)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":256.85107421875,"type":"rewrite"},{"compiler":[[11420,1220]],"memory":[[-4853152,26062240]],"time":38.1337890625,"type":"eval"},{"alts":[["(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","next",62.33225230135756,"binary64"],["(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","fresh",62.895341867753466,"binary64"],["(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (sin.f64 eps)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","fresh",62.737023066303564,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))))","fresh",61.96572917736888,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","fresh",62.894768256537326,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",62.4997601057073,"binary64"],["(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","next",62.51411205630875,"binary64"],["(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","fresh",62.499685461867664,"binary64"],["(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","fresh",62.70577669504686,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","next",0.21907111645009897,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","next",0.346129104143196,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","fresh",0.4570910112649186,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","next",0.7390777078242976,"binary64"]],"compiler":[[15,9],[26,9],[23,12],[25,14],[14,9],[9,6],[14,7],[11,8],[31,17],[26,15],[21,13],[16,11],[11,8],[15,9],[26,9],[23,12],[25,14],[14,9],[14,7],[11,8],[31,17],[26,15],[21,13],[16,11],[11,8]],"count":[[443,13]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[442,12],"picked":[1,1]}],"memory":[[4260624,20940880]],"min-error":[[0.034649862185872675,"binary64"]],"time":13.611083984375,"type":"prune"},{"egraph":[[0,5482,190,0.036272585],[19,5482,190,0.052095767],[18,5478,190,0.055334675],[17,5478,190,0.042779634],[16,5478,190,0.032331399],[15,5478,190,0.024244514],[14,5460,190,0.024088261],[13,5056,190,0.030125301],[12,4391,190,0.033330419],[11,4376,190,0.023462671],[10,4349,190,0.024695475],[9,4274,190,0.025569499],[8,3817,190,0.026265384],[7,2926,190,0.022795124],[6,1534,190,0.016732207],[5,959,190,0.008984721],[4,574,190,0.004021799],[3,291,190,0.002373013],[2,138,190,0.001057542],[1,82,190,0.000699891],[0,50,190,0.000578398],[0,29,201,0.000345991]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","#s(literal 27/112000 binary64)","(*.f64 eps eps)","eps","#s(literal -27/2800 binary64)","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","#s(literal -27/2800 binary64)","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(/.f64 eps (-.f64 eps (tan.f64 eps)))","eps","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))","(sin.f64 eps)","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(sin.f64 eps)","eps","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","#s(literal -1 binary64)","(/.f64 eps (-.f64 eps (tan.f64 eps)))","(-.f64 eps (tan.f64 eps))"]],"locations":[["(-.f64 (tan.f64 eps) eps)","cost-diff",0],["(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","cost-diff",6],["(tan.f64 eps)","cost-diff",0],["(-.f64 eps (tan.f64 eps))","cost-diff",0],["(/.f64 eps (-.f64 eps (tan.f64 eps)))","cost-diff",0],["(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","cost-diff",5],["(*.f64 eps eps)","cost-diff",0],["(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","cost-diff",0]],"memory":[[-7887392,15211216]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64))","#s(literal 27/112000 binary64)","(*.f64 eps eps)","eps","#s(literal -27/2800 binary64)","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","#s(literal -27/2800 binary64)","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(/.f64 eps (-.f64 eps (tan.f64 eps)))","eps","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)","(/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))","(sin.f64 eps)","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(sin.f64 eps)","eps","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","#s(literal -1 binary64)","(/.f64 eps (-.f64 eps (tan.f64 eps)))","(-.f64 eps (tan.f64 eps))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":629.943115234375,"type":"simplify"},{"compiler":[[182,31]],"locations":[["(/.f64 eps (-.f64 eps (tan.f64 eps)))","accuracy",7.158561430746003],["(-.f64 (tan.f64 eps) eps)","accuracy",18.649331084513907],["(-.f64 eps (tan.f64 eps))","accuracy",18.649331084513907],["(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","accuracy",61.93601890483715],["(/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))","accuracy",7.158561430746003],["(/.f64 eps (-.f64 eps (tan.f64 eps)))","accuracy",7.158561430746003],["(-.f64 eps (tan.f64 eps))","accuracy",18.649331084513907],["(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","accuracy",61.18419687480913],["(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","accuracy",0.0078125],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","accuracy",0.346129104143196],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","accuracy",0.7390777078242976],["(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","accuracy",0.01171875],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","accuracy",0.21907111645009897]],"memory":[[3626720,59628304]],"mixsample":[[1.550048828125,"ival-sub",1200],[6.998291015625,"ival-div",0],[23.98193359375,"adjust",800],[3.49462890625,"ival-mult",1200],[0.90185546875,"ival-pow",2800],[0.1591796875,"ival-div",400],[0.42041015625,"ival-assert",0],[0.146240234375,"ival-sub",3600],[12.025634765625,"ival-sub",0],[2.054931640625,"ival-tan",0],[26.409912109375,"ival-sin",1200],[0.085205078125,"ival-sub",400],[23.15283203125,"const",0],[0.0859375,"ival-pow",800],[0.12890625,"ival-tan",400],[5.588134765625,"ival-pow",0],[48.670654296875,"ival-sin",2400],[0.110595703125,"ival-tan",800],[173.087646484375,"ival-tan",1600],[0.030029296875,"ival-mult",800],[0.3486328125,"ival-mult",3600],[17.435302734375,"ival-add",0],[2.5166015625,"ival-sub",800],[48.270263671875,"ival-tan",4000],[15.42822265625,"ival-sin",2000],[1.75048828125,"ival-div",2000],[0.58203125,"ival-mult",2400],[21.186767578125,"ival-sin",3600],[0.2578125,"ival-pow",400],[1.709228515625,"ival-pow",2400],[1.270751953125,"ival-div",2400],[1.0712890625,"ival-tan",2800],[0.46826171875,"ival-mult",2000],[1.01513671875,"ival-sub",2000],[0.285400390625,"ival-mult",2800],[1.123779296875,"ival-pow",3600],[1.287353515625,"ival-pow",2000],[13.408935546875,"ival-tan",4400],[1.39208984375,"ival-tan",4800],[14.45166015625,"adjust",2000],[0.529052734375,"ival-div",2800],[0.94970703125,"ival-sub",2400],[6.802490234375,"ival-pow",1200],[0.3271484375,"ival-sin",400],[0.045166015625,"ival-mult",400],[18.115478515625,"ival-tan",3600],[20.636962890625,"ival-mult",0],[3.357666015625,"ival-sin",0],[33.48828125,"ival-sin",2800],[4.306884765625,"ival-div",800],[18.173583984375,"ival-tan",6800],[5.800537109375,"ival-tan",3200],[0.335693359375,"ival-true",0],[0.382568359375,"ival-sub",2800],[0.46435546875,"exact",0]],"outcomes":[[90.771240234375,1,"valid",102],[550.6298828125,2,"valid",151],[1.105224609375,0,"valid",3]],"time":683.0078125,"type":"localize"},{"count":[[18,93]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(*.f64 eps eps)","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(/.f64 eps (-.f64 eps (tan.f64 eps)))","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(sin.f64 eps)","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(-.f64 (tan.f64 eps) eps)","(/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))"]],"memory":[[-4191424,5554592]],"outputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","9/40","(+ 9/40 (* -27/2800 (pow eps 2)))","(+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))","-27/2800","(- (* 27/112000 (pow eps 2)) 27/2800)","(pow eps 2)","(/ -3 (pow eps 2))","(/ (- (* 6/5 (pow eps 2)) 3) (pow eps 2))","(/ (- (* (pow eps 2) (+ 6/5 (* 1/175 (pow eps 2)))) 3) (pow eps 2))","(/ (- (* (pow eps 2) (+ 6/5 (* (pow eps 2) (+ 1/175 (* 2/7875 (pow eps 2)))))) 3) (pow eps 2))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(/ 3 (pow eps 3))","(/ (+ 3 (* -6/5 (pow eps 2))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* -1/175 (pow eps 2)) 6/5))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7875 (pow eps 2)) 1/175)) 6/5))) (pow eps 3))","(* 1/3 (pow eps 3))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","(/ (- (* 17/10 (pow eps 2)) 3) (pow eps 2))","(/ (- (* (pow eps 2) (+ 17/10 (* -307/1400 (pow eps 2)))) 3) (pow eps 2))","(/ (- (* (pow eps 2) (+ 17/10 (* (pow eps 2) (- (* 1247/126000 (pow eps 2)) 307/1400)))) 3) (pow eps 2))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* 27/112000 (pow eps 6))","(* (pow eps 6) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (+ (* 27/2800 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6))))))","(* 27/112000 (pow eps 4))","(* (pow eps 4) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 4) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* 27/112000 (pow eps 2))","(* (pow eps 2) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* -27/2800 (pow eps 4))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) (+ 27/2800 (/ 1/2 (pow eps 4)))))","(* -27/2800 (pow eps 2))","(* (pow eps 2) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(- (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps))))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps)))))","(+ 1 (/ (sin eps) (* eps (cos eps))))","(- (+ 1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(/ (sin eps) (cos eps))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps))) (pow eps 2))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 3) (pow (cos eps) 2))) (pow eps 3))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))))","(sin eps)","(/ -1 eps)","(/ (- (* -1 (/ (sin eps) (* eps (cos eps)))) 1) eps)","(/ (- (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ 1 (/ (sin eps) (* eps (cos eps))))) eps)","(/ (- (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(* -1 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","(/ (sin eps) eps)","(/ (+ (sin eps) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps)","(/ (- (+ (sin eps) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2)))) (* -1 (/ (pow (sin eps) 2) (* eps (cos eps))))) eps)","(/ (- (+ (sin eps) (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (sin eps) (* eps (cos eps)))))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) eps)) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* eps (cos eps))))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (/ (+ 1 (/ (sin eps) (* eps (cos eps)))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (pow (sin eps) 2) (* eps (cos eps))))) eps))","(* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (/ (pow (sin eps) 2) (cos eps)) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps))","(* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2))) (* -1 (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3))))) eps)) (/ (pow (sin eps) 2) (cos eps))) eps))) eps))"]],"series":[[5.4091796875,"((/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (+ (* 27/112000 (* eps eps)) -27/2800) (/ (- eps (sin eps)) (- eps (tan eps))) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps) (- (/ eps (- eps (tan eps))) (/ (sin eps) (- eps (tan eps)))) (/ eps (- eps (tan eps))) (- eps (tan eps)) (tan eps) (+ (* (sin eps) (pow (- (tan eps) eps) -1)) (/ eps (- eps (tan eps)))) (sin eps) (pow (- (tan eps) eps) -1) (- (tan eps) eps) (/ (sin eps) (- eps (tan eps))))","eps","-inf"],[5.8720703125,"((/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (+ (* 27/112000 (* eps eps)) -27/2800) (/ (- eps (sin eps)) (- eps (tan eps))) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps) (- (/ eps (- eps (tan eps))) (/ (sin eps) (- eps (tan eps)))) (/ eps (- eps (tan eps))) (- eps (tan eps)) (tan eps) (+ (* (sin eps) (pow (- (tan eps) eps) -1)) (/ eps (- eps (tan eps)))) (sin eps) (pow (- (tan eps) eps) -1) (- (tan eps) eps) (/ (sin eps) (- eps (tan eps))))","eps","inf"],[2.925048828125,"((/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (+ (* 27/112000 (* eps eps)) -27/2800) (/ (- eps (sin eps)) (- eps (tan eps))) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps) (- (/ eps (- eps (tan eps))) (/ (sin eps) (- eps (tan eps)))) (/ eps (- eps (tan eps))) (- eps (tan eps)) (tan eps) (+ (* (sin eps) (pow (- (tan eps) eps) -1)) (/ eps (- eps (tan eps)))) (sin eps) (pow (- (tan eps) eps) -1) (- (tan eps) eps) (/ (sin eps) (- eps (tan eps))))","eps","0"]],"time":15.908203125,"type":"series"},{"count":[[93,92]],"egraph":[[0,8338,1504,0.101319303],[2,3665,1561,0.03368354],[1,1146,1697,0.013135067],[0,388,1799,0.003838689]],"inputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","9/40","(+ 9/40 (* -27/2800 (pow eps 2)))","(+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))","-27/2800","(- (* 27/112000 (pow eps 2)) 27/2800)","(pow eps 2)","(/ -3 (pow eps 2))","(/ (- (* 6/5 (pow eps 2)) 3) (pow eps 2))","(/ (- (* (pow eps 2) (+ 6/5 (* 1/175 (pow eps 2)))) 3) (pow eps 2))","(/ (- (* (pow eps 2) (+ 6/5 (* (pow eps 2) (+ 1/175 (* 2/7875 (pow eps 2)))))) 3) (pow eps 2))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(/ 3 (pow eps 3))","(/ (+ 3 (* -6/5 (pow eps 2))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* -1/175 (pow eps 2)) 6/5))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7875 (pow eps 2)) 1/175)) 6/5))) (pow eps 3))","(* 1/3 (pow eps 3))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","(/ (- (* 17/10 (pow eps 2)) 3) (pow eps 2))","(/ (- (* (pow eps 2) (+ 17/10 (* -307/1400 (pow eps 2)))) 3) (pow eps 2))","(/ (- (* (pow eps 2) (+ 17/10 (* (pow eps 2) (- (* 1247/126000 (pow eps 2)) 307/1400)))) 3) (pow eps 2))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* 27/112000 (pow eps 6))","(* (pow eps 6) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (+ (* 27/2800 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6))))))","(* 27/112000 (pow eps 4))","(* (pow eps 4) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 4) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* 27/112000 (pow eps 2))","(* (pow eps 2) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* -27/2800 (pow eps 4))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) (+ 27/2800 (/ 1/2 (pow eps 4)))))","(* -27/2800 (pow eps 2))","(* (pow eps 2) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(- (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps))))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps)))))","(+ 1 (/ (sin eps) (* eps (cos eps))))","(- (+ 1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(/ (sin eps) (cos eps))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps))) (pow eps 2))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 3) (pow (cos eps) 2))) (pow eps 3))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))))","(sin eps)","(/ -1 eps)","(/ (- (* -1 (/ (sin eps) (* eps (cos eps)))) 1) eps)","(/ (- (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ 1 (/ (sin eps) (* eps (cos eps))))) eps)","(/ (- (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(* -1 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","(/ (sin eps) eps)","(/ (+ (sin eps) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps)","(/ (- (+ (sin eps) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2)))) (* -1 (/ (pow (sin eps) 2) (* eps (cos eps))))) eps)","(/ (- (+ (sin eps) (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (sin eps) (* eps (cos eps)))))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) eps)) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* eps (cos eps))))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (/ (+ 1 (/ (sin eps) (* eps (cos eps)))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (pow (sin eps) 2) (* eps (cos eps))))) eps))","(* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (/ (pow (sin eps) 2) (cos eps)) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps))","(* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2))) (* -1 (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3))))) eps)) (/ (pow (sin eps) 2) (cos eps))) eps))) eps))"]],"memory":[[9932992,49354512]],"method":["egg-herbie"],"outputs":[["-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","9/40","#s(literal 9/40 binary64)","(+ 9/40 (* -27/2800 (pow eps 2)))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","-27/2800","#s(literal -27/2800 binary64)","(- (* 27/112000 (pow eps 2)) 27/2800)","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","(pow eps 2)","(*.f64 eps eps)","(/ -3 (pow eps 2))","(/.f64 #s(literal -3 binary64) (*.f64 eps eps))","(/ (- (* 6/5 (pow eps 2)) 3) (pow eps 2))","(-.f64 #s(literal 6/5 binary64) (/.f64 #s(literal 3 binary64) (*.f64 eps eps)))","(/ (- (* (pow eps 2) (+ 6/5 (* 1/175 (pow eps 2)))) 3) (pow eps 2))","(fma.f64 (fma.f64 #s(literal 1/175 binary64) (*.f64 eps eps) #s(literal 6/5 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -3 binary64) (*.f64 eps eps)))","(/ (- (* (pow eps 2) (+ 6/5 (* (pow eps 2) (+ 1/175 (* 2/7875 (pow eps 2)))))) 3) (pow eps 2))","(fma.f64 (fma.f64 (fma.f64 #s(literal 2/7875 binary64) (*.f64 eps eps) #s(literal 1/175 binary64)) (*.f64 eps eps) #s(literal 6/5 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -3 binary64) (*.f64 eps eps)))","(* -1/3 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/3 binary64))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -17/315 binary64) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -62/2835 binary64) (*.f64 eps eps) #s(literal -17/315 binary64)) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 #s(literal 1/3 binary64) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 #s(literal -1/6 binary64) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(/ 3 (pow eps 3))","(/.f64 #s(literal 3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(/ (+ 3 (* -6/5 (pow eps 2))) (pow eps 3))","(/.f64 (fma.f64 #s(literal -6/5 binary64) (*.f64 eps eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(/ (+ 3 (* (pow eps 2) (- (* -1/175 (pow eps 2)) 6/5))) (pow eps 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/175 binary64) (*.f64 eps eps) #s(literal -6/5 binary64)) (*.f64 eps eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7875 (pow eps 2)) 1/175)) 6/5))) (pow eps 3))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7875 binary64) (*.f64 eps eps) #s(literal -1/175 binary64)) (*.f64 eps eps) #s(literal -6/5 binary64)) (*.f64 eps eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* 1/3 (pow eps 3))","(*.f64 #s(literal 1/3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/2835 binary64) (*.f64 eps eps) #s(literal 17/315 binary64)) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(/ (- (* 17/10 (pow eps 2)) 3) (pow eps 2))","(-.f64 #s(literal 17/10 binary64) (/.f64 #s(literal 3 binary64) (*.f64 eps eps)))","(/ (- (* (pow eps 2) (+ 17/10 (* -307/1400 (pow eps 2)))) 3) (pow eps 2))","(fma.f64 (fma.f64 #s(literal -307/1400 binary64) (*.f64 eps eps) #s(literal 17/10 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -3 binary64) (*.f64 eps eps)))","(/ (- (* (pow eps 2) (+ 17/10 (* (pow eps 2) (- (* 1247/126000 (pow eps 2)) 307/1400)))) 3) (pow eps 2))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1247/126000 binary64) (*.f64 eps eps) #s(literal -307/1400 binary64)) (*.f64 eps eps) #s(literal 17/10 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -3 binary64) (*.f64 eps eps)))","1","#s(literal 1 binary64)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)) (/.f64 #s(literal -1 binary64) eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)) (/.f64 #s(literal -1 binary64) eps)) (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) eps)) #s(literal 1 binary64)))","(* 27/112000 (pow eps 6))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 27/112000 binary64))","(* (pow eps 6) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 6 binary64)))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (+.f64 (/.f64 #s(literal 9/40 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps)))) (pow.f64 eps #s(literal 6 binary64)))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (+ (* 27/2800 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6))))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 9/40 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps)))) (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 6 binary64)))) (pow.f64 eps #s(literal 6 binary64)))","(* 27/112000 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 27/112000 binary64))","(* (pow eps 4) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))))","(* (pow eps 4) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 (/.f64 #s(literal 9/40 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps)))))","(* 27/112000 (pow eps 2))","(*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps))","(* (pow eps 2) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) eps) eps)","(* -27/2800 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -27/2800 binary64))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (/.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) (+ 27/2800 (/ 1/2 (pow eps 4)))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (-.f64 (/.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 4 binary64)))))","(* -27/2800 (pow eps 2))","(*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps))","(* (pow eps 2) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) eps) eps)","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (sin eps) eps))))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps))) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (/ (sin eps) eps)))))","(-.f64 (+.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) eps) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64))))) (/.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (-.f64 (/.f64 (sin.f64 eps) eps) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))))","(+ 1 (/ (sin eps) (* eps (cos eps))))","(+.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) #s(literal 1 binary64))","(- (+ 1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(+.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) #s(literal 1 binary64))","(- (+ 1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(+.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (+.f64 (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps))) (pow eps 2))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps))) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (/ (pow (sin eps) 3) (pow (cos eps) 2))) (pow eps 3))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))))","(-.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps))) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps)) (/.f64 (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (pow.f64 eps #s(literal 3 binary64))))","(sin eps)","(sin.f64 eps)","(/ -1 eps)","(/.f64 #s(literal -1 binary64) eps)","(/ (- (* -1 (/ (sin eps) (* eps (cos eps)))) 1) eps)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) eps)","(/ (- (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ 1 (/ (sin eps) (* eps (cos eps))))) eps)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) eps)","(/ (- (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(/.f64 (-.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))) eps)","(* -1 eps)","(neg.f64 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","(fma.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps (neg.f64 eps))","(/ (sin eps) eps)","(/.f64 (sin.f64 eps) eps)","(/ (+ (sin eps) (/ (pow (sin eps) 2) (* eps (cos eps)))) eps)","(/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 eps) eps) (sin.f64 eps)) eps)","(/ (- (+ (sin eps) (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2)))) (* -1 (/ (pow (sin eps) 2) (* eps (cos eps))))) eps)","(/.f64 (fma.f64 (sin.f64 eps) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (sin.f64 eps)) eps)","(/ (- (+ (sin eps) (/ (pow (sin eps) 4) (* (pow eps 3) (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (* eps (cos eps)))) (* -1 (/ (pow (sin eps) 3) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(/.f64 (fma.f64 (sin.f64 eps) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (sin.f64 eps))) eps)","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (/.f64 (*.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps) (sin.f64 eps)) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps))","(+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* eps (cos eps)))) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps))) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps))","(+ 1 (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) eps)) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (-.f64 (-.f64 (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) eps) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps)))) eps)) eps))","(+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps)))","(+.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps)))","(+.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) eps)) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) #s(literal 1 binary64))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 2) (* eps (cos eps))))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps))) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (+ (* -1 (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3)))) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (-.f64 (-.f64 (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) eps) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps)))) eps)) eps))","(* -1 (/ (+ 1 (/ (sin eps) (* eps (cos eps)))) eps))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) eps)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps))) eps))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) eps)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps))) eps))","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps)) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) eps)) eps)) eps) #s(literal -1 binary64)) eps)","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(fma.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps (neg.f64 eps))","(* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (pow (sin eps) 2) (* eps (cos eps))))) eps))","(/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 eps) eps) (sin.f64 eps)) eps)","(* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (/ (pow (sin eps) 2) (cos eps)) (/ (pow (sin eps) 3) (* eps (pow (cos eps) 2)))) eps))) eps))","(/.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) eps) (sin.f64 eps)) eps)","(* -1 (/ (+ (* -1 (sin eps)) (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 2))) (* -1 (/ (pow (sin eps) 4) (* eps (pow (cos eps) 3))))) eps)) (/ (pow (sin eps) 2) (cos eps))) eps))) eps))","(/.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (+.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) eps)) eps) (sin.f64 eps)) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":266.759765625,"type":"simplify"},{"count":[[18,501]],"egraph":[[0,9488,165,0.093892661],[2,1883,165,0.039014145],[1,226,165,0.008507859],[0,50,166,0.002057214],[0,29,171,0.000397584]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(*.f64 eps eps)","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(/.f64 eps (-.f64 eps (tan.f64 eps)))","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(sin.f64 eps)","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(-.f64 (tan.f64 eps) eps)","(/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))"]],"memory":[[3386496,67356208]],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps #s(literal -1/2 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal -1/2 binary64))","(fma.f64 eps (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) (*.f64 eps #s(literal 9/40 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) (*.f64 eps #s(literal 9/40 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) (*.f64 eps #s(literal 9/40 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal 81/1600 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))) (neg.f64 (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) (*.f64 eps #s(literal 9/40 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) (*.f64 eps #s(literal 9/40 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)) (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) (*.f64 eps #s(literal 9/40 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) (*.f64 eps #s(literal 9/40 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) (*.f64 eps #s(literal 9/40 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) (*.f64 eps #s(literal 9/40 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)))))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) eps #s(literal 9/40 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) #s(literal 9/40 binary64))","(-.f64 (/.f64 #s(literal 81/1600 binary64) (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 #s(literal 81/1600 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) eps) #s(literal 9/40 binary64))","(+.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64)) eps) eps))","(*.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 19683/1404928000000000 binary64) #s(literal -19683/21952000000 binary64)) (pow.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 19683/1404928000000000 binary64) #s(literal -19683/21952000000 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 729/7840000 binary64) (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -27/2800 binary64) (*.f64 (*.f64 eps eps) #s(literal 27/112000 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 19683/1404928000000000 binary64) #s(literal -19683/21952000000 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) #s(literal 729/7840000 binary64))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64))))","(/.f64 (-.f64 #s(literal 729/7840000 binary64) (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -27/2800 binary64) (*.f64 (*.f64 eps eps) #s(literal 27/112000 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 19683/1404928000000000 binary64) #s(literal -19683/21952000000 binary64))) (neg.f64 (+.f64 #s(literal 729/7840000 binary64) (-.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 19683/1404928000000000 binary64) #s(literal -19683/21952000000 binary64))) (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64))))))","(/.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 19683/1404928000000000 binary64) #s(literal -19683/21952000000 binary64)) (+.f64 #s(literal 729/7840000 binary64) (-.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 19683/1404928000000000 binary64) #s(literal -19683/21952000000 binary64)) (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 19683/1404928000000000 binary64) #s(literal -19683/21952000000 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64)) (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 19683/1404928000000000 binary64) #s(literal -19683/21952000000 binary64)))))","(fma.f64 (*.f64 #s(literal 27/112000 binary64) eps) eps #s(literal -27/2800 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","(fma.f64 eps (*.f64 #s(literal 27/112000 binary64) eps) #s(literal -27/2800 binary64))","(-.f64 (/.f64 #s(literal 729/7840000 binary64) (-.f64 #s(literal -27/2800 binary64) (*.f64 (*.f64 eps eps) #s(literal 27/112000 binary64)))) (/.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -27/2800 binary64) (*.f64 (*.f64 eps eps) #s(literal 27/112000 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64))) (/.f64 #s(literal 729/7840000 binary64) (fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal 27/2800 binary64))))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal 27/112000 binary64)) #s(literal -27/2800 binary64))","(+.f64 #s(literal -27/2800 binary64) (*.f64 (*.f64 eps eps) #s(literal 27/112000 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)))))","(fma.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal -1/2 binary64))","(fma.f64 eps (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64)) (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)))) (neg.f64 (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal 81/1600 binary64))) (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64))) (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64))) (neg.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64))) (neg.f64 (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)) (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)))))","(fma.f64 (*.f64 #s(literal -27/2800 binary64) eps) eps #s(literal 9/40 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -27/2800 binary64) #s(literal 9/40 binary64))","(fma.f64 eps (*.f64 #s(literal -27/2800 binary64) eps) #s(literal 9/40 binary64))","(-.f64 (/.f64 #s(literal 81/1600 binary64) (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)))))","(-.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 #s(literal 81/1600 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))))","(+.f64 (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)) #s(literal 9/40 binary64))","(+.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)))","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 eps eps)","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps))) (+.f64 (sin.f64 eps) eps)))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (-.f64 eps (sin.f64 eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (pow.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))) (-.f64 eps (tan.f64 eps)))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 eps (sin.f64 eps))))) (neg.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))) (neg.f64 (neg.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (sin.f64 eps))))) (neg.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (neg.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (sin.f64 eps))))) (neg.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (neg.f64 (-.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)))) (neg.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (neg.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (sin.f64 eps))))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (neg.f64 eps) (neg.f64 (sin.f64 eps)))) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))) (*.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)))) (*.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (neg.f64 (neg.f64 (sin.f64 eps))))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 eps)) (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (neg.f64 (sin.f64 eps)))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 eps)) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 eps)) (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (sin.f64 eps))) (*.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (*.f64 eps #s(literal 1 binary64)) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (neg.f64 (sin.f64 eps))))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (-.f64 (*.f64 (*.f64 eps #s(literal 1 binary64)) (-.f64 eps (tan.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 eps #s(literal 1 binary64)) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 eps #s(literal 1 binary64)) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 eps #s(literal 1 binary64)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (*.f64 eps #s(literal 1 binary64)) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 eps #s(literal 1 binary64)) (-.f64 eps (tan.f64 eps))) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (neg.f64 (sin.f64 eps))))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sin.f64 eps))))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (neg.f64 (sin.f64 eps)))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (sin.f64 eps))) (*.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (neg.f64 (sin.f64 eps))))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal -1 binary64))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (neg.f64 (neg.f64 (sin.f64 eps))))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (-.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (neg.f64 (sin.f64 eps)))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) #s(literal -1 binary64))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (sin.f64 eps))) (*.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (neg.f64 (sin.f64 eps))))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 eps (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 eps (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (neg.f64 (sin.f64 eps)))) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 eps #s(literal 1 binary64)) (*.f64 (sin.f64 eps) #s(literal 1 binary64))) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 eps (*.f64 (sin.f64 eps) #s(literal 1 binary64))) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (*.f64 eps #s(literal 1 binary64)) (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 (/.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))) (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64)) (-.f64 eps (tan.f64 eps)))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 eps (neg.f64 (sin.f64 eps))) (-.f64 eps (tan.f64 eps)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)) (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 eps (sin.f64 eps)))) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))) (neg.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (sin.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 eps (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (neg.f64 eps) (neg.f64 (sin.f64 eps))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (/.f64 (-.f64 eps (neg.f64 (sin.f64 eps))) (-.f64 eps (tan.f64 eps))))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))))","(/.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)) (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))))))","(/.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64))) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps)))))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(neg.f64 (/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (-.f64 eps (tan.f64 eps))))","(neg.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (sin.f64 eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 (sin.f64 eps) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64))) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) eps (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (neg.f64 eps) (pow.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(fma.f64 #s(literal -1 binary64) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (sin.f64 eps) (neg.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (/.f64 (-.f64 eps (neg.f64 (sin.f64 eps))) (-.f64 eps (tan.f64 eps)))) (/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)) (/.f64 (-.f64 eps (neg.f64 (sin.f64 eps))) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 (*.f64 (neg.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (/.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (sin.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (neg.f64 eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (/.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(-.f64 (/.f64 (*.f64 (neg.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps)))) (/.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (-.f64 eps (tan.f64 eps))))) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (-.f64 eps (tan.f64 eps))))))","(-.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps)))) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 (*.f64 eps (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps))))) (/.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (sin.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps))))))","(-.f64 (/.f64 (*.f64 eps (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (/.f64 (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64)) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (*.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (-.f64 eps (tan.f64 eps)) (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (*.f64 (-.f64 eps (tan.f64 eps)) (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)))))","(-.f64 (/.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (sin.f64 eps) (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (/.f64 (-.f64 eps (sin.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (/.f64 (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(*.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) eps)","(*.f64 (neg.f64 eps) (pow.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(*.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 eps))) (neg.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (neg.f64 (*.f64 eps #s(literal 1 binary64))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (*.f64 eps #s(literal 1 binary64)) (-.f64 eps (tan.f64 eps)))","(/.f64 (neg.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(/.f64 eps (-.f64 eps (tan.f64 eps)))","(neg.f64 (/.f64 (neg.f64 eps) (-.f64 eps (tan.f64 eps))))","(neg.f64 (/.f64 eps (neg.f64 (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (/.f64 eps (neg.f64 (-.f64 eps (tan.f64 eps)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (tan.f64 eps) (tan.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (neg.f64 (tan.f64 eps)) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))) (*.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 eps (neg.f64 (tan.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps (neg.f64 (tan.f64 eps)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (neg.f64 (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps (neg.f64 (tan.f64 eps))))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(fma.f64 #s(literal -1 binary64) (tan.f64 eps) eps)","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps (neg.f64 (tan.f64 eps)))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 eps (neg.f64 (tan.f64 eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))))","(-.f64 eps (tan.f64 eps))","(+.f64 (neg.f64 (tan.f64 eps)) eps)","(+.f64 eps (neg.f64 (tan.f64 eps)))","(*.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(pow.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (neg.f64 (neg.f64 (cos.f64 eps))))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 eps) (sin.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 eps))) (neg.f64 (tan.f64 eps)))","(*.f64 (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (pow.f64 (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))) (*.f64 (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))) (*.f64 (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))) (fma.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))))))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (*.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (sin.f64 eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) eps (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (neg.f64 eps) (pow.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))) (/.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))))","(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(sin.f64 eps)","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (+.f64 (tan.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 (tan.f64 eps) eps)))","(pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(exp.f64 (fma.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64) (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (exp.f64 (log.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (-.f64 (tan.f64 eps) (neg.f64 eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 eps) (tan.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (tan.f64 eps) (neg.f64 eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (tan.f64 eps) (neg.f64 eps)))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (+.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (tan.f64 eps) (tan.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (tan.f64 eps) (neg.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 #s(literal -1 binary64) eps (tan.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (tan.f64 eps) (neg.f64 eps))) (/.f64 (*.f64 eps eps) (-.f64 (tan.f64 eps) (neg.f64 eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)))","(-.f64 (tan.f64 eps) eps)","(exp.f64 (log.f64 (-.f64 (tan.f64 eps) eps)))","(+.f64 (neg.f64 eps) (tan.f64 eps))","(+.f64 (tan.f64 eps) (neg.f64 eps))","(*.f64 (/.f64 (sin.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (+.f64 (tan.f64 eps) eps) (*.f64 eps eps)))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (sin.f64 eps))","(*.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(*.f64 (sin.f64 eps) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 eps)))) (neg.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps))))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (-.f64 eps (tan.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))","(neg.f64 (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (/.f64 (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":337.01220703125,"type":"rewrite"},{"compiler":[[22770,2452]],"memory":[[3547488,63842544]],"time":93.808837890625,"type":"eval"},{"alts":[["(fma.f64 (sin.f64 eps) (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","fresh",62.33225230135756,"binary64"],["(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","next",62.895341867753466,"binary64"],["(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))","fresh",62.92449532535717,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))))","fresh",61.96572917736888,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","next",62.894768256537326,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",62.4997601057073,"binary64"],["(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","done",62.51411205630875,"binary64"],["(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","next",62.499685461867664,"binary64"],["(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","next",62.70577669504686,"binary64"],["(*.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)))","fresh",62.73540182607201,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.21907111645009897,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.346129104143196,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","next",0.4570910112649186,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","done",0.7390777078242976,"binary64"]],"compiler":[[15,9],[26,9],[130,23],[25,14],[14,9],[9,6],[14,7],[11,8],[31,17],[21,10],[26,15],[21,13],[16,11],[11,8],[15,9],[26,9],[130,23],[25,14],[14,9],[11,8],[31,17],[21,10],[16,11]],"count":[[774,14]],"kept":[{"done":[1,1],"fresh":[7,6],"new":[761,3],"picked":[5,4]}],"memory":[[-14735376,32894688]],"min-error":[[0.03225542126051817,"binary64"]],"time":58.18798828125,"type":"prune"},{"egraph":[[0,8576,237,0.056490914],[4,4631,237,0.030303136],[3,908,240,0.017509549],[2,300,244,0.003187906],[1,140,252,0.001208229],[0,75,255,0.00072078],[0,42,290,0.000484421]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","eps","#s(literal -1 binary64)","(-.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(neg.f64 (cos.f64 eps))","(cos.f64 eps)","#s(literal -1 binary64)","(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","(-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))","(-.f64 eps (tan.f64 eps))","eps","(tan.f64 eps)","(*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))","(/.f64 (-.f64 eps (tan.f64 eps)) eps)","(sin.f64 eps)","(*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","eps","(pow.f64 (sin.f64 eps) #s(literal 2 binary64))","(sin.f64 eps)","#s(literal 2 binary64)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(pow.f64 (tan.f64 eps) #s(literal 2 binary64))","(tan.f64 eps)","(/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))","(+.f64 (sin.f64 eps) eps)","#s(literal -1 binary64)","(pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(+.f64 (tan.f64 eps) eps)"]],"locations":[["(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","cost-diff",0],["(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","cost-diff",0],["(/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","cost-diff",4],["(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","cost-diff",18],["(tan.f64 eps)","cost-diff",0],["(-.f64 eps (tan.f64 eps))","cost-diff",0],["(-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))","cost-diff",3],["(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","cost-diff",14],["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","cost-diff",0],["(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","cost-diff",1],["(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","cost-diff",1],["(tan.f64 eps)","cost-diff",0],["(-.f64 (tan.f64 eps) eps)","cost-diff",0],["(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","cost-diff",0],["(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","cost-diff",2],["(*.f64 eps eps)","cost-diff",0],["(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","cost-diff",0]],"memory":[[-1551232,30270000]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","eps","#s(literal -1 binary64)","(-.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps))))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","(neg.f64 (cos.f64 eps))","(cos.f64 eps)","#s(literal -1 binary64)","(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))","(*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (sin.f64 eps)))","(-.f64 eps (tan.f64 eps))","eps","(tan.f64 eps)","(*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))","(*.f64 (/.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 eps (tan.f64 eps)) eps)","(sin.f64 eps)","(*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","eps","(pow.f64 (sin.f64 eps) #s(literal 2 binary64))","(sin.f64 eps)","#s(literal 2 binary64)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(pow.f64 (tan.f64 eps) #s(literal 2 binary64))","(tan.f64 eps)","(/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))","(pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))","(+.f64 (sin.f64 eps) eps)","#s(literal -1 binary64)","(pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(+.f64 (tan.f64 eps) eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":184.22705078125,"type":"simplify"},{"compiler":[[288,41]],"locations":[["(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","accuracy",0.01953125],["(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","accuracy",12.70841517216193],["(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","accuracy",12.711923819175889],["(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","accuracy",48.82609052715702],["(/.f64 (-.f64 eps (tan.f64 eps)) eps)","accuracy",7.963264967420513],["(-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))","accuracy",8.601591109606057],["(-.f64 eps (tan.f64 eps))","accuracy",18.649331084513907],["(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","accuracy",53.41997816491384],["(cos.f64 eps)","accuracy",0.0],["(-.f64 eps (sin.f64 eps))","accuracy",18.650177745972837],["(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","accuracy",18.65712149316114],["(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","accuracy",42.44956689519755],["(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","accuracy",0.10546875],["(-.f64 (tan.f64 eps) eps)","accuracy",18.649331084513907],["(-.f64 (sin.f64 eps) eps)","accuracy",18.650177745972837],["(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","accuracy",43.03775701987672],["(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","accuracy",0.4570910112649186]],"memory":[[9982096,107628976]],"mixsample":[[18.498291015625,"ival-tan",2000],[0.27685546875,"ival-sub",1200],[29.46484375,"adjust",800],[24.625732421875,"ival-div",0],[0.60693359375,"ival-mult",1200],[68.23974609375,"ival-sin",3200],[0.13330078125,"ival-sub",1600],[1.86962890625,"ival-div",400],[6.038818359375,"ival-pow2",400],[0.778564453125,"ival-pow2",3600],[44.523193359375,"ival-pow",1600],[0.157470703125,"ival-div",1600],[0.176025390625,"ival-assert",0],[0.005126953125,"ival-neg",800],[28.156005859375,"ival-sub",0],[1.932861328125,"ival-tan",0],[2.455810546875,"ival-cos",0],[1.046875,"ival-pow2",1200],[1.4541015625,"ival-sub",400],[6.537841796875,"const",0],[3.98681640625,"ival-cos",400],[0.294677734375,"ival-tan",400],[1.214111328125,"ival-neg",400],[59.283203125,"ival-pow",0],[15.8818359375,"ival-add",0],[0.367919921875,"ival-mult",3600],[19.15478515625,"ival-tan",5200],[0.830810546875,"ival-mult",800],[0.089111328125,"ival-cos",800],[1.278564453125,"ival-sub",800],[2.07958984375,"ival-mult",1600],[15.24609375,"adjust",2800],[0.517822265625,"ival-sin",3600],[28.00732421875,"ival-pow",400],[5.42236328125,"ival-pow2",0],[0.201416015625,"ival-neg",3600],[34.826904296875,"ival-cos",1600],[1.032958984375,"ival-sub",3200],[0.22509765625,"ival-tan",2400],[1.2255859375,"ival-neg",1600],[7.3681640625,"ival-pow",3600],[14.98095703125,"ival-tan",4400],[83.307373046875,"ival-sin",1600],[0.94384765625,"ival-div",3200],[21.18603515625,"ival-sin",4000],[48.2919921875,"ival-tan",4800],[22.11669921875,"adjust",2000],[0.27197265625,"ival-div",1200],[8.432373046875,"ival-sin",400],[4.989013671875,"ival-mult",400],[24.010986328125,"ival-mult",0],[6.613037109375,"ival-pow2",1600],[3.139404296875,"ival-sin",0],[9.019287109375,"ival-cos",3600],[0.881591796875,"ival-div",800],[151.509521484375,"ival-tan",3200],[0.35595703125,"ival-true",0],[0.006103515625,"ival-add",800],[1.281494140625,"ival-mult",3200],[0.70068359375,"exact",0],[30.152587890625,"ival-tan",1200],[1.280517578125,"ival-neg",0]],"outcomes":[[64.1376953125,1,"valid",59],[172.689208984375,2,"valid",70],[707.35791015625,3,"valid",124],[1.266845703125,0,"valid",3]],"time":1035.550048828125,"type":"localize"},{"count":[[22,114]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(-.f64 eps (sin.f64 eps))","(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","(-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))","(-.f64 eps (tan.f64 eps))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","(-.f64 (sin.f64 eps) eps)","(cos.f64 eps)","(/.f64 (-.f64 eps (tan.f64 eps)) eps)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))"]],"memory":[[276000,7928624]],"outputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(pow eps 2)","(/ 3 (pow eps 3))","(/ (+ 3 (* -6/5 (pow eps 2))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* -1/175 (pow eps 2)) 6/5))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7875 (pow eps 2)) 1/175)) 6/5))) (pow eps 3))","(* 1/3 (pow eps 3))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","-1","(- (* -1/2 (pow eps 2)) 1)","(- (* (pow eps 2) (- (* -5/24 (pow eps 2)) 1/2)) 1)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -61/720 (pow eps 2)) 5/24)) 1/2)) 1)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* -1/18 (pow eps 5))","(* (pow eps 5) (- (* -7/360 (pow eps 2)) 1/18))","(* (pow eps 5) (- (* (pow eps 2) (- (* -601/75600 (pow eps 2)) 7/360)) 1/18))","(* (pow eps 5) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -17531/5443200 (pow eps 2)) 601/75600)) 7/360)) 1/18))","1","(+ 1 (* 1/4 (pow eps 2)))","(+ 1 (* (pow eps 2) (+ 1/4 (* 1/12 (pow eps 2)))))","(+ 1 (* (pow eps 2) (+ 1/4 (* (pow eps 2) (+ 1/12 (* 19/576 (pow eps 2)))))))","(- (* 7/20 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 7/20 (* -233/4200 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 7/20 (* (pow eps 2) (- (* 181/126000 (pow eps 2)) 233/4200)))) 1/2)","(* 1/3 (pow eps 4))","(* (pow eps 4) (+ 1/3 (* -2/45 (pow eps 2))))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* 1/315 (pow eps 2)) 2/45))))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 1/315 (* -2/14175 (pow eps 2)))) 2/45))))","(* -1/6 (pow eps 3))","(* (pow eps 3) (- (* 1/120 (pow eps 2)) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* (pow eps 2) (- (* 1/362880 (pow eps 2)) 1/5040)))) 1/6))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(* -1/3 (pow eps 2))","(* (pow eps 2) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 2) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 2) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* -2/3 (pow eps 4))","(* (pow eps 4) (- (* -17/45 (pow eps 2)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* -62/315 (pow eps 2)) 17/45)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -1382/14175 (pow eps 2)) 62/315)) 17/45)) 2/3))","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* 9/40 (pow eps 2))","(* (pow eps 2) (- 9/40 (* 1/2 (/ 1 (pow eps 2)))))","(/ -1 eps)","(/ (- (* -1 (/ (sin eps) (* eps (cos eps)))) 1) eps)","(/ (- (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ 1 (/ (sin eps) (* eps (cos eps))))) eps)","(/ (- (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(* -1 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","(/ (sin eps) (cos eps))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(/ -1 (cos eps))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(- (+ 1 (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps))) (* -2 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))) (+ (* -2 (/ (sin eps) (* eps (cos eps)))) (+ (* -2 (/ (* (sin eps) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(- (+ 1 (+ (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps)) (+ (* -1 (/ (+ (* -2 (/ (* (sin eps) (- (/ (pow (sin eps) 2) (cos eps)) (+ (* -2 (/ (* (sin eps) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))) (/ (* (pow (sin eps) 2) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (pow (cos eps) 2))) (pow eps 3))) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))))) (+ (* -2 (/ (sin eps) (* eps (cos eps)))) (+ (* -2 (/ (* (sin eps) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(* eps (+ 1 (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps))))","(* eps (- (+ 1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (/ (sin eps) eps) (/ (sin eps) (* eps (cos eps))))))","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (/ (sin eps) eps) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2)))))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (cos eps)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (/ (sin eps) (cos eps)) (sin eps))) (* (pow eps 3) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (+ (/ (sin eps) eps) (+ (/ (* (sin eps) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps)))))) (pow eps 3)) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2))))))))","(- (+ 1 (+ (* -1 (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2))) (/ (sin eps) (* eps (cos eps))))) (/ (sin eps) eps))","(- (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (* (pow (sin eps) 2) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 3)))) (+ (/ (sin eps) eps) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2))))","(- (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (* (pow (sin eps) 2) (- (* -1 (pow (sin eps) 2)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* (pow eps 4) (pow (cos eps) 2))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (* (pow (sin eps) 4) (- (* -1 (pow (sin eps) 2)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* (pow eps 6) (pow (cos eps) 4))))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (pow (sin eps) 2)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* (pow eps 4) (pow (cos eps) 2)))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))))","(* eps (- (/ (sin eps) eps) 1))","(cos eps)","(+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (/ (+ 1 (/ (sin eps) (* eps (cos eps)))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (cos eps))))) eps)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (pow (cos eps) 2)))) eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (- (/ (pow (sin eps) 2) (cos eps)) (+ (* 2 (/ (* (sin eps) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps)))) (* 2 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (- (+ (* 2 (/ (* (sin eps) (- (/ (pow (sin eps) 2) (cos eps)) (+ (* 2 (/ (* (sin eps) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* eps (cos eps)))) (+ (/ (* (pow (sin eps) 2) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (* eps (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) (+ (* 2 (/ (* (sin eps) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps)))) (* 2 (/ (sin eps) (cos eps)))) eps)))","(* -1 (* eps (- (+ (/ (sin eps) eps) (/ (sin eps) (* eps (cos eps)))) 1)))","(* -1 (* eps (- (* -1 (/ (- (/ (pow (sin eps) 2) (* eps (cos eps))) (+ (sin eps) (/ (sin eps) (cos eps)))) eps)) 1)))","(+ 1 (* -1 (/ (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (pow (sin eps) 2)) (+ (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) eps))) (* -1 (sin eps))) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (/ (pow (sin eps) 3) (cos eps)) (+ (* -1 (* (sin eps) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 2))))) eps)) (* -1 (pow (sin eps) 2))) (+ (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) eps))) (* -1 (sin eps))) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) eps))) (* -1 (sin eps))) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) eps)) (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))))) eps))) (* -1 (sin eps))) eps)))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) eps)))))"]],"series":[[7.5771484375,"((/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (* eps eps) 9/40) -1/2) (* eps eps) (* (pow (- (tan eps) eps) -1) (- (sin eps) eps)) (pow (- (tan eps) eps) -1) (- (tan eps) eps) (tan eps) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (pow (neg (cos eps)) -1) (/ (- eps (sin eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps)) (- eps (sin eps)) (/ (- (- eps (tan eps)) (* (/ (- eps (tan eps)) eps) (sin eps))) (* (/ (- eps (tan eps)) eps) (- eps (tan eps)))) (- (- eps (tan eps)) (* (/ (- eps (tan eps)) eps) (sin eps))) (- eps (tan eps)) (* (/ (- (* eps eps) (pow (sin eps) 2)) (- (* eps eps) (pow (tan eps) 2))) (/ (pow (+ (sin eps) eps) -1) (pow (+ (tan eps) eps) -1))) (/ (pow (+ (sin eps) eps) -1) (pow (+ (tan eps) eps) -1)) (/ (- (* eps eps) (pow (sin eps) 2)) (- (* eps eps) (pow (tan eps) 2))) (- (* eps eps) (pow (sin eps) 2)) (- (sin eps) eps) (cos eps) (/ (- eps (tan eps)) eps) (- (* eps eps) (pow (tan eps) 2)))","eps","-inf"],[8.233154296875,"((/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (* eps eps) 9/40) -1/2) (* eps eps) (* (pow (- (tan eps) eps) -1) (- (sin eps) eps)) (pow (- (tan eps) eps) -1) (- (tan eps) eps) (tan eps) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (pow (neg (cos eps)) -1) (/ (- eps (sin eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps)) (- eps (sin eps)) (/ (- (- eps (tan eps)) (* (/ (- eps (tan eps)) eps) (sin eps))) (* (/ (- eps (tan eps)) eps) (- eps (tan eps)))) (- (- eps (tan eps)) (* (/ (- eps (tan eps)) eps) (sin eps))) (- eps (tan eps)) (* (/ (- (* eps eps) (pow (sin eps) 2)) (- (* eps eps) (pow (tan eps) 2))) (/ (pow (+ (sin eps) eps) -1) (pow (+ (tan eps) eps) -1))) (/ (pow (+ (sin eps) eps) -1) (pow (+ (tan eps) eps) -1)) (/ (- (* eps eps) (pow (sin eps) 2)) (- (* eps eps) (pow (tan eps) 2))) (- (* eps eps) (pow (sin eps) 2)) (- (sin eps) eps) (cos eps) (/ (- eps (tan eps)) eps) (- (* eps eps) (pow (tan eps) 2)))","eps","inf"],[7.643798828125,"((/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (* eps eps) 9/40) -1/2) (* eps eps) (* (pow (- (tan eps) eps) -1) (- (sin eps) eps)) (pow (- (tan eps) eps) -1) (- (tan eps) eps) (tan eps) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (pow (neg (cos eps)) -1) (/ (- eps (sin eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps)) (- eps (sin eps)) (/ (- (- eps (tan eps)) (* (/ (- eps (tan eps)) eps) (sin eps))) (* (/ (- eps (tan eps)) eps) (- eps (tan eps)))) (- (- eps (tan eps)) (* (/ (- eps (tan eps)) eps) (sin eps))) (- eps (tan eps)) (* (/ (- (* eps eps) (pow (sin eps) 2)) (- (* eps eps) (pow (tan eps) 2))) (/ (pow (+ (sin eps) eps) -1) (pow (+ (tan eps) eps) -1))) (/ (pow (+ (sin eps) eps) -1) (pow (+ (tan eps) eps) -1)) (/ (- (* eps eps) (pow (sin eps) 2)) (- (* eps eps) (pow (tan eps) 2))) (- (* eps eps) (pow (sin eps) 2)) (- (sin eps) eps) (cos eps) (/ (- eps (tan eps)) eps) (- (* eps eps) (pow (tan eps) 2)))","eps","0"]],"time":26.010009765625,"type":"series"},{"count":[[114,113]],"egraph":[[0,8420,2232,0.093186625],[2,5989,2347,0.031171913],[1,1786,2547,0.022815605],[0,598,2686,0.00712231]],"inputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(pow eps 2)","(/ 3 (pow eps 3))","(/ (+ 3 (* -6/5 (pow eps 2))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* -1/175 (pow eps 2)) 6/5))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7875 (pow eps 2)) 1/175)) 6/5))) (pow eps 3))","(* 1/3 (pow eps 3))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","-1","(- (* -1/2 (pow eps 2)) 1)","(- (* (pow eps 2) (- (* -5/24 (pow eps 2)) 1/2)) 1)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -61/720 (pow eps 2)) 5/24)) 1/2)) 1)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* -1/18 (pow eps 5))","(* (pow eps 5) (- (* -7/360 (pow eps 2)) 1/18))","(* (pow eps 5) (- (* (pow eps 2) (- (* -601/75600 (pow eps 2)) 7/360)) 1/18))","(* (pow eps 5) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -17531/5443200 (pow eps 2)) 601/75600)) 7/360)) 1/18))","1","(+ 1 (* 1/4 (pow eps 2)))","(+ 1 (* (pow eps 2) (+ 1/4 (* 1/12 (pow eps 2)))))","(+ 1 (* (pow eps 2) (+ 1/4 (* (pow eps 2) (+ 1/12 (* 19/576 (pow eps 2)))))))","(- (* 7/20 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 7/20 (* -233/4200 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 7/20 (* (pow eps 2) (- (* 181/126000 (pow eps 2)) 233/4200)))) 1/2)","(* 1/3 (pow eps 4))","(* (pow eps 4) (+ 1/3 (* -2/45 (pow eps 2))))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* 1/315 (pow eps 2)) 2/45))))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 1/315 (* -2/14175 (pow eps 2)))) 2/45))))","(* -1/6 (pow eps 3))","(* (pow eps 3) (- (* 1/120 (pow eps 2)) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* (pow eps 2) (- (* 1/362880 (pow eps 2)) 1/5040)))) 1/6))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(* -1/3 (pow eps 2))","(* (pow eps 2) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 2) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 2) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* -2/3 (pow eps 4))","(* (pow eps 4) (- (* -17/45 (pow eps 2)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* -62/315 (pow eps 2)) 17/45)) 2/3))","(* (pow eps 4) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -1382/14175 (pow eps 2)) 62/315)) 17/45)) 2/3))","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* 9/40 (pow eps 2))","(* (pow eps 2) (- 9/40 (* 1/2 (/ 1 (pow eps 2)))))","(/ -1 eps)","(/ (- (* -1 (/ (sin eps) (* eps (cos eps)))) 1) eps)","(/ (- (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ 1 (/ (sin eps) (* eps (cos eps))))) eps)","(/ (- (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(* -1 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","(/ (sin eps) (cos eps))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(/ -1 (cos eps))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(- (+ 1 (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps))) (* -2 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))) (+ (* -2 (/ (sin eps) (* eps (cos eps)))) (+ (* -2 (/ (* (sin eps) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(- (+ 1 (+ (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps)) (+ (* -1 (/ (+ (* -2 (/ (* (sin eps) (- (/ (pow (sin eps) 2) (cos eps)) (+ (* -2 (/ (* (sin eps) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))) (/ (* (pow (sin eps) 2) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (pow (cos eps) 2))) (pow eps 3))) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))))) (+ (* -2 (/ (sin eps) (* eps (cos eps)))) (+ (* -2 (/ (* (sin eps) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(* eps (+ 1 (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps))))","(* eps (- (+ 1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (/ (sin eps) eps) (/ (sin eps) (* eps (cos eps))))))","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (/ (sin eps) eps) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2)))))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (cos eps)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (/ (sin eps) (cos eps)) (sin eps))) (* (pow eps 3) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (+ (/ (sin eps) eps) (+ (/ (* (sin eps) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps)))))) (pow eps 3)) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2))))))))","(- (+ 1 (+ (* -1 (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2))) (/ (sin eps) (* eps (cos eps))))) (/ (sin eps) eps))","(- (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (* (pow (sin eps) 2) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 3)))) (+ (/ (sin eps) eps) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2))))","(- (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (* (pow (sin eps) 2) (- (* -1 (pow (sin eps) 2)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* (pow eps 4) (pow (cos eps) 2))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (* (pow (sin eps) 4) (- (* -1 (pow (sin eps) 2)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* (pow eps 6) (pow (cos eps) 4))))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (pow (sin eps) 2)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* (pow eps 4) (pow (cos eps) 2)))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))))","(* eps (- (/ (sin eps) eps) 1))","(cos eps)","(+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (/ (+ 1 (/ (sin eps) (* eps (cos eps)))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (cos eps))))) eps)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (pow (cos eps) 2)))) eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (- (/ (pow (sin eps) 2) (cos eps)) (+ (* 2 (/ (* (sin eps) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps)))) (* 2 (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (- (+ (* 2 (/ (* (sin eps) (- (/ (pow (sin eps) 2) (cos eps)) (+ (* 2 (/ (* (sin eps) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* eps (cos eps)))) (+ (/ (* (pow (sin eps) 2) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (* eps (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) (+ (* 2 (/ (* (sin eps) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps)))) (* 2 (/ (sin eps) (cos eps)))) eps)))","(* -1 (* eps (- (+ (/ (sin eps) eps) (/ (sin eps) (* eps (cos eps)))) 1)))","(* -1 (* eps (- (* -1 (/ (- (/ (pow (sin eps) 2) (* eps (cos eps))) (+ (sin eps) (/ (sin eps) (cos eps)))) eps)) 1)))","(+ 1 (* -1 (/ (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (pow (sin eps) 2)) (+ (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) eps))) (* -1 (sin eps))) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (/ (pow (sin eps) 3) (cos eps)) (+ (* -1 (* (sin eps) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 2))))) eps)) (* -1 (pow (sin eps) 2))) (+ (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) eps))) (* -1 (sin eps))) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) eps))) (* -1 (sin eps))) eps)))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) eps)) (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))))) eps))) (* -1 (sin eps))) eps)))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) eps)))))"]],"memory":[[-3065968,47435760]],"method":["egg-herbie"],"outputs":[["-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(pow eps 2)","(*.f64 eps eps)","(/ 3 (pow eps 3))","(/.f64 #s(literal 3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(/ (+ 3 (* -6/5 (pow eps 2))) (pow eps 3))","(/.f64 (fma.f64 #s(literal -6/5 binary64) (*.f64 eps eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(/ (+ 3 (* (pow eps 2) (- (* -1/175 (pow eps 2)) 6/5))) (pow eps 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/175 binary64) (*.f64 eps eps) #s(literal -6/5 binary64)) (*.f64 eps eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7875 (pow eps 2)) 1/175)) 6/5))) (pow eps 3))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7875 binary64) (*.f64 eps eps) #s(literal -1/175 binary64)) (*.f64 eps eps) #s(literal -6/5 binary64)) (*.f64 eps eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* 1/3 (pow eps 3))","(*.f64 #s(literal 1/3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(*.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/2835 binary64) (*.f64 eps eps) #s(literal 17/315 binary64)) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 #s(literal 1/3 binary64) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(fma.f64 (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* -1/3 (pow eps 3))","(*.f64 #s(literal -1/3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -17/315 binary64) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -62/2835 binary64) (*.f64 eps eps) #s(literal -17/315 binary64)) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","-1","#s(literal -1 binary64)","(- (* -1/2 (pow eps 2)) 1)","(fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal -1 binary64))","(- (* (pow eps 2) (- (* -5/24 (pow eps 2)) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -5/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal -1 binary64))","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -61/720 (pow eps 2)) 5/24)) 1/2)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -61/720 binary64) (*.f64 eps eps) #s(literal -5/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal -1 binary64))","(* 1/6 (pow eps 3))","(*.f64 #s(literal 1/6 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* -1/18 (pow eps 5))","(*.f64 (pow.f64 eps #s(literal 5 binary64)) #s(literal -1/18 binary64))","(* (pow eps 5) (- (* -7/360 (pow eps 2)) 1/18))","(*.f64 (fma.f64 #s(literal -7/360 binary64) (*.f64 eps eps) #s(literal -1/18 binary64)) (pow.f64 eps #s(literal 5 binary64)))","(* (pow eps 5) (- (* (pow eps 2) (- (* -601/75600 (pow eps 2)) 7/360)) 1/18))","(*.f64 (fma.f64 (fma.f64 #s(literal -601/75600 binary64) (*.f64 eps eps) #s(literal -7/360 binary64)) (*.f64 eps eps) #s(literal -1/18 binary64)) (pow.f64 eps #s(literal 5 binary64)))","(* (pow eps 5) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -17531/5443200 (pow eps 2)) 601/75600)) 7/360)) 1/18))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -17531/5443200 binary64) (*.f64 eps eps) #s(literal -601/75600 binary64)) (*.f64 eps eps) #s(literal -7/360 binary64)) (*.f64 eps eps) #s(literal -1/18 binary64)) (pow.f64 eps #s(literal 5 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* 1/4 (pow eps 2)))","(fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (+ 1/4 (* 1/12 (pow eps 2)))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (+ 1/4 (* (pow eps 2) (+ 1/12 (* 19/576 (pow eps 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 19/576 binary64) (*.f64 eps eps) #s(literal 1/12 binary64)) (*.f64 eps eps) #s(literal 1/4 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(- (* 7/20 (pow eps 2)) 1/2)","(fma.f64 #s(literal 7/20 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 7/20 (* -233/4200 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -233/4200 binary64) (*.f64 eps eps) #s(literal 7/20 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 7/20 (* (pow eps 2) (- (* 181/126000 (pow eps 2)) 233/4200)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 181/126000 binary64) (*.f64 eps eps) #s(literal -233/4200 binary64)) (*.f64 eps eps) #s(literal 7/20 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(* 1/3 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/3 binary64))","(* (pow eps 4) (+ 1/3 (* -2/45 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* 1/315 (pow eps 2)) 2/45))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/315 binary64) (*.f64 eps eps) #s(literal -2/45 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 1/315 (* -2/14175 (pow eps 2)))) 2/45))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/14175 binary64) (*.f64 eps eps) #s(literal 1/315 binary64)) (*.f64 eps eps) #s(literal -2/45 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* -1/6 (pow eps 3))","(*.f64 #s(literal -1/6 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* 1/120 (pow eps 2)) 1/6))","(*.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* (pow eps 2) (- (* 1/362880 (pow eps 2)) 1/5040)))) 1/6))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/362880 binary64) (*.f64 eps eps) #s(literal -1/5040 binary64)) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(+ 1 (* -1/2 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(* -1/3 (pow eps 2))","(*.f64 #s(literal -1/3 binary64) (*.f64 eps eps))","(* (pow eps 2) (- (* -2/15 (pow eps 2)) 1/3))","(*.f64 (*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 eps eps) #s(literal -1/3 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -17/315 binary64) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -62/2835 binary64) (*.f64 eps eps) #s(literal -17/315 binary64)) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) eps) eps)","(* -2/3 (pow eps 4))","(*.f64 #s(literal -2/3 binary64) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* -17/45 (pow eps 2)) 2/3))","(*.f64 (fma.f64 #s(literal -17/45 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* (pow eps 2) (- (* -62/315 (pow eps 2)) 17/45)) 2/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -62/315 binary64) (*.f64 eps eps) #s(literal -17/45 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -1382/14175 (pow eps 2)) 62/315)) 17/45)) 2/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1382/14175 binary64) (*.f64 eps eps) #s(literal -62/315 binary64)) (*.f64 eps eps) #s(literal -17/45 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(+.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)) (/.f64 (sin.f64 eps) (cos.f64 eps)) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) eps)) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(-.f64 (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) eps)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (fma.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 eps) eps) eps) (/.f64 (sin.f64 eps) eps))))","(* 9/40 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal 9/40 binary64))","(* (pow eps 2) (- 9/40 (* 1/2 (/ 1 (pow eps 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 9/40 binary64) (/.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) eps) eps)","(/ -1 eps)","(/.f64 #s(literal -1 binary64) eps)","(/ (- (* -1 (/ (sin eps) (* eps (cos eps)))) 1) eps)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) eps)","(/ (- (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ 1 (/ (sin eps) (* eps (cos eps))))) eps)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) eps)","(/ (- (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(/.f64 (-.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))) eps)","(* -1 eps)","(neg.f64 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","(fma.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps (neg.f64 eps))","(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(/ -1 (cos eps))","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(- (+ 1 (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps))) (* -2 (/ (sin eps) (* eps (cos eps)))))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps))","(- (+ 1 (+ (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps)) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps))))) (+ (* -2 (/ (sin eps) (* eps (cos eps)))) (+ (* -2 (/ (* (sin eps) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(-.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 eps) (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (cos.f64 eps))) eps) #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal -2 binary64) eps) (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 (/.f64 (sin.f64 eps) eps) eps) (fma.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) #s(literal -2 binary64) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))))","(- (+ 1 (+ (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps)) (+ (* -1 (/ (+ (* -2 (/ (* (sin eps) (- (/ (pow (sin eps) 2) (cos eps)) (+ (* -2 (/ (* (sin eps) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))) (/ (* (pow (sin eps) 2) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (pow (cos eps) 2))) (pow eps 3))) (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))))) (+ (* -2 (/ (sin eps) (* eps (cos eps)))) (+ (* -2 (/ (* (sin eps) (- (* -1 (+ (sin eps) (/ (sin eps) (cos eps)))) (* -2 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps)))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(-.f64 (-.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 eps) (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (cos.f64 eps))) eps) #s(literal 1 binary64)) (/.f64 (*.f64 (sin.f64 eps) (fma.f64 (/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps)) (*.f64 (sin.f64 eps) (fma.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) #s(literal -2 binary64) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))) (cos.f64 eps)) #s(literal -2 binary64) (*.f64 (sin.f64 eps) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (/.f64 #s(literal -2 binary64) eps) (/.f64 (sin.f64 eps) (cos.f64 eps)) (*.f64 (/.f64 (/.f64 (sin.f64 eps) eps) eps) (fma.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) #s(literal -2 binary64) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))))","(* eps (+ 1 (* -1 (/ (+ (sin eps) (/ (sin eps) (cos eps))) eps))))","(*.f64 (fma.f64 (/.f64 (sin.f64 eps) eps) (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) eps)","(* eps (- (+ 1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (/ (sin eps) eps) (/ (sin eps) (* eps (cos eps))))))","(*.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 eps) (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (cos.f64 eps))) eps) #s(literal 1 binary64)) eps)","(- (+ 1 (/ (sin eps) (* eps (cos eps)))) (/ (sin eps) eps))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (sin eps) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (/ (sin eps) eps) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2)))))","(-.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) (fma.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 eps) eps) eps) (/.f64 (sin.f64 eps) eps)))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (cos eps)))) (/ (sin eps) (* eps (cos eps)))))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (/ (sin eps) (cos eps)) (sin eps))) (* (pow eps 3) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 2)))) (+ (/ (sin eps) eps) (+ (/ (* (sin eps) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps)))))) (pow eps 3)) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2))))))))","(-.f64 (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (cos.f64 eps))) (fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (fma.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) (fma.f64 (/.f64 (sin.f64 eps) eps) (+.f64 (/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (+.f64 (sin.f64 eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (*.f64 eps eps)) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) eps)) (-.f64 (/.f64 (sin.f64 eps) eps) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))))","(- (+ 1 (+ (* -1 (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2))) (/ (sin eps) (* eps (cos eps))))) (/ (sin eps) eps))","(+.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) eps)) #s(literal 1 binary64))","(- (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (* (pow (sin eps) 2) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 3)))) (+ (/ (sin eps) eps) (/ (* (sin eps) (- (/ (sin eps) (cos eps)) (sin eps))) (pow eps 2))))","(+.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) eps))) #s(literal 1 binary64))","(- (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (/.f64 (sin.f64 eps) eps) eps) (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (* (pow (sin eps) 2) (- (* -1 (pow (sin eps) 2)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* (pow eps 4) (pow (cos eps) 2))))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))","(fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (/.f64 (sin.f64 eps) eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))) #s(literal 1 binary64)))","(- (+ 1 (+ (* -1 (/ (pow (sin eps) 2) (pow eps 2))) (/ (* (pow (sin eps) 4) (- (* -1 (pow (sin eps) 2)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* (pow eps 6) (pow (cos eps) 4))))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (pow (sin eps) 2)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* (pow eps 4) (pow (cos eps) 2)))) (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(-.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (pow.f64 (cos.f64 eps) #s(literal 4 binary64))) (/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 6 binary64))) (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps))) (*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps))))","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) (*.f64 eps eps))","(* eps (- (/ (sin eps) eps) 1))","(*.f64 (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) eps)","(cos eps)","(cos.f64 eps)","(+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))","(-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)))","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2))))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) eps) eps))) (*.f64 eps eps))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) #s(literal -1 binary64)) (sin.f64 eps)) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps)) eps))","(* -1 (/ (+ 1 (/ (sin eps) (* eps (cos eps)))) eps))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) eps)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps))) eps))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) eps)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps))) eps))","(/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) eps) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) #s(literal 1 binary64)) (neg.f64 eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) (neg.f64 eps))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(neg.f64 (fma.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps (neg.f64 eps)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (cos eps))))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) #s(literal -1 binary64)) (sin.f64 eps)) eps))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (pow (cos eps) 2)))) eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps)) eps))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(*.f64 (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) (neg.f64 eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (- (/ (pow (sin eps) 2) (cos eps)) (+ (* 2 (/ (* (sin eps) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps)))) (* 2 (/ (sin eps) (cos eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (sin.f64 eps) (/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps)) (*.f64 (sin.f64 eps) (fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps)) #s(literal 2 binary64) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))) eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (+ (* -1 (/ (- (+ (* 2 (/ (* (sin eps) (- (/ (pow (sin eps) 2) (cos eps)) (+ (* 2 (/ (* (sin eps) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* eps (cos eps)))) (+ (/ (* (pow (sin eps) 2) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (* eps (pow (cos eps) 2))) (/ (pow (sin eps) 2) (cos eps)))) (+ (* 2 (/ (* (sin eps) (- (+ (sin eps) (/ (sin eps) (cos eps))) (* 2 (/ (sin eps) (cos eps))))) (cos eps))) (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps)))) (* 2 (/ (sin eps) (cos eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (sin.f64 eps) (/.f64 (fma.f64 (sin.f64 eps) (fma.f64 (/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps)) (*.f64 (sin.f64 eps) (fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps)) #s(literal 2 binary64) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))) (*.f64 (cos.f64 eps) eps)) #s(literal 2 binary64) (*.f64 (sin.f64 eps) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (*.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) eps)))) (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (cos.f64 eps)) (*.f64 (sin.f64 eps) (fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps)) #s(literal 2 binary64) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))))) eps)) (/.f64 (neg.f64 (sin.f64 eps)) (cos.f64 eps))) eps))","(* -1 (* eps (- (+ (/ (sin eps) eps) (/ (sin eps) (* eps (cos eps)))) 1)))","(*.f64 (+.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64))) (neg.f64 eps))","(* -1 (* eps (- (* -1 (/ (- (/ (pow (sin eps) 2) (* eps (cos eps))) (+ (sin eps) (/ (sin eps) (cos eps)))) eps)) 1)))","(*.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (sin.f64 eps) (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (cos.f64 eps))) eps)) (neg.f64 eps))","(+ 1 (* -1 (/ (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (pow (sin eps) 2)) (+ (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) eps))) (* -1 (sin eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (+ (* -1 (/ (- (/ (pow (sin eps) 3) (cos eps)) (+ (* -1 (* (sin eps) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (+ (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) (pow (cos eps) 2))) (/ (pow (sin eps) 3) (pow (cos eps) 2))))) eps)) (* -1 (pow (sin eps) 2))) (+ (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) eps))) (* -1 (sin eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) (+.f64 (/.f64 (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (-.f64 (/.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (cos.f64 eps)) (fma.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (+.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))) (sin.f64 eps) (*.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))))) (neg.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) eps))) (* -1 (sin eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64))) eps))","(+ 1 (* -1 (/ (- (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))) eps)) (* -1 (* (sin eps) (- (* -1 (/ (sin eps) (cos eps))) (* -1 (sin eps)))))) eps))) (* -1 (sin eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (*.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) eps) (neg.f64 (sin.f64 eps)))) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) eps)))))","(fma.f64 #s(literal -1 binary64) eps (*.f64 (/.f64 (sin.f64 eps) eps) eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":304.830078125,"type":"simplify"},{"count":[[22,955]],"egraph":[[0,8844,169,0.074172431],[2,2639,171,0.039466006],[1,314,171,0.009819851],[0,75,201,0.002383965],[0,42,213,0.000509186]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(-.f64 eps (sin.f64 eps))","(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","(-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))","(-.f64 eps (tan.f64 eps))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","(-.f64 (sin.f64 eps) eps)","(cos.f64 eps)","(/.f64 (-.f64 eps (tan.f64 eps)) eps)","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))"]],"memory":[[2318688,71538944]],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 729/64000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (pow.f64 (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))) (fma.f64 #s(literal 729/64000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps))))","(/.f64 (neg.f64 (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 729/64000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64))))))","(/.f64 (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))","(/.f64 (fma.f64 #s(literal 729/64000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))))","(/.f64 (fma.f64 #s(literal 729/64000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))) (fma.f64 #s(literal 729/64000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))))","(fma.f64 (*.f64 #s(literal 9/40 binary64) eps) eps #s(literal -1/2 binary64))","(fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(fma.f64 eps (*.f64 #s(literal 9/40 binary64) eps) #s(literal -1/2 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 81/1600 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(+.f64 (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)))","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 eps eps)","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","(*.f64 (*.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (-.f64 (sin.f64 eps) eps)))","(*.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) (-.f64 (tan.f64 eps) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal 1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)))","(+.f64 (*.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (+.f64 (tan.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 (tan.f64 eps) eps)))","(pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(exp.f64 (fma.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64) (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (+.f64 (tan.f64 eps) eps))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (tan.f64 eps) (neg.f64 eps)))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (+.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (tan.f64 eps) (tan.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (tan.f64 eps) (neg.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (tan.f64 eps)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (tan.f64 eps)) #s(literal 1 binary64)) (neg.f64 eps))","(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(fma.f64 #s(literal -1 binary64) eps (tan.f64 eps))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)))","(-.f64 (tan.f64 eps) eps)","(exp.f64 (log.f64 (-.f64 (tan.f64 eps) eps)))","(+.f64 (neg.f64 eps) (tan.f64 eps))","(+.f64 (tan.f64 eps) (neg.f64 eps))","(*.f64 (pow.f64 (sqrt.f64 (tan.f64 eps)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (tan.f64 eps)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)))","(*.f64 (sin.f64 eps) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(pow.f64 (sqrt.f64 (tan.f64 eps)) #s(literal 2 binary64))","(pow.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (tan.f64 eps) #s(literal 1 binary64))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 eps) (sin.f64 eps)))","(/.f64 (sin.f64 eps) (exp.f64 (log.f64 (cos.f64 eps))))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(tan.f64 eps)","(exp.f64 (log.f64 (tan.f64 eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 eps eps))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (neg.f64 (tan.f64 eps)) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (neg.f64 (tan.f64 eps)) eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (neg.f64 (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps))","(fma.f64 (*.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) eps)","(fma.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (sin.f64 eps)) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(fma.f64 (sin.f64 eps) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (tan.f64 eps) eps)","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (neg.f64 (tan.f64 eps)) eps)) (/.f64 (*.f64 eps eps) (-.f64 (neg.f64 (tan.f64 eps)) eps)))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))","(-.f64 eps (tan.f64 eps))","(+.f64 (neg.f64 (tan.f64 eps)) eps)","(+.f64 eps (neg.f64 (tan.f64 eps)))","(*.f64 (pow.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps)))","(*.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (cos.f64 eps))))","(pow.f64 (/.f64 (neg.f64 (cos.f64 eps)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 eps)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (cos.f64 eps))))","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","(neg.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 (neg.f64 (cos.f64 eps))) #s(literal -1/2 binary64) (*.f64 (log.f64 (neg.f64 (cos.f64 eps))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (neg.f64 (cos.f64 eps))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (cos.f64 eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps)) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (neg.f64 (tan.f64 eps)) eps))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps)) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (-.f64 eps (sin.f64 eps)))","(*.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (pow.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 eps (tan.f64 eps))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps))","(/.f64 (-.f64 (*.f64 eps (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 eps (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (neg.f64 eps) (neg.f64 (sin.f64 eps))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 (/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64)) (-.f64 eps (tan.f64 eps)))","(/.f64 (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (neg.f64 (-.f64 eps (sin.f64 eps)))) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps))) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))))","(/.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (-.f64 eps (tan.f64 eps))))","(neg.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (neg.f64 (tan.f64 eps)) eps) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps)))) #s(literal -1 binary64)))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (sin.f64 eps) eps))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps (neg.f64 (sin.f64 eps))))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (neg.f64 (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","(fma.f64 #s(literal -1 binary64) (sin.f64 eps) eps)","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))","(-.f64 eps (sin.f64 eps))","(+.f64 (neg.f64 (sin.f64 eps)) eps)","(+.f64 eps (neg.f64 (sin.f64 eps)))","(*.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) eps)","(*.f64 (*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(*.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)) eps) (pow.f64 (pow.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)) eps) (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))))","(*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))) (pow.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)) eps) (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))))","(*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)) eps))","(pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 eps (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))) (pow.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (tan.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (tan.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (-.f64 eps (tan.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (sin.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(/.f64 (-.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(/.f64 (-.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(/.f64 (-.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(/.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) eps)))","(/.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))))","(/.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))))","(/.f64 (-.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (tan.f64 eps))) (/.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))) (/.f64 (-.f64 eps (tan.f64 eps)) eps))","(/.f64 (-.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)))","(/.f64 (/.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (tan.f64 eps)) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)) eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)) eps)) (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) eps (*.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) #s(literal 3 binary64)) (*.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))))) (neg.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(/.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))) (pow.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64))) (*.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))))","(/.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(neg.f64 (/.f64 (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps))))","(fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) eps (neg.f64 (*.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))))","(fma.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)) eps) (neg.f64 (*.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))))","(-.f64 (/.f64 eps (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (/.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)))","(-.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (*.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps) (-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps)) (neg.f64 (*.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))))","(*.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) eps) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) eps))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (sin.f64 eps))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) eps) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) eps))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (sin.f64 eps))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) eps) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) eps))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) #s(literal 1 binary64))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (sin.f64 eps))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 eps)) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 eps)) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 eps)) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) eps) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (sin.f64 eps))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 eps)) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 eps)) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 eps)) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) eps) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) eps))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) eps) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) eps))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (sin.f64 eps))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) eps) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) eps))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (sin.f64 eps))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) eps) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) eps))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) #s(literal 1 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (sin.f64 eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) eps) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (sin.f64 eps))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (neg.f64 eps)) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (neg.f64 eps)) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (neg.f64 eps)) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) eps) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) eps))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) #s(literal 1 binary64))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (sin.f64 eps))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) eps) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) eps))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (sin.f64 eps))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 eps)) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) eps) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) eps))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) #s(literal 1 binary64))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (sin.f64 eps))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) eps))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (sin.f64 eps))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) eps) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) eps))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (sin.f64 eps))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) eps) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (sin.f64 eps))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) eps) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) eps))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (sin.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))))) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) #s(literal 1 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 eps (-.f64 eps (tan.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (sin.f64 eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))) (*.f64 eps (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 eps (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))) (*.f64 eps (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (-.f64 eps (neg.f64 (tan.f64 eps))) (*.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 eps (+.f64 (tan.f64 eps) eps)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 eps (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))) (*.f64 eps (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 eps (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))) (*.f64 eps (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 eps (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)))) (*.f64 eps (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 eps (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)))) (*.f64 eps (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (+.f64 (tan.f64 eps) eps) (*.f64 eps (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)))) (*.f64 eps (+.f64 (tan.f64 eps) eps)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 eps (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))))) (*.f64 eps (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (*.f64 eps (-.f64 (neg.f64 (tan.f64 eps)) eps)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 eps (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 eps (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))))) (*.f64 eps (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (*.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 eps (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 eps (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))) (*.f64 eps (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 eps #s(literal 1 binary64))) (*.f64 eps (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 eps #s(literal 1 binary64))) (*.f64 eps (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 eps #s(literal 1 binary64))) (*.f64 eps (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (+.f64 (tan.f64 eps) eps) (*.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 eps (+.f64 (tan.f64 eps) eps)))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (neg.f64 eps) (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (-.f64 eps (neg.f64 (tan.f64 eps))) (*.f64 (neg.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 (neg.f64 eps) (-.f64 eps (neg.f64 (tan.f64 eps)))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))) (*.f64 (neg.f64 eps) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 (neg.f64 eps) (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))) (*.f64 (neg.f64 eps) (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)))) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)))) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (+.f64 (tan.f64 eps) eps) (*.f64 (neg.f64 eps) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)))) (*.f64 (neg.f64 eps) (+.f64 (tan.f64 eps) eps)))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))))) (*.f64 (neg.f64 eps) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (*.f64 (neg.f64 eps) (-.f64 (neg.f64 (tan.f64 eps)) eps)))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))))) (*.f64 (neg.f64 eps) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (*.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 (neg.f64 eps) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps)))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))) (*.f64 (neg.f64 eps) (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (neg.f64 eps) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))))","(/.f64 (fma.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (+.f64 (tan.f64 eps) eps) (*.f64 (neg.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 (neg.f64 eps) (+.f64 (tan.f64 eps) eps)))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) eps (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) eps))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 eps) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) eps (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) eps))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 eps) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) eps (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) eps))","(/.f64 (fma.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (-.f64 eps (neg.f64 (tan.f64 eps))) (neg.f64 eps)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) eps (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 eps) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) eps (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) eps))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) eps (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) eps))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 eps) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) eps (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) eps))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (neg.f64 eps) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) eps (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (+.f64 (tan.f64 eps) eps) eps))","(/.f64 (fma.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 eps) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) eps (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (neg.f64 eps) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) eps (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) eps))","(/.f64 (fma.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (neg.f64 eps) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) eps (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) eps))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) eps (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) eps))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (neg.f64 eps) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) eps (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) eps))","(/.f64 (fma.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))) (neg.f64 eps)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) eps))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) (neg.f64 eps)))","(/.f64 (fma.f64 #s(literal 1 binary64) eps (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) eps))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 eps) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 #s(literal 1 binary64) eps (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 eps) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 eps)))","(/.f64 (fma.f64 #s(literal 1 binary64) eps (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) eps))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 eps) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) eps (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))) (*.f64 (+.f64 (tan.f64 eps) eps) eps))","(/.f64 (fma.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 eps) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)) #s(literal 2 binary64))) (+.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)) #s(literal 3 binary64))) (fma.f64 eps eps (+.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)) #s(literal 2 binary64)) (*.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) eps) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) eps))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) eps) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)))) (*.f64 (+.f64 (tan.f64 eps) eps) eps))","(/.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64))) (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps))))","(/.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64))) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64)) (*.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps))))))","(/.f64 (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(fma.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(fma.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(fma.f64 (/.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps)))","(fma.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps)))","(fma.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(fma.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(fma.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(fma.f64 (sin.f64 eps) (/.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) eps) (-.f64 eps (tan.f64 eps)))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps)))) (/.f64 (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 2 binary64)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 3 binary64)) (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) #s(literal 3 binary64)) (fma.f64 (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)) (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))))","(-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps)))","(-.f64 eps (-.f64 (tan.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps))))","(-.f64 eps (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps)))","(+.f64 (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)) (-.f64 eps (tan.f64 eps)))","(+.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps)))","(+.f64 eps (-.f64 (neg.f64 (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))))","(+.f64 eps (fma.f64 #s(literal -1 binary64) (tan.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps))))","(+.f64 eps (neg.f64 (fma.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps) (tan.f64 eps))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (neg.f64 (tan.f64 eps)) eps)) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (*.f64 eps eps))) (*.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (neg.f64 (tan.f64 eps)) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (neg.f64 (tan.f64 eps)) eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 eps)) eps))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (neg.f64 (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps))","(fma.f64 (*.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) eps)","(fma.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (sin.f64 eps)) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(fma.f64 (sin.f64 eps) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (tan.f64 eps) eps)","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (neg.f64 (tan.f64 eps)) eps)) (/.f64 (*.f64 eps eps) (-.f64 (neg.f64 (tan.f64 eps)) eps)))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))","(-.f64 eps (tan.f64 eps))","(+.f64 (neg.f64 (tan.f64 eps)) eps)","(+.f64 eps (neg.f64 (tan.f64 eps)))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps)) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (neg.f64 (tan.f64 eps)) eps))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps)) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (-.f64 eps (sin.f64 eps)))","(*.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (pow.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps))))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 eps (tan.f64 eps))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (neg.f64 (sin.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (neg.f64 eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) eps))","(/.f64 (-.f64 (*.f64 eps (neg.f64 (-.f64 eps (tan.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (*.f64 eps (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (neg.f64 eps) (neg.f64 (sin.f64 eps))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 (/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64)) (-.f64 eps (tan.f64 eps)))","(/.f64 (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (neg.f64 (-.f64 eps (sin.f64 eps)))) (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps))) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (tan.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (neg.f64 (-.f64 eps (tan.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps))))","(/.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (-.f64 eps (tan.f64 eps))))","(neg.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (neg.f64 (-.f64 eps (tan.f64 eps)))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (neg.f64 (tan.f64 eps)) eps) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 eps (sin.f64 eps)))) #s(literal -1 binary64)))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64)) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64)) (+.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(*.f64 (+.f64 (tan.f64 eps) eps) (pow.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (tan.f64 eps) eps) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (tan.f64 eps) eps))","(pow.f64 (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))","(/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sin.f64 eps) eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(neg.f64 (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (tan.f64 eps) eps))))","(exp.f64 (neg.f64 (-.f64 (*.f64 (log.f64 (+.f64 (tan.f64 eps) eps)) #s(literal -1 binary64)) (*.f64 (log.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))))","(exp.f64 (+.f64 (log.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (log.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))))","(exp.f64 (fma.f64 (log.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64) (log.f64 (+.f64 (tan.f64 eps) eps))))","(exp.f64 (*.f64 (-.f64 (*.f64 (log.f64 (+.f64 (tan.f64 eps) eps)) #s(literal -1 binary64)) (*.f64 (log.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (-.f64 (*.f64 (log.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (*.f64 (log.f64 (+.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(*.f64 (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 2 binary64))) (fma.f64 eps (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(fma.f64 (*.f64 eps eps) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(fma.f64 eps (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (sin.f64 eps)))","(pow.f64 (/.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) (neg.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (-.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (*.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 eps) (*.f64 eps eps))","(fma.f64 (neg.f64 eps) (neg.f64 eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(fma.f64 (sin.f64 eps) (neg.f64 (sin.f64 eps)) (*.f64 eps eps))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))","(fma.f64 eps eps (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","(+.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps))","(+.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (sin.f64 eps) eps))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (+.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (sin.f64 eps) (neg.f64 eps)))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (+.f64 (sin.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (sin.f64 eps) (neg.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 eps)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 eps)) #s(literal 1 binary64)) (neg.f64 eps))","(fma.f64 (sqrt.f64 (sin.f64 eps)) (sqrt.f64 (sin.f64 eps)) (neg.f64 eps))","(fma.f64 #s(literal -1 binary64) eps (sin.f64 eps))","(-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (/.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)))","(-.f64 (sin.f64 eps) eps)","(+.f64 (neg.f64 eps) (sin.f64 eps))","(+.f64 (sin.f64 eps) (neg.f64 eps))","(cos.f64 eps)","(*.f64 (pow.f64 (/.f64 eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 (tan.f64 eps)) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (-.f64 eps (tan.f64 eps)))","(*.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) eps))","(*.f64 (-.f64 eps (tan.f64 eps)) (pow.f64 eps #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal -1 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal -1 binary64))) (+.f64 (tan.f64 eps) eps))","(/.f64 (*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64)) eps)","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (/.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 eps (tan.f64 eps)))) (neg.f64 (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) eps))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (tan.f64 eps) eps) eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (*.f64 eps (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 eps eps))","(/.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) (neg.f64 eps))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 eps (tan.f64 eps)) eps)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 eps (-.f64 eps (tan.f64 eps)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 eps (tan.f64 eps))) eps))","(-.f64 #s(literal 1 binary64) (/.f64 (tan.f64 eps) eps))","(exp.f64 (*.f64 (log.f64 (/.f64 eps (-.f64 eps (tan.f64 eps)))) #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 eps (tan.f64 eps)))","(pow.f64 (/.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (tan.f64 eps) #s(literal 4 binary64)))) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (tan.f64 eps) #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64)))) (neg.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (-.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 4 binary64)) (*.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64)))))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) (neg.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(fma.f64 (neg.f64 eps) (neg.f64 eps) (neg.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 eps) (*.f64 eps eps))","(fma.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))","(fma.f64 (tan.f64 eps) (neg.f64 (tan.f64 eps)) (*.f64 eps eps))","(fma.f64 eps eps (neg.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 6 binary64)) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(+.f64 (neg.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps))","(+.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":295.31201171875,"type":"rewrite"},{"compiler":[[42012,4101]],"memory":[[5691104,74128768]],"time":104.27978515625,"type":"eval"},{"alts":[["(fma.f64 (sin.f64 eps) (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","fresh",62.33225230135756,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","next",62.8959325970216,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","fresh",62.89194285619819,"binary64"],["(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (tan.f64 eps) eps))))) (-.f64 eps (tan.f64 eps))))","fresh",62.73393689066204,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","next",62.894768256537326,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",62.4997601057073,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","next",62.8852055915114,"binary64"],["(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","next",61.061411745711304,"binary64"],["(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(approx (- (sin eps) eps) (*.f64 (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) eps)))","fresh",62.87272980020283,"binary64"],["(*.f64 (pow.f64 (-.f64 (exp.f64 (log.f64 (tan.f64 eps))) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","fresh",61.101112019883644,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (-.f64 (sin.f64 eps) eps))","next",62.499685461867664,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.21907111645009897,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.346129104143196,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","done",0.4570910112649186,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","done",0.7390777078242976,"binary64"]],"compiler":[[15,9],[23,14],[25,16],[44,20],[13,8],[9,6],[27,17],[16,10],[20,14],[13,10],[11,8],[26,15],[21,13],[16,11],[11,8],[15,9],[23,14],[25,16],[44,20],[13,8],[27,17],[16,10],[20,14],[13,10],[11,8]],"count":[[1106,15]],"kept":[{"done":[5,4],"fresh":[4,1],"new":[1092,9],"picked":[5,1]}],"memory":[[-5532128,45191504]],"min-error":[[0.006191259768442017,"binary64"]],"time":25.530029296875,"type":"prune"},{"egraph":[[0,8167,216,0.064082428],[6,7518,216,0.018943608],[5,3843,216,0.033732154],[4,1296,216,0.017078296],[3,496,216,0.005382174],[2,224,231,0.001927755],[1,121,231,0.000879519],[0,73,237,0.00064349],[0,40,276,0.000471504]],"inputs":[["(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64))","(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","(sqrt.f64 (tan.f64 eps))","(tan.f64 eps)","eps","(neg.f64 eps)","#s(literal -1 binary64)","(-.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (-.f64 (sin.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","#s(literal 1 binary64)","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","eps","(-.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","#s(literal -1 binary64)","(cos.f64 eps)","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","#s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(neg.f64 eps)","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) eps)","(cos.f64 eps)","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","eps","(pow.f64 (sin.f64 eps) #s(literal 2 binary64))","(sin.f64 eps)","#s(literal 2 binary64)","(+.f64 (sin.f64 eps) eps)","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(neg.f64 (cos.f64 eps))","(cos.f64 eps)","#s(literal -1 binary64)"]],"locations":[["(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","cost-diff",0],["(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","cost-diff",1],["(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","cost-diff",1],["(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","cost-diff",9],["(sin.f64 eps)","cost-diff",0],["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","cost-diff",0],["(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","cost-diff",4],["(sin.f64 eps)","cost-diff",0],["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","cost-diff",0],["(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","cost-diff",1],["(tan.f64 eps)","cost-diff",0],["(-.f64 (tan.f64 eps) eps)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (-.f64 (sin.f64 eps) eps))","cost-diff",2],["(sqrt.f64 (tan.f64 eps))","cost-diff",0],["(pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64))","cost-diff",0],["(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","cost-diff",2],["(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","cost-diff",5]],"memory":[[-2654384,32604848]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","(-.f64 (tan.f64 eps) eps)","(sqrt.f64 (tan.f64 eps))","(tan.f64 eps)","eps","(neg.f64 eps)","#s(literal -1 binary64)","(-.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (-.f64 (sin.f64 eps) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","#s(literal 1 binary64)","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","eps","(-.f64 (sin.f64 eps) eps)","(sin.f64 eps)","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) eps))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","#s(literal -1 binary64)","(cos.f64 eps)","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","#s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps))","#s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps))))","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))","(neg.f64 eps)","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(/.f64 (sin.f64 eps) eps)","(cos.f64 eps)","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) eps))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","(*.f64 eps eps)","eps","(pow.f64 (sin.f64 eps) #s(literal 2 binary64))","(sin.f64 eps)","#s(literal 2 binary64)","(+.f64 (sin.f64 eps) eps)","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","(neg.f64 (cos.f64 eps))","(cos.f64 eps)","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":227.506103515625,"type":"simplify"},{"compiler":[[264,39]],"locations":[["(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","accuracy",5.6868999582626705],["(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","accuracy",12.70841517216193],["(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","accuracy",18.65712149316114],["(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","accuracy",42.44956689519755],["(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","accuracy",0.01171875],["(-.f64 eps (sin.f64 eps))","accuracy",18.650177745972837],["(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","accuracy",18.658592172763683],["(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","accuracy",42.44956689519755],["(cos.f64 eps)","accuracy",0.0],["(-.f64 eps (sin.f64 eps))","accuracy",18.650177745972837],["(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","accuracy",18.65712149316114],["(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","accuracy",42.44956689519755],["(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","accuracy",0.10546875],["(-.f64 (tan.f64 eps) eps)","accuracy",18.649331084513907],["(-.f64 (sin.f64 eps) eps)","accuracy",18.650177745972837],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (-.f64 (sin.f64 eps) eps))","accuracy",43.03775701987672],["(pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64))","accuracy",0.10546875],["(-.f64 (sin.f64 eps) eps)","accuracy",18.650177745972837],["(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","accuracy",43.03775701987672],["(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","accuracy",57.50777823587058]],"memory":[[5326528,97236576]],"mixsample":[[25.561767578125,"adjust",800],[22.609619140625,"ival-div",0],[2.804931640625,"ival-pow2",400],[5.470947265625,"ival-div",400],[43.459716796875,"ival-pow",1600],[0.4208984375,"ival-pow2",3600],[0.16259765625,"ival-assert",0],[5.227783203125,"ival-div",1600],[0.006103515625,"ival-neg",800],[16.353759765625,"ival-sub",0],[3.30029296875,"ival-tan",0],[2.125,"ival-cos",0],[0.149169921875,"ival-sub",400],[2.4951171875,"ival-sqrt",0],[3.667724609375,"ival-cos",400],[9.8818359375,"ival-tan",400],[1.13525390625,"ival-neg",400],[42.156494140625,"ival-pow",0],[0.09521484375,"ival-tan",800],[160.0517578125,"ival-tan",1600],[0.0068359375,"ival-mult",800],[49.86083984375,"ival-add",0],[1.251708984375,"ival-mult",3600],[0.0341796875,"ival-sub",800],[6.217041015625,"ival-mult",1600],[19.16943359375,"ival-tan",4000],[0.009765625,"ival-add",400],[4.43603515625,"adjust",2800],[0.515380859375,"ival-sqrt",3600],[1.058837890625,"ival-sin",3600],[27.544677734375,"ival-pow",400],[2.61572265625,"ival-sqrt",400],[2.687744140625,"ival-pow2",0],[0.162841796875,"ival-neg",3600],[33.587646484375,"ival-cos",1600],[0.01904296875,"ival-sqrt",800],[0.94775390625,"ival-neg",1600],[7.35400390625,"ival-pow",3600],[85.4365234375,"ival-sin",1600],[21.428466796875,"ival-sin",4000],[17.260986328125,"adjust",2000],[13.583740234375,"ival-tan",3600],[2.779052734375,"ival-sqrt",1600],[7.58203125,"ival-sin",400],[19.2626953125,"ival-mult",0],[8.508544921875,"ival-mult",400],[2.732666015625,"ival-pow2",1600],[2.214111328125,"ival-sin",0],[0.009033203125,"ival-div",800],[9.680419921875,"ival-cos",3600],[0.323974609375,"ival-true",0],[1.13818359375,"ival-div",3600],[0.010009765625,"ival-add",800],[0.56884765625,"exact",0],[2.360107421875,"ival-neg",0]],"outcomes":[[77.42333984375,1,"valid",72],[520.5634765625,2,"valid",143],[169.962158203125,3,"valid",38],[1.120849609375,0,"valid",3]],"time":831.23095703125,"type":"localize"},{"count":[[22,88]],"inputs":[["(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64))","(sqrt.f64 (tan.f64 eps))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (-.f64 (sin.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(-.f64 (sin.f64 eps) eps)","(cos.f64 eps)","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))"]],"memory":[[-2895856,4895712]],"outputs":[["(* 1/3 (pow eps 3))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(/ 3 (pow eps 3))","(/ (+ 3 (* -6/5 (pow eps 2))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* -1/175 (pow eps 2)) 6/5))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7875 (pow eps 2)) 1/175)) 6/5))) (pow eps 3))","(sqrt eps)","(+ (sqrt eps) (* 1/6 (sqrt (pow eps 5))))","(+ (sqrt eps) (* (pow eps 3) (+ (* 1/15 (sqrt (pow eps 3))) (* 1/6 (sqrt (/ 1 eps))))))","(+ (sqrt eps) (* (pow eps 3) (+ (* 1/6 (sqrt (/ 1 eps))) (* (pow eps 2) (+ (* -1/72 (sqrt (/ 1 eps))) (* 1/15 (sqrt (/ 1 eps))))))))","eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","-1","(- (* -1/2 (pow eps 2)) 1)","(- (* (pow eps 2) (- (* -5/24 (pow eps 2)) 1/2)) 1)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -61/720 (pow eps 2)) 5/24)) 1/2)) 1)","(* -1/6 (pow eps 3))","(* (pow eps 3) (- (* 1/120 (pow eps 2)) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* (pow eps 2) (- (* 1/362880 (pow eps 2)) 1/5040)))) 1/6))","1","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2)))))","(+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2)))))))","(* 1/3 (pow eps 4))","(* (pow eps 4) (+ 1/3 (* -2/45 (pow eps 2))))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* 1/315 (pow eps 2)) 2/45))))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 1/315 (* -2/14175 (pow eps 2)))) 2/45))))","(* -1 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(/ -1 eps)","(/ (- (* -1 (/ (sin eps) (* eps (cos eps)))) 1) eps)","(/ (- (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ 1 (/ (sin eps) (* eps (cos eps))))) eps)","(/ (- (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(sqrt (/ (sin eps) (cos eps)))","(/ (sin eps) (cos eps))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(/ -1 (cos eps))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(- (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) 2) (pow eps 2))) (/ (sin eps) eps)))))","(- (+ 1 (+ (* -1 (/ (+ (* (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) 2))))) (/ (* (pow (sin eps) 2) (+ (sin eps) (* -1 (/ (sin eps) (cos eps))))) (cos eps))) (pow eps 3))) (* -1 (/ (pow (sin eps) 2) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) 2) (pow eps 2))) (/ (sin eps) eps)))))","(* eps (- (/ (sin eps) eps) 1))","(cos eps)","(/ (sin eps) (* eps (cos eps)))","(pow eps 2)","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (/ (+ 1 (/ (sin eps) (* eps (cos eps)))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (cos eps))))) eps)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (pow (cos eps) 2)))) eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (sin eps) (* eps (cos eps)))))","(+ 1 (* -1 (/ (- (* -1 (/ (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) 2)))) eps)) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (- (+ (* -1 (pow (sin eps) 2)) (+ (/ (* (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) 2))))) eps) (/ (* (pow (sin eps) 2) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) 2)))) eps)) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) eps)))))"]],"series":[[6.052001953125,"((+ (* (sqrt (tan eps)) (sqrt (tan eps))) (neg eps)) (* (pow (+ (* (sqrt (tan eps)) (sqrt (tan eps))) (neg eps)) -1) (- (sin eps) eps)) (pow (+ (* (sqrt (tan eps)) (sqrt (tan eps))) (neg eps)) -1) (sqrt (tan eps)) (* (/ 1 (- (tan eps) eps)) (- (sin eps) eps)) (/ 1 (- (tan eps) eps)) (- (tan eps) eps) (tan eps) (+ (* (/ -1 (cos eps)) (sin eps)) eps) (/ (- eps (sin eps)) (+ (* (/ -1 (cos eps)) (sin eps)) eps)) (- eps (sin eps)) (sin eps) (+ (* (neg eps) (/ (/ (sin eps) eps) (cos eps))) eps) (/ (- eps (sin eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps)) (/ (- (* eps eps) (pow (sin eps) 2)) (+ (sin eps) eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (pow (neg (cos eps)) -1) (/ (/ (- (* eps eps) (pow (sin eps) 2)) (+ (sin eps) eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps)) (- (sin eps) eps) (cos eps) (/ (/ (sin eps) eps) (cos eps)) (- (* eps eps) (pow (sin eps) 2)))","eps","-inf"],[4.156982421875,"((+ (* (sqrt (tan eps)) (sqrt (tan eps))) (neg eps)) (* (pow (+ (* (sqrt (tan eps)) (sqrt (tan eps))) (neg eps)) -1) (- (sin eps) eps)) (pow (+ (* (sqrt (tan eps)) (sqrt (tan eps))) (neg eps)) -1) (sqrt (tan eps)) (* (/ 1 (- (tan eps) eps)) (- (sin eps) eps)) (/ 1 (- (tan eps) eps)) (- (tan eps) eps) (tan eps) (+ (* (/ -1 (cos eps)) (sin eps)) eps) (/ (- eps (sin eps)) (+ (* (/ -1 (cos eps)) (sin eps)) eps)) (- eps (sin eps)) (sin eps) (+ (* (neg eps) (/ (/ (sin eps) eps) (cos eps))) eps) (/ (- eps (sin eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps)) (/ (- (* eps eps) (pow (sin eps) 2)) (+ (sin eps) eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (pow (neg (cos eps)) -1) (/ (/ (- (* eps eps) (pow (sin eps) 2)) (+ (sin eps) eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps)) (- (sin eps) eps) (cos eps) (/ (/ (sin eps) eps) (cos eps)) (- (* eps eps) (pow (sin eps) 2)))","eps","inf"],[2.208984375,"((+ (* (sqrt (tan eps)) (sqrt (tan eps))) (neg eps)) (* (pow (+ (* (sqrt (tan eps)) (sqrt (tan eps))) (neg eps)) -1) (- (sin eps) eps)) (pow (+ (* (sqrt (tan eps)) (sqrt (tan eps))) (neg eps)) -1) (sqrt (tan eps)) (* (/ 1 (- (tan eps) eps)) (- (sin eps) eps)) (/ 1 (- (tan eps) eps)) (- (tan eps) eps) (tan eps) (+ (* (/ -1 (cos eps)) (sin eps)) eps) (/ (- eps (sin eps)) (+ (* (/ -1 (cos eps)) (sin eps)) eps)) (- eps (sin eps)) (sin eps) (+ (* (neg eps) (/ (/ (sin eps) eps) (cos eps))) eps) (/ (- eps (sin eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps)) (/ (- (* eps eps) (pow (sin eps) 2)) (+ (sin eps) eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (pow (neg (cos eps)) -1) (/ (/ (- (* eps eps) (pow (sin eps) 2)) (+ (sin eps) eps)) (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps)) (- (sin eps) eps) (cos eps) (/ (/ (sin eps) eps) (cos eps)) (- (* eps eps) (pow (sin eps) 2)))","eps","0"]],"time":14.444091796875,"type":"series"},{"count":[[88,87]],"egraph":[[0,8418,1306,0.101588028],[2,3715,1393,0.032129456],[1,1162,1486,0.013689742],[0,399,1571,0.004365842]],"inputs":[["(* 1/3 (pow eps 3))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(/ 3 (pow eps 3))","(/ (+ 3 (* -6/5 (pow eps 2))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* -1/175 (pow eps 2)) 6/5))) (pow eps 3))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7875 (pow eps 2)) 1/175)) 6/5))) (pow eps 3))","(sqrt eps)","(+ (sqrt eps) (* 1/6 (sqrt (pow eps 5))))","(+ (sqrt eps) (* (pow eps 3) (+ (* 1/15 (sqrt (pow eps 3))) (* 1/6 (sqrt (/ 1 eps))))))","(+ (sqrt eps) (* (pow eps 3) (+ (* 1/6 (sqrt (/ 1 eps))) (* (pow eps 2) (+ (* -1/72 (sqrt (/ 1 eps))) (* 1/15 (sqrt (/ 1 eps))))))))","eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","-1","(- (* -1/2 (pow eps 2)) 1)","(- (* (pow eps 2) (- (* -5/24 (pow eps 2)) 1/2)) 1)","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -61/720 (pow eps 2)) 5/24)) 1/2)) 1)","(* -1/6 (pow eps 3))","(* (pow eps 3) (- (* 1/120 (pow eps 2)) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* (pow eps 2) (- (* 1/362880 (pow eps 2)) 1/5040)))) 1/6))","1","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2)))))","(+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2)))))))","(* 1/3 (pow eps 4))","(* (pow eps 4) (+ 1/3 (* -2/45 (pow eps 2))))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* 1/315 (pow eps 2)) 2/45))))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 1/315 (* -2/14175 (pow eps 2)))) 2/45))))","(* -1 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(/ -1 eps)","(/ (- (* -1 (/ (sin eps) (* eps (cos eps)))) 1) eps)","(/ (- (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ 1 (/ (sin eps) (* eps (cos eps))))) eps)","(/ (- (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(sqrt (/ (sin eps) (cos eps)))","(/ (sin eps) (cos eps))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(/ -1 (cos eps))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(- (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) 2) (pow eps 2))) (/ (sin eps) eps)))))","(- (+ 1 (+ (* -1 (/ (+ (* (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) 2))))) (/ (* (pow (sin eps) 2) (+ (sin eps) (* -1 (/ (sin eps) (cos eps))))) (cos eps))) (pow eps 3))) (* -1 (/ (pow (sin eps) 2) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) 2) (pow eps 2))) (/ (sin eps) eps)))))","(* eps (- (/ (sin eps) eps) 1))","(cos eps)","(/ (sin eps) (* eps (cos eps)))","(pow eps 2)","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (/ (+ 1 (/ (sin eps) (* eps (cos eps)))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps))) eps))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (cos eps))))) eps)))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (pow (cos eps) 2)))) eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (sin eps) (* eps (cos eps)))))","(+ 1 (* -1 (/ (- (* -1 (/ (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) 2)))) eps)) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(+ 1 (* -1 (/ (- (* -1 (/ (- (+ (* -1 (pow (sin eps) 2)) (+ (/ (* (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) 2))))) eps) (/ (* (pow (sin eps) 2) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) 2)))) eps)) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) eps)))))"]],"memory":[[-407712,47321056]],"method":["egg-herbie"],"outputs":[["(* 1/3 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64))","(* (pow eps 3) (+ 1/3 (* 2/15 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 2/15 binary64) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/3 (* (pow eps 2) (+ 2/15 (* (pow eps 2) (+ 17/315 (* 62/2835 (pow eps 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 62/2835 binary64) (*.f64 eps eps) #s(literal 17/315 binary64)) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(/ 3 (pow eps 3))","(/.f64 #s(literal 3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(/ (+ 3 (* -6/5 (pow eps 2))) (pow eps 3))","(/.f64 (fma.f64 #s(literal -6/5 binary64) (*.f64 eps eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(/ (+ 3 (* (pow eps 2) (- (* -1/175 (pow eps 2)) 6/5))) (pow eps 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/175 binary64) (*.f64 eps eps) #s(literal -6/5 binary64)) (*.f64 eps eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(/ (+ 3 (* (pow eps 2) (- (* (pow eps 2) (- (* -2/7875 (pow eps 2)) 1/175)) 6/5))) (pow eps 3))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7875 binary64) (*.f64 eps eps) #s(literal -1/175 binary64)) (*.f64 eps eps) #s(literal -6/5 binary64)) (*.f64 eps eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(sqrt eps)","(sqrt.f64 eps)","(+ (sqrt eps) (* 1/6 (sqrt (pow eps 5))))","(fma.f64 (sqrt.f64 (pow.f64 eps #s(literal 5 binary64))) #s(literal 1/6 binary64) (sqrt.f64 eps))","(+ (sqrt eps) (* (pow eps 3) (+ (* 1/15 (sqrt (pow eps 3))) (* 1/6 (sqrt (/ 1 eps))))))","(fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) eps)) #s(literal 1/6 binary64) (*.f64 (sqrt.f64 (pow.f64 eps #s(literal 3 binary64))) #s(literal 1/15 binary64))) (pow.f64 eps #s(literal 3 binary64)) (sqrt.f64 eps))","(+ (sqrt eps) (* (pow eps 3) (+ (* 1/6 (sqrt (/ 1 eps))) (* (pow eps 2) (+ (* -1/72 (sqrt (/ 1 eps))) (* 1/15 (sqrt (/ 1 eps))))))))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) eps)) (fma.f64 #s(literal 19/360 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)) (sqrt.f64 eps))","eps","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 2/15 binary64) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* -1/3 (pow eps 3))","(*.f64 #s(literal -1/3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -17/315 binary64) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -62/2835 binary64) (*.f64 eps eps) #s(literal -17/315 binary64)) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* 1/6 (pow eps 3))","(*.f64 #s(literal 1/6 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 #s(literal -1/6 binary64) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","-1","#s(literal -1 binary64)","(- (* -1/2 (pow eps 2)) 1)","(fma.f64 #s(literal -1/2 binary64) (*.f64 eps eps) #s(literal -1 binary64))","(- (* (pow eps 2) (- (* -5/24 (pow eps 2)) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -5/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal -1 binary64))","(- (* (pow eps 2) (- (* (pow eps 2) (- (* -61/720 (pow eps 2)) 5/24)) 1/2)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -61/720 binary64) (*.f64 eps eps) #s(literal -5/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal -1 binary64))","(* -1/6 (pow eps 3))","(*.f64 #s(literal -1/6 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* 1/120 (pow eps 2)) 1/6))","(*.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (+ 1/120 (* (pow eps 2) (- (* 1/362880 (pow eps 2)) 1/5040)))) 1/6))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/362880 binary64) (*.f64 eps eps) #s(literal -1/5040 binary64)) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow eps 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* 1/3 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2)))))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 2/15 binary64) #s(literal 1/3 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(* 1/3 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/3 binary64))","(* (pow eps 4) (+ 1/3 (* -2/45 (pow eps 2))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal -2/45 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* 1/315 (pow eps 2)) 2/45))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal 1/315 binary64) (*.f64 eps eps) #s(literal -2/45 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)))","(* (pow eps 4) (+ 1/3 (* (pow eps 2) (- (* (pow eps 2) (+ 1/315 (* -2/14175 (pow eps 2)))) 2/45))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -2/14175 binary64) (*.f64 eps eps) #s(literal 1/315 binary64)) (*.f64 eps eps) #s(literal -2/45 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)))","(* -1 eps)","(neg.f64 eps)","(* eps (- (/ (sin eps) (* eps (cos eps))) 1))","(fma.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps (neg.f64 eps))","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)) (/.f64 #s(literal -1 binary64) eps)) (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (-.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (*.f64 eps eps)) (/.f64 #s(literal -1 binary64) eps)) (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) eps)) #s(literal 1 binary64)))","(/ -1 eps)","(/.f64 #s(literal -1 binary64) eps)","(/ (- (* -1 (/ (sin eps) (* eps (cos eps)))) 1) eps)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) eps)","(/ (- (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))) (+ 1 (/ (sin eps) (* eps (cos eps))))) eps)","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) eps)","(/ (- (* -1 (/ (pow (sin eps) 3) (* (pow eps 3) (pow (cos eps) 3)))) (+ 1 (+ (/ (sin eps) (* eps (cos eps))) (/ (pow (sin eps) 2) (* (pow eps 2) (pow (cos eps) 2)))))) eps)","(/.f64 (-.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))) eps)","(sqrt (/ (sin eps) (cos eps)))","(sqrt.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(fma.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) (neg.f64 eps) eps)","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(sin eps)","(sin.f64 eps)","(/ -1 (cos eps))","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","(+ 1 (* -1 (/ (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) 2) (pow eps 2))) (/ (sin eps) eps)))))","(-.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) #s(literal 2 binary64))) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)))","(- (+ 1 (+ (* -1 (/ (+ (* (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) 2))))) (/ (* (pow (sin eps) 2) (+ (sin eps) (* -1 (/ (sin eps) (cos eps))))) (cos eps))) (pow eps 3))) (* -1 (/ (pow (sin eps) 2) (pow eps 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (+ (* -1 (/ (pow (sin eps) 2) (* (pow eps 2) (cos eps)))) (+ (* -1 (/ (pow (+ (sin eps) (* -1 (/ (sin eps) (cos eps)))) 2) (pow eps 2))) (/ (sin eps) eps)))))","(-.f64 (-.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) (/.f64 (*.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (sin.f64 eps) (pow.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) #s(literal 2 binary64))))) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)) (pow.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) #s(literal 2 binary64))) (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)))","(* eps (- (/ (sin eps) eps) 1))","(*.f64 (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) eps)","(cos eps)","(cos.f64 eps)","(/ (sin eps) (* eps (cos eps)))","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(pow eps 2)","(*.f64 eps eps)","(* (pow eps 2) (+ 1 (* -1 (/ (pow (sin eps) 2) (pow eps 2)))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) eps)) (*.f64 eps eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps)))))))","(fma.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps (neg.f64 eps))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)))) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (*.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps))","(* -1 (/ (+ 1 (/ (sin eps) (* eps (cos eps)))) eps))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) eps)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (pow (sin eps) 2) (* eps (pow (cos eps) 2)))) (/ (sin eps) (cos eps))) eps))) eps))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps)) eps)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ (pow (sin eps) 3) (* eps (pow (cos eps) 3))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))) eps)) (/ (sin eps) (cos eps))) eps))) eps))","(/.f64 (+.f64 (/.f64 (+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (/.f64 (sin.f64 eps) (*.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) eps)) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))) eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) #s(literal 1 binary64)) (neg.f64 eps))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(fma.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) (neg.f64 eps) eps)","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (cos eps))))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)))) eps))","(+ 1 (* -1 (/ (+ (* -1 (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* -1 (/ (+ (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (cos eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* eps (pow (cos eps) 2)))) eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (*.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps) (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps))) eps))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) eps)) eps)","(+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (* -1 (/ (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) 2)))) eps)) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(+.f64 (/.f64 (fma.f64 (sin.f64 eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) (/.f64 (fma.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (sin.f64 eps) (pow.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) #s(literal 2 binary64))) eps)) eps) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (* -1 (/ (- (+ (* -1 (pow (sin eps) 2)) (+ (/ (* (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) (- (* -1 (pow (sin eps) 2)) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) 2))))) eps) (/ (* (pow (sin eps) 2) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) (* eps (cos eps))))) (+ (* -1 (/ (pow (sin eps) 2) (cos eps))) (* -1 (pow (+ (* -1 (sin eps)) (/ (sin eps) (cos eps))) 2)))) eps)) (+ (* -1 (sin eps)) (/ (sin eps) (cos eps)))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) eps) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (sin.f64 eps) (pow.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) #s(literal 2 binary64)))) (fma.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (sin.f64 eps) (pow.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) #s(literal 2 binary64)))) eps)) eps))","(* -1 (* eps (+ 1 (* -1 (/ (sin eps) eps)))))","(*.f64 (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":302.684814453125,"type":"simplify"},{"count":[[22,1648]],"egraph":[[0,8939,127,0.082377991],[2,1948,127,0.039332103],[1,288,133,0.008914702],[0,73,152,0.002303658],[0,40,197,0.000457059]],"inputs":[["(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64))","(sqrt.f64 (tan.f64 eps))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (-.f64 (sin.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","(-.f64 (tan.f64 eps) eps)","(tan.f64 eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(-.f64 (sin.f64 eps) eps)","(cos.f64 eps)","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))"]],"memory":[[1894368,83252416]],"outputs":[["(*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 eps) (tan.f64 eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (tan.f64 eps) (*.f64 #s(literal 1 binary64) eps)) #s(literal 1 binary64))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (neg.f64 (cos.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (neg.f64 (cos.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (cos.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) eps) (sin.f64 eps))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (cos.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (cos.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (neg.f64 (sin.f64 eps)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (neg.f64 (cos.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (cos.f64 eps) (sin.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (cos.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (sin.f64 eps))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (cos.f64 eps)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (+.f64 #s(literal 0 binary64) eps) (*.f64 (neg.f64 (cos.f64 eps)) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (neg.f64 (cos.f64 eps)) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (neg.f64 (cos.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) eps) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 (sin.f64 eps) (+.f64 #s(literal 0 binary64) eps) (*.f64 (cos.f64 eps) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (cos.f64 eps) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (sin.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (cos.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (exp.f64 (log.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (neg.f64 eps) (tan.f64 eps)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))) #s(literal 1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (+.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))","(/.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)) eps)","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)) (/.f64 (sqrt.f64 (sin.f64 eps)) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (neg.f64 eps))","(fma.f64 (fabs.f64 (sin.f64 eps)) (fabs.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64))) (neg.f64 eps))","(fma.f64 (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (neg.f64 eps))","(fma.f64 (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (neg.f64 eps))","(fma.f64 (*.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) eps)","(fma.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))) (neg.f64 eps))","(fma.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (neg.f64 eps))","(fma.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (sin.f64 eps)) eps)","(fma.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(fma.f64 #s(literal 1 binary64) (tan.f64 eps) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (tan.f64 eps) eps)","(fma.f64 #s(literal -1 binary64) eps (tan.f64 eps))","(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","(fma.f64 (tan.f64 eps) #s(literal 1 binary64) (neg.f64 eps))","(fma.f64 (tan.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 eps #s(literal -1 binary64) (tan.f64 eps))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 (neg.f64 eps) (tan.f64 eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (neg.f64 eps) (tan.f64 eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))) (/.f64 (*.f64 eps eps) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (+.f64 (tan.f64 eps) #s(literal 0 binary64)) #s(literal 1 binary64)) (/.f64 eps #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (tan.f64 eps) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(-.f64 (+.f64 (tan.f64 eps) #s(literal 0 binary64)) eps)","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (tan.f64 eps) #s(literal 1 binary64)) (/.f64 eps #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 eps (tan.f64 eps)))","(-.f64 (tan.f64 eps) eps)","(exp.f64 (neg.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))))","(exp.f64 (log.f64 (-.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 #s(literal -1 binary64) (tan.f64 eps)) eps)","(+.f64 (neg.f64 eps) (tan.f64 eps))","(+.f64 (tan.f64 eps) (neg.f64 eps))","(+.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (-.f64 (sin.f64 eps) eps))","(*.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (tan.f64 eps) eps)) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 (sin.f64 eps) eps) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (-.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 (sin.f64 eps) eps) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) (-.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps))) (*.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (sin.f64 eps) eps))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sin.f64 eps) eps))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (sin.f64 eps) eps)) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (sin.f64 eps) eps)) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal 1 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (sqrt.f64 (sin.f64 eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (sqrt.f64 (sin.f64 eps)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (tan.f64 eps) eps) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)))","(fma.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (tan.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (+.f64 (sin.f64 eps) #s(literal 0 binary64)) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)))","(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (+.f64 (tan.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 (tan.f64 eps) eps)))","(pow.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)))","(exp.f64 (fma.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64) (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (sqrt.f64 (tan.f64 eps)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (tan.f64 eps)) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (sin.f64 eps)) (sqrt.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (sin.f64 eps)) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 (tan.f64 eps) #s(literal 4 binary64)) #s(literal 1/8 binary64))","(pow.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (tan.f64 eps)) #s(literal 1 binary64))","(pow.f64 (tan.f64 eps) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (sin.f64 eps))) (neg.f64 (sqrt.f64 (cos.f64 eps))))","(/.f64 (sqrt.f64 (neg.f64 (sin.f64 eps))) (sqrt.f64 (neg.f64 (cos.f64 eps))))","(/.f64 (sqrt.f64 (sin.f64 eps)) (fabs.f64 (sqrt.f64 (cos.f64 eps))))","(/.f64 (sqrt.f64 (sin.f64 eps)) (sqrt.f64 (cos.f64 eps)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (cos.f64 eps) (sin.f64 eps))))","(sqrt.f64 (tan.f64 eps))","(fabs.f64 (neg.f64 (sqrt.f64 (tan.f64 eps))))","(fabs.f64 (sqrt.f64 (tan.f64 eps)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (tan.f64 eps))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (tan.f64 eps))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (-.f64 (sin.f64 eps) eps))","(*.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (tan.f64 eps) eps)) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 (sin.f64 eps) eps) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (-.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (-.f64 (sin.f64 eps) eps) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) (-.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps))) (*.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (sin.f64 eps) eps))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sin.f64 eps) eps))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (sin.f64 eps) eps)) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (sin.f64 eps) eps)) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal 1 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (sqrt.f64 (sin.f64 eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (sqrt.f64 (sin.f64 eps)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (tan.f64 eps) eps) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)))","(fma.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (tan.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (+.f64 (sin.f64 eps) #s(literal 0 binary64)) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (sin.f64 eps)) (*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 eps)))","(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (+.f64 (tan.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (-.f64 (tan.f64 eps) eps)))","(pow.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)))","(exp.f64 (fma.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64) (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 eps) (tan.f64 eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (tan.f64 eps) (*.f64 #s(literal 1 binary64) eps)) #s(literal 1 binary64))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (neg.f64 (cos.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (neg.f64 (cos.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (cos.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) eps) (sin.f64 eps))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (cos.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (cos.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (neg.f64 (sin.f64 eps)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (neg.f64 (cos.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (cos.f64 eps) (sin.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (cos.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (sin.f64 eps))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (cos.f64 eps)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (+.f64 #s(literal 0 binary64) eps) (*.f64 (neg.f64 (cos.f64 eps)) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (neg.f64 (cos.f64 eps)) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (neg.f64 (cos.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) eps) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 (sin.f64 eps) (+.f64 #s(literal 0 binary64) eps) (*.f64 (cos.f64 eps) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (cos.f64 eps) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (sin.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (cos.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (exp.f64 (log.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (neg.f64 eps) (tan.f64 eps)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))) #s(literal 1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (+.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))","(/.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)) eps)","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)) (/.f64 (sqrt.f64 (sin.f64 eps)) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (neg.f64 eps))","(fma.f64 (fabs.f64 (sin.f64 eps)) (fabs.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64))) (neg.f64 eps))","(fma.f64 (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (neg.f64 eps))","(fma.f64 (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (neg.f64 eps))","(fma.f64 (*.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) eps)","(fma.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))) (neg.f64 eps))","(fma.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (neg.f64 eps))","(fma.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (sin.f64 eps)) eps)","(fma.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(fma.f64 #s(literal 1 binary64) (tan.f64 eps) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (tan.f64 eps) eps)","(fma.f64 #s(literal -1 binary64) eps (tan.f64 eps))","(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","(fma.f64 (tan.f64 eps) #s(literal 1 binary64) (neg.f64 eps))","(fma.f64 (tan.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 eps #s(literal -1 binary64) (tan.f64 eps))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 (neg.f64 eps) (tan.f64 eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (neg.f64 eps) (tan.f64 eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))) (/.f64 (*.f64 eps eps) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (+.f64 (tan.f64 eps) #s(literal 0 binary64)) #s(literal 1 binary64)) (/.f64 eps #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (tan.f64 eps) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(-.f64 (+.f64 (tan.f64 eps) #s(literal 0 binary64)) eps)","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (tan.f64 eps) #s(literal 1 binary64)) (/.f64 eps #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 eps (tan.f64 eps)))","(-.f64 (tan.f64 eps) eps)","(exp.f64 (neg.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))))","(exp.f64 (log.f64 (-.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 #s(literal -1 binary64) (tan.f64 eps)) eps)","(+.f64 (neg.f64 eps) (tan.f64 eps))","(+.f64 (tan.f64 eps) (neg.f64 eps))","(+.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (cos.f64 eps)))","(*.f64 (fabs.f64 (sin.f64 eps)) (fabs.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))))","(*.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 (sin.f64 eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 eps))","(*.f64 (sin.f64 eps) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)))","(*.f64 (tan.f64 eps) #s(literal 1 binary64))","(pow.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (tan.f64 eps) #s(literal 4 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (tan.f64 eps)) #s(literal 2 binary64))","(pow.f64 (tan.f64 eps) #s(literal 1 binary64))","(/.f64 (fabs.f64 (neg.f64 (sin.f64 eps))) (fabs.f64 (neg.f64 (cos.f64 eps))))","(/.f64 (fabs.f64 (sin.f64 eps)) (fabs.f64 (cos.f64 eps)))","(/.f64 (sqrt.f64 (*.f64 (sin.f64 eps) (tan.f64 eps))) (sqrt.f64 (cos.f64 eps)))","(/.f64 (sqrt.f64 (*.f64 (tan.f64 eps) (sin.f64 eps))) (sqrt.f64 (cos.f64 eps)))","(/.f64 (sqrt.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (neg.f64 (neg.f64 (cos.f64 eps))))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))","(/.f64 #s(literal 1 binary64) (fabs.f64 (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 eps) (sin.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 eps) (sin.f64 eps))))","(tan.f64 eps)","(sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 eps))) (*.f64 #s(literal -1 binary64) (tan.f64 eps)))","(fabs.f64 (neg.f64 (tan.f64 eps)))","(fabs.f64 (tan.f64 eps))","(exp.f64 (*.f64 (log.f64 (tan.f64 eps)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (log.f64 (tan.f64 eps)))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 eps) (tan.f64 eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (tan.f64 eps) (*.f64 #s(literal 1 binary64) eps)) #s(literal 1 binary64))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (neg.f64 (cos.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (neg.f64 (cos.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (cos.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) eps) (sin.f64 eps))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (cos.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (cos.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (neg.f64 (sin.f64 eps)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (neg.f64 (cos.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (cos.f64 eps) (sin.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (cos.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (sin.f64 eps))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (cos.f64 eps)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (+.f64 #s(literal 0 binary64) eps) (*.f64 (neg.f64 (cos.f64 eps)) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (neg.f64 (cos.f64 eps)) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (neg.f64 (cos.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) eps) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 (sin.f64 eps) (+.f64 #s(literal 0 binary64) eps) (*.f64 (cos.f64 eps) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (cos.f64 eps) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (sin.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (cos.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (exp.f64 (log.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (neg.f64 eps) (tan.f64 eps)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))) #s(literal 1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (+.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))","(/.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)) eps)","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)) (/.f64 (sqrt.f64 (sin.f64 eps)) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (neg.f64 eps))","(fma.f64 (fabs.f64 (sin.f64 eps)) (fabs.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64))) (neg.f64 eps))","(fma.f64 (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (neg.f64 eps))","(fma.f64 (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (neg.f64 eps))","(fma.f64 (*.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) eps)","(fma.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))) (neg.f64 eps))","(fma.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (neg.f64 eps))","(fma.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (sin.f64 eps)) eps)","(fma.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(fma.f64 #s(literal 1 binary64) (tan.f64 eps) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (tan.f64 eps) eps)","(fma.f64 #s(literal -1 binary64) eps (tan.f64 eps))","(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","(fma.f64 (tan.f64 eps) #s(literal 1 binary64) (neg.f64 eps))","(fma.f64 (tan.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 eps #s(literal -1 binary64) (tan.f64 eps))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 (neg.f64 eps) (tan.f64 eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (neg.f64 eps) (tan.f64 eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))) (/.f64 (*.f64 eps eps) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (+.f64 (tan.f64 eps) #s(literal 0 binary64)) #s(literal 1 binary64)) (/.f64 eps #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (tan.f64 eps) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(-.f64 (+.f64 (tan.f64 eps) #s(literal 0 binary64)) eps)","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (tan.f64 eps) #s(literal 1 binary64)) (/.f64 eps #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 eps (tan.f64 eps)))","(-.f64 (tan.f64 eps) eps)","(exp.f64 (neg.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))))","(exp.f64 (log.f64 (-.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 #s(literal -1 binary64) (tan.f64 eps)) eps)","(+.f64 (neg.f64 eps) (tan.f64 eps))","(+.f64 (tan.f64 eps) (neg.f64 eps))","(+.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))))) (/.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))) (/.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 (tan.f64 eps) eps) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))))) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (-.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (-.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)) (neg.f64 (-.f64 eps (sin.f64 eps))))","(*.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 eps (sin.f64 eps)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (tan.f64 eps) eps)))","(pow.f64 (/.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))) (neg.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (tan.f64 eps) eps))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (neg.f64 (-.f64 (tan.f64 eps) eps))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (neg.f64 (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps (neg.f64 (-.f64 (tan.f64 eps) eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))))","(/.f64 (-.f64 (neg.f64 eps) (neg.f64 (sin.f64 eps))) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64)) (-.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (neg.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (tan.f64 eps) eps))","(/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (tan.f64 eps) eps) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 eps (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))))","(-.f64 (/.f64 (*.f64 eps (-.f64 (tan.f64 eps) eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps)))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(-.f64 (/.f64 eps (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))) (/.f64 (sin.f64 eps) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (tan.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (tan.f64 eps) eps))) (/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (-.f64 (tan.f64 eps) eps)))","(-.f64 (*.f64 (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 eps (-.f64 (tan.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (-.f64 (tan.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps)))) #s(literal -1 binary64)))","(+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (sin.f64 eps) eps))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 eps (sin.f64 eps)))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (pow.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (neg.f64 (sin.f64 eps)) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))","(/.f64 (neg.f64 (-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (sin.f64 eps) eps)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (neg.f64 (+.f64 (sin.f64 eps) eps))) (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (+.f64 (sin.f64 eps) eps) #s(literal 1 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (sin.f64 eps) eps))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (sin.f64 eps) eps)) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64))) (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps (neg.f64 (sin.f64 eps)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (sin.f64 eps) eps))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps (neg.f64 (sin.f64 eps))))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 eps (neg.f64 (sin.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (neg.f64 (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))))","(neg.f64 (neg.f64 (-.f64 eps (sin.f64 eps))))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 eps (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 eps (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (neg.f64 eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (neg.f64 eps) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 eps (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 eps (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 eps (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (*.f64 eps eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 eps (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (neg.f64 eps) (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (neg.f64 eps) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 eps (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 eps (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (*.f64 eps (neg.f64 eps)) (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (*.f64 eps (neg.f64 eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (*.f64 eps (neg.f64 eps)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (*.f64 eps (neg.f64 eps)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (sin.f64 eps) eps) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (*.f64 eps eps) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (*.f64 eps eps) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (*.f64 eps eps) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 #s(literal -1 binary64) (sin.f64 eps) eps)","(fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))) (/.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps (neg.f64 (sin.f64 eps)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 eps (neg.f64 (sin.f64 eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (+.f64 (sin.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (+.f64 (sin.f64 eps) eps)))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (+.f64 (sin.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (+.f64 (sin.f64 eps) eps)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (sin.f64 eps) eps))) (neg.f64 (-.f64 eps (sin.f64 eps))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(-.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))","(-.f64 eps (sin.f64 eps))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(+.f64 (neg.f64 (sin.f64 eps)) eps)","(+.f64 eps (neg.f64 (sin.f64 eps)))","(*.f64 (pow.f64 (sqrt.f64 (sin.f64 eps)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 eps)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (sin.f64 eps)) (sqrt.f64 (sin.f64 eps)))","(pow.f64 (sqrt.f64 (sin.f64 eps)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sin.f64 eps) #s(literal 1 binary64))","(sin.f64 eps)","(exp.f64 (log.f64 (sin.f64 eps)))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps))) (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps))) (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps))) (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps))) (*.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) (*.f64 eps eps))) (*.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64))) (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 (/.f64 (tan.f64 eps) eps) (*.f64 (neg.f64 eps) eps))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps))) (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 eps eps)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 (/.f64 (tan.f64 eps) eps) (*.f64 (neg.f64 eps) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps))) (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps))) (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 eps eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps))) (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (/.f64 (neg.f64 eps) (/.f64 (cos.f64 eps) (neg.f64 (sin.f64 eps)))) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (neg.f64 eps) (/.f64 (cos.f64 eps) #s(literal 1 binary64))) (/.f64 (sin.f64 eps) eps) eps)","(fma.f64 (/.f64 (neg.f64 eps) (/.f64 (cos.f64 eps) (sin.f64 eps))) (pow.f64 eps #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (neg.f64 eps) (cos.f64 eps)) (/.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) eps)","(fma.f64 (/.f64 (neg.f64 eps) (cos.f64 eps)) (/.f64 (sin.f64 eps) eps) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (/.f64 (cos.f64 eps) (neg.f64 (sin.f64 eps)))) (/.f64 eps (neg.f64 eps)) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (/.f64 (cos.f64 eps) #s(literal 1 binary64))) (/.f64 eps (/.f64 eps (sin.f64 eps))) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (/.f64 (cos.f64 eps) (sin.f64 eps))) (/.f64 eps eps) eps)","(fma.f64 (/.f64 eps (/.f64 (cos.f64 eps) (neg.f64 (sin.f64 eps)))) (pow.f64 eps #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 eps (/.f64 (cos.f64 eps) #s(literal 1 binary64))) (/.f64 (sin.f64 eps) (neg.f64 eps)) eps)","(fma.f64 (/.f64 eps (/.f64 (cos.f64 eps) (sin.f64 eps))) (/.f64 #s(literal -1 binary64) eps) eps)","(fma.f64 (/.f64 eps (cos.f64 eps)) (/.f64 (sin.f64 eps) (neg.f64 eps)) eps)","(fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) eps)","(fma.f64 (/.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) (/.f64 (neg.f64 eps) (cos.f64 eps)) eps)","(fma.f64 (*.f64 (/.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) eps eps)","(fma.f64 (*.f64 #s(literal -1 binary64) (/.f64 (tan.f64 eps) eps)) (/.f64 eps #s(literal 1 binary64)) eps)","(fma.f64 (/.f64 eps #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (/.f64 (tan.f64 eps) eps)) eps)","(fma.f64 (*.f64 (/.f64 (sin.f64 eps) eps) (neg.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (*.f64 (/.f64 (sin.f64 eps) eps) (neg.f64 eps)) eps)","(fma.f64 (*.f64 #s(literal -1 binary64) (tan.f64 eps)) (/.f64 (neg.f64 eps) (neg.f64 eps)) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 eps (/.f64 eps (sin.f64 eps))) eps)","(fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)","(fma.f64 (/.f64 (sin.f64 eps) eps) (/.f64 (neg.f64 eps) (cos.f64 eps)) eps)","(fma.f64 (/.f64 (sin.f64 eps) eps) (*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (neg.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (tan.f64 eps) eps) eps) eps)","(fma.f64 (neg.f64 eps) (/.f64 (tan.f64 eps) eps) eps)","(fma.f64 (tan.f64 eps) (/.f64 (neg.f64 eps) eps) eps)","(fma.f64 eps (neg.f64 (/.f64 (tan.f64 eps) eps)) eps)","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps)))) (/.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (-.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps))) (/.f64 (*.f64 eps eps) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps))))","(-.f64 eps (*.f64 (/.f64 (tan.f64 eps) eps) eps))","(+.f64 (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps)) eps)","(+.f64 eps (*.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps)))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))))) (/.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))) (/.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(*.f64 (/.f64 #s(literal -1 binary64) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (neg.f64 (-.f64 eps (sin.f64 eps))))","(*.f64 (pow.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (-.f64 eps (sin.f64 eps)))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (pow.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(pow.f64 (/.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 eps (sin.f64 eps))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))) (neg.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))) (*.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (neg.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (*.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (sin.f64 eps)))) (neg.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))) (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))) (*.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) eps) (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (sin.f64 eps))) (*.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) eps) #s(literal 1 binary64))) (*.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) eps) (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (*.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))) (*.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (neg.f64 (sin.f64 eps)))) (*.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (sin.f64 eps))) (*.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 1 binary64))) (*.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (*.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (sin.f64 eps))) (*.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (neg.f64 (sin.f64 eps)))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(/.f64 (-.f64 (*.f64 eps (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (sin.f64 eps))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (sin.f64 eps))))","(/.f64 (-.f64 (neg.f64 eps) (neg.f64 (sin.f64 eps))) (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64))) (+.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (*.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (neg.f64 (+.f64 (sin.f64 eps) eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (sin.f64 eps))) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal 2 binary64)))","(/.f64 (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))","(/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (neg.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 eps (sin.f64 eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 eps (sin.f64 eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 eps (sin.f64 eps)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(fma.f64 (/.f64 eps #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (neg.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (neg.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(fma.f64 eps (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal -1 binary64)) (neg.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (*.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) #s(literal 2 binary64)) (*.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))))","(-.f64 (/.f64 (*.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal 2 binary64))) (/.f64 (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (sin.f64 eps)) (pow.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (neg.f64 (+.f64 (sin.f64 eps) eps)))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (neg.f64 (+.f64 (sin.f64 eps) eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (*.f64 eps eps) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (neg.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))","(-.f64 (/.f64 eps (neg.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))) (/.f64 (sin.f64 eps) (neg.f64 (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))) (/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(-.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)) (-.f64 eps (sin.f64 eps)))) #s(literal -1 binary64)))","(+.f64 (/.f64 eps #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps))) (neg.f64 (/.f64 (sin.f64 eps) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (/.f64 (tan.f64 eps) eps) (neg.f64 eps) eps)))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (sin.f64 eps) eps))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 eps (sin.f64 eps)))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (pow.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (neg.f64 (sin.f64 eps)) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))","(/.f64 (neg.f64 (-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (sin.f64 eps) eps)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (neg.f64 (+.f64 (sin.f64 eps) eps))) (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (+.f64 (sin.f64 eps) eps) #s(literal 1 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (sin.f64 eps) eps))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (sin.f64 eps) eps)) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64))) (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps (neg.f64 (sin.f64 eps)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (sin.f64 eps) eps))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps (neg.f64 (sin.f64 eps))))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 eps (neg.f64 (sin.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (neg.f64 (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))))","(neg.f64 (neg.f64 (-.f64 eps (sin.f64 eps))))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 eps (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 eps (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (neg.f64 eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (neg.f64 eps) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 eps (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 eps (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 eps (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (*.f64 eps eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 eps (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (neg.f64 eps) (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (neg.f64 eps) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 eps (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 eps (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (*.f64 eps (neg.f64 eps)) (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (*.f64 eps (neg.f64 eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (*.f64 eps (neg.f64 eps)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (*.f64 eps (neg.f64 eps)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 eps (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (sin.f64 eps) eps) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (*.f64 eps eps) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (*.f64 eps eps) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (*.f64 eps eps) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 #s(literal -1 binary64) (sin.f64 eps) eps)","(fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))) (/.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps (neg.f64 (sin.f64 eps)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 eps (neg.f64 (sin.f64 eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))))))","(-.f64 (/.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (+.f64 (sin.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (+.f64 (sin.f64 eps) eps)))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (+.f64 (sin.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (+.f64 (sin.f64 eps) eps)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (sin.f64 eps) eps))) (neg.f64 (-.f64 eps (sin.f64 eps))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(-.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))","(-.f64 eps (sin.f64 eps))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(+.f64 (neg.f64 (sin.f64 eps)) eps)","(+.f64 eps (neg.f64 (sin.f64 eps)))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) eps) #s(literal 1 binary64)) (/.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 eps) (tan.f64 eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 eps eps))) (*.f64 (+.f64 (tan.f64 eps) eps) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (tan.f64 eps) (*.f64 #s(literal 1 binary64) eps)) #s(literal 1 binary64))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (neg.f64 (cos.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (neg.f64 (cos.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (/.f64 (cos.f64 eps) (sin.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (cos.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) eps) (sin.f64 eps))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (cos.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (cos.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (neg.f64 (sin.f64 eps)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (neg.f64 (cos.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (/.f64 (cos.f64 eps) (sin.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (/.f64 (cos.f64 eps) (sin.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (cos.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (sin.f64 eps))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (cos.f64 eps)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (+.f64 #s(literal 0 binary64) eps) (*.f64 (neg.f64 (cos.f64 eps)) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (neg.f64 (cos.f64 eps)) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (neg.f64 (cos.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) eps) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 (sin.f64 eps) (+.f64 #s(literal 0 binary64) eps) (*.f64 (cos.f64 eps) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (cos.f64 eps) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (sin.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (cos.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (exp.f64 (log.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (neg.f64 eps) (tan.f64 eps)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))) #s(literal 1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (+.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))","(/.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)) eps)","(fma.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)) (/.f64 (sqrt.f64 (sin.f64 eps)) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (neg.f64 eps))","(fma.f64 (fabs.f64 (sin.f64 eps)) (fabs.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64))) (neg.f64 eps))","(fma.f64 (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (neg.f64 eps))","(fma.f64 (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (neg.f64 eps))","(fma.f64 (*.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) eps)","(fma.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64))) (neg.f64 eps))","(fma.f64 (pow.f64 (tan.f64 eps) #s(literal 1/4 binary64)) (pow.f64 (pow.f64 (tan.f64 eps) #s(literal 3/2 binary64)) #s(literal 1/2 binary64)) (neg.f64 eps))","(fma.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (sin.f64 eps)) eps)","(fma.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps)","(fma.f64 #s(literal 1 binary64) (tan.f64 eps) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (neg.f64 eps))","(fma.f64 (sin.f64 eps) (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps)) eps)","(fma.f64 #s(literal -1 binary64) (tan.f64 eps) eps)","(fma.f64 #s(literal -1 binary64) eps (tan.f64 eps))","(fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps))","(fma.f64 (tan.f64 eps) #s(literal 1 binary64) (neg.f64 eps))","(fma.f64 (tan.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 eps #s(literal -1 binary64) (tan.f64 eps))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 (neg.f64 eps) (tan.f64 eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (neg.f64 eps) (tan.f64 eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))) (/.f64 (*.f64 eps eps) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (tan.f64 eps))))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (+.f64 (tan.f64 eps) #s(literal 0 binary64)) #s(literal 1 binary64)) (/.f64 eps #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (tan.f64 eps) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 eps #s(literal 1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(-.f64 (+.f64 (tan.f64 eps) #s(literal 0 binary64)) eps)","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) (/.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (tan.f64 eps) #s(literal 1 binary64)) (/.f64 eps #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 eps (tan.f64 eps)))","(-.f64 (tan.f64 eps) eps)","(exp.f64 (neg.f64 (*.f64 (log.f64 (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))))","(exp.f64 (log.f64 (-.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 #s(literal -1 binary64) (tan.f64 eps)) eps)","(+.f64 (neg.f64 eps) (tan.f64 eps))","(+.f64 (tan.f64 eps) (neg.f64 eps))","(+.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps)))","(*.f64 (pow.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (cos.f64 eps) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps)))","(*.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (cos.f64 eps))))","(pow.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (cos.f64 eps)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (cos.f64 eps))))","(/.f64 #s(literal -1 binary64) (cos.f64 eps))","(neg.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 (neg.f64 (cos.f64 eps))) #s(literal -1/2 binary64) (*.f64 (log.f64 (neg.f64 (cos.f64 eps))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (neg.f64 (cos.f64 eps))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (cos.f64 eps))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))))) (/.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))) (/.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 (tan.f64 eps) eps) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))))) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(*.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (-.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (-.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)) (neg.f64 (-.f64 eps (sin.f64 eps))))","(*.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 eps (sin.f64 eps)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (tan.f64 eps) eps)))","(pow.f64 (/.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))) (neg.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (tan.f64 eps) eps))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) eps) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (neg.f64 (-.f64 (tan.f64 eps) eps))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (neg.f64 (sin.f64 eps)))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (sin.f64 eps))) (*.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps (neg.f64 (-.f64 (tan.f64 eps) eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))))","(/.f64 (-.f64 (neg.f64 eps) (neg.f64 (sin.f64 eps))) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64)) (-.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (neg.f64 (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (neg.f64 (-.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (tan.f64 eps) eps))","(/.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (tan.f64 eps) eps) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 eps (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))) (/.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))))))","(-.f64 (/.f64 (*.f64 eps (-.f64 (tan.f64 eps) eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (*.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps)))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(-.f64 (/.f64 eps (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))) (/.f64 (sin.f64 eps) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) eps)))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (tan.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (tan.f64 eps) eps))) (/.f64 (neg.f64 (-.f64 eps (sin.f64 eps))) (-.f64 (tan.f64 eps) eps)))","(-.f64 (*.f64 (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 eps (-.f64 (tan.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (-.f64 (tan.f64 eps) eps)) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps)))) #s(literal -1 binary64)))","(+.f64 (/.f64 eps (-.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (/.f64 (-.f64 (sin.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (/.f64 (-.f64 (sin.f64 eps) eps) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (-.f64 (sin.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (-.f64 (sin.f64 eps) eps))","(*.f64 (/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps (sin.f64 eps)) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 eps) eps))","(*.f64 (-.f64 (sin.f64 eps) eps) #s(literal 1 binary64))","(pow.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 #s(literal 1 binary64) (neg.f64 eps))) (*.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (*.f64 #s(literal 1 binary64) (neg.f64 eps))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 eps) #s(literal 1 binary64))) (*.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 eps) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64)))) (*.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (neg.f64 (*.f64 eps eps)))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (*.f64 eps eps))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (neg.f64 (+.f64 (sin.f64 eps) eps))) (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (*.f64 eps eps)))) (*.f64 (+.f64 (sin.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))) (*.f64 (+.f64 (sin.f64 eps) eps) #s(literal 1 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (sin.f64 eps) eps))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps)))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (sin.f64 eps) eps)) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (+.f64 (sin.f64 eps) eps) (*.f64 eps eps))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (-.f64 (sin.f64 eps) (neg.f64 eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (sin.f64 eps) (neg.f64 eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (sin.f64 eps) (neg.f64 eps)))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (+.f64 (sin.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (sin.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (sin.f64 eps) (neg.f64 eps)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (sqrt.f64 (sin.f64 eps)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (sin.f64 eps)) #s(literal 1 binary64)) (neg.f64 eps))","(fma.f64 (sqrt.f64 (sin.f64 eps)) (sqrt.f64 (sin.f64 eps)) (neg.f64 eps))","(fma.f64 #s(literal 1 binary64) (sin.f64 eps) (*.f64 #s(literal 1 binary64) (neg.f64 eps)))","(fma.f64 (sin.f64 eps) #s(literal 1 binary64) (*.f64 (neg.f64 eps) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) eps (sin.f64 eps))","(fma.f64 eps #s(literal -1 binary64) (sin.f64 eps))","(-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 (sin.f64 eps) (neg.f64 eps))) (/.f64 (*.f64 eps eps) (-.f64 (sin.f64 eps) (neg.f64 eps))))","(-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (sin.f64 eps) (neg.f64 eps))))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (sin.f64 eps) (neg.f64 eps))))))","(-.f64 (+.f64 (sin.f64 eps) #s(literal 0 binary64)) eps)","(-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 eps (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))))","(-.f64 (sin.f64 eps) eps)","(+.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (*.f64 #s(literal 1 binary64) (neg.f64 eps)))","(+.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 eps) #s(literal 1 binary64)))","(+.f64 (sin.f64 eps) (neg.f64 eps))","(+.f64 (neg.f64 eps) (sin.f64 eps))","(cos.f64 eps)","(*.f64 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) eps))","(*.f64 (/.f64 (*.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64))) eps) (/.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (sin.f64 eps)) eps))","(*.f64 (/.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) eps) (/.f64 (*.f64 (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1/2 binary64)) (sin.f64 eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps) (/.f64 (sin.f64 eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) eps))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)) (/.f64 (sqrt.f64 (sin.f64 eps)) eps))","(*.f64 (/.f64 (sqrt.f64 (sin.f64 eps)) eps) (/.f64 (sqrt.f64 (sin.f64 eps)) (cos.f64 eps)))","(*.f64 (/.f64 #s(literal -1 binary64) eps) (/.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) eps) (/.f64 (tan.f64 eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 eps #s(literal -1 binary64))) (cos.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) eps))","(*.f64 (/.f64 (neg.f64 (sin.f64 eps)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps))","(*.f64 (/.f64 (neg.f64 (sin.f64 eps)) #s(literal -1 binary64)) (/.f64 (pow.f64 eps #s(literal -1 binary64)) (cos.f64 eps)))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (pow.f64 (sin.f64 eps) #s(literal -1 binary64))))","(*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) eps))","(*.f64 (/.f64 (sin.f64 eps) (neg.f64 eps)) (/.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 eps) (neg.f64 eps)) (/.f64 #s(literal -1 binary64) (cos.f64 eps)))","(*.f64 (*.f64 #s(literal -1 binary64) (tan.f64 eps)) (/.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (tan.f64 eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 (/.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (/.f64 (sin.f64 eps) (neg.f64 eps)))","(*.f64 (/.f64 (sin.f64 eps) eps) (/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 eps) eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps)) eps))","(*.f64 #s(literal 1 binary64) (/.f64 (tan.f64 eps) eps))","(*.f64 (sin.f64 eps) (/.f64 (pow.f64 eps #s(literal -1 binary64)) (cos.f64 eps)))","(*.f64 (sin.f64 eps) (pow.f64 (*.f64 (cos.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (tan.f64 eps) (/.f64 (neg.f64 (pow.f64 eps #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (tan.f64 eps) (pow.f64 eps #s(literal -1 binary64)))","(pow.f64 (/.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (cos.f64 eps) eps) (sin.f64 eps)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 eps (sin.f64 eps)) (cos.f64 eps)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64))) (neg.f64 (cos.f64 eps)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 eps)) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 eps) (cos.f64 eps))))","(/.f64 (neg.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64))) (neg.f64 (*.f64 (cos.f64 eps) eps)))","(/.f64 (/.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) (cos.f64 eps))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (tan.f64 eps))) (neg.f64 (neg.f64 eps)))","(/.f64 (neg.f64 (tan.f64 eps)) (neg.f64 eps))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (neg.f64 (*.f64 (cos.f64 eps) (neg.f64 eps))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (neg.f64 (neg.f64 (*.f64 (cos.f64 eps) eps))))","(/.f64 (*.f64 (neg.f64 (sin.f64 eps)) #s(literal 1 binary64)) (*.f64 (neg.f64 eps) (cos.f64 eps)))","(/.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 eps) eps))","(/.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (/.f64 eps (sin.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 eps) (neg.f64 eps)))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (*.f64 (cos.f64 eps) eps)))","(/.f64 (/.f64 (sin.f64 eps) (neg.f64 eps)) (neg.f64 (neg.f64 (neg.f64 (cos.f64 eps)))))","(/.f64 (/.f64 (sin.f64 eps) (neg.f64 eps)) (neg.f64 (cos.f64 eps)))","(/.f64 (*.f64 #s(literal -1 binary64) (tan.f64 eps)) (neg.f64 eps))","(/.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (neg.f64 (/.f64 eps (sin.f64 eps))))","(/.f64 (/.f64 (sin.f64 eps) eps) (neg.f64 (neg.f64 (cos.f64 eps))))","(/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 eps) eps) (sin.f64 eps)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 eps (sin.f64 eps)) (cos.f64 eps)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (cos.f64 eps) eps) (sin.f64 eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 eps (sin.f64 eps)) (cos.f64 eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (tan.f64 eps) eps)","(neg.f64 (*.f64 #s(literal -1 binary64) (/.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (cos.f64 eps) (neg.f64 eps))) (/.f64 (sin.f64 eps) (*.f64 (cos.f64 eps) (neg.f64 eps))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (cos.f64 eps) eps))) (/.f64 (sin.f64 eps) (neg.f64 (*.f64 (cos.f64 eps) eps))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 eps))) (*.f64 #s(literal -1 binary64) (/.f64 (tan.f64 eps) eps)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (sin.f64 eps)))","(pow.f64 (/.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (+.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) (neg.f64 (-.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))) (neg.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (*.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (-.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (*.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(fma.f64 (*.f64 (neg.f64 eps) #s(literal -1 binary64)) eps (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 eps) (*.f64 eps eps))","(fma.f64 (*.f64 eps eps) #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(fma.f64 (sin.f64 eps) (neg.f64 (sin.f64 eps)) (*.f64 eps eps))","(fma.f64 #s(literal -1 binary64) (*.f64 eps (neg.f64 eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))","(fma.f64 (neg.f64 eps) (neg.f64 eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(fma.f64 eps eps (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (-.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (-.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 6 binary64)) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))","(+.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 eps eps))","(+.f64 (*.f64 eps eps) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":298.9072265625,"type":"rewrite"},{"compiler":[[45042,4372]],"memory":[[9314784,93350688]],"time":179.368896484375,"type":"eval"},{"alts":[["(fma.f64 (sin.f64 eps) (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","fresh",62.33225230135756,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","fresh",62.8959325970216,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","fresh",62.89194285619819,"binary64"],["(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (tan.f64 eps) eps))))) (-.f64 eps (tan.f64 eps))))","fresh",62.73393689066204,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","done",62.4997601057073,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (*.f64 (/.f64 #s(literal -1 binary64) eps) (/.f64 (tan.f64 eps) #s(literal -1 binary64))) eps)))","fresh",62.6053323542055,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 eps eps)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)))))","fresh",62.8967817653056,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps))) (*.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) (*.f64 eps eps))) (*.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps))))))","fresh",62.89977576087026,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (-.f64 eps (*.f64 (/.f64 (tan.f64 eps) eps) eps))))","fresh",62.749096554915845,"binary64"],["(/.f64 (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","fresh",62.90296336387427,"binary64"],["(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","done",61.061411745711304,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (-.f64 (sin.f64 eps) eps))","done",62.499685461867664,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) #s(approx (- (sin eps) eps) (*.f64 (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) eps)))","fresh",62.87272980020283,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.21907111645009897,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.346129104143196,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","done",0.4570910112649186,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","done",0.7390777078242976,"binary64"]],"compiler":[[834,167],[15,9],[22,13],[25,16],[44,20],[9,6],[28,19],[38,23],[68,26],[24,16],[34,18],[16,10],[11,8],[20,13],[26,15],[21,13],[16,11],[11,8]],"count":[[1408,17]],"kept":[{"done":[5,5],"fresh":[5,3],"new":[1393,7],"picked":[5,2]}],"memory":[[-16840368,60274656]],"min-error":[[0.006191259768442017,"binary64"]],"time":43.721923828125,"type":"prune"},{"accuracy":[0.21907111645009897],"baseline":[0.21907111645009897],"branch":[["eps",0.21907111645009897,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.21907111645009897,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[32,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (-.f64 (sin.f64 eps) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (-.f64 eps (*.f64 (/.f64 (tan.f64 eps) eps) eps))))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) #s(approx (- (sin eps) eps) (*.f64 (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (*.f64 (/.f64 #s(literal -1 binary64) eps) (/.f64 (tan.f64 eps) #s(literal -1 binary64))) eps)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(approx (- (sin eps) eps) (*.f64 (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) eps)))","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","(fma.f64 (sin.f64 eps) (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (fma.f64 (neg.f64 eps) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) eps)))","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (tan.f64 eps)) (sqrt.f64 (tan.f64 eps)) (neg.f64 eps)) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (*.f64 eps eps)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)))))","(*.f64 (pow.f64 (-.f64 (exp.f64 (log.f64 (tan.f64 eps))) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(*.f64 (-.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (*.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (sin.f64 eps)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (*.f64 eps eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) #s(approx (+ (* (sin eps) (pow (neg (cos eps)) -1)) eps) (/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (tan.f64 eps) eps) eps) #s(literal 2 binary64)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps))) (*.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) (*.f64 eps eps))) (*.f64 (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps)) (fma.f64 (/.f64 (neg.f64 eps) eps) (tan.f64 eps) (neg.f64 eps))))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))) (fma.f64 (/.f64 #s(literal -1 binary64) (cos.f64 eps)) (sin.f64 eps) eps))","(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (tan.f64 eps) eps) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (tan.f64 eps) eps))))) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))"]],"memory":[[2122960,10092896]],"oracle":[63.45615482361506],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":17.572021484375,"times":[[7.89013671875,"eps"],[7.509033203125,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"accuracy":[0.3461291041431959],"baseline":[0.346129104143196],"branch":[["eps",0.3461291041431959,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.3461291041431959,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[3,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"]],"memory":[[3017136,3017136]],"oracle":[0.7390777078242976],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":3.52294921875,"times":[[1.635009765625,"eps"],[1.321044921875,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"accuracy":[0.4570910112649186],"baseline":[0.4570910112649186],"branch":[["eps",0.4570910112649186,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.4570910112649186,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[2,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))"]],"memory":[[2922720,2922720]],"oracle":[0.7390777078242976],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":3.152099609375,"times":[[1.326171875,"eps"],[1.239013671875,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"accuracy":[0.7390777078242976],"baseline":[0.7390777078242976],"branch":[["eps",0.7390777078242976,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.7390777078242976,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[1,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"link":["."],"memory":[[-5640208,2683136]],"name":["sintan (problem 3.4.5)"],"oracle":[0.7390777078242976],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"repr":["binary64"],"time":2.425048828125,"times":[[1.0810546875,"eps"],[1.031005859375,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"egraph":[[8,5536,74,0.041747545],[7,1549,74,0.035077797],[6,431,74,0.009256027],[5,176,74,0.002354395],[4,93,74,0.001215423],[3,55,74,0.001033395],[2,38,74,0.000629801],[1,28,74,0.000715465],[0,21,74,0.000432646]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"memory":[[1298224,9807776]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"stop":[["node limit",1]],"time":118.014892578125,"type":"simplify"},{"compiler":[[74,21],[1,2],[6,5],[11,7],[16,9]],"egraph":[[0,8263,341,0.102995242],[3,5663,369,0.029277301],[2,1323,408,0.021090391],[1,422,433,0.004348347],[0,148,465,0.001738681]],"memory":[[2238384,2238384]],"stop":[["fuel",1],["iter limit",1],["node limit",1]],"time":843.052001953125,"type":"soundness"},{"compiler":[[74,21],[74,21],[7,6],[7,6],[9,6],[9,6],[26,15],[26,15]],"memory":[[1976608,25280432]],"remove-preprocessing":[["(abs eps)"],[],[],[],[]],"time":100.173095703125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]