[{"memory":[[16416,16416]],"time":0.14599609375,"type":"start"},{"compiler":[[15,12]],"memory":[[4097552,37143920]],"method":["search"],"sampling":[[12,{"invalid":0.15065800012661157,"precondition":0.0014641286106780171,"unknown":0.24232047269555324,"valid":0.6055573985671572}],[11,{"invalid":0.12969264735818342,"precondition":0.0014641286106780171,"unknown":0.28181334651515044,"valid":0.5870298775159881}],[10,{"invalid":0.11116512630701436,"precondition":0.0014641286106780171,"unknown":0.3529980326591158,"valid":0.5343727124231918}],[9,{"invalid":0.08191114569990532,"precondition":0.0014641286106780171,"unknown":0.4173567899947557,"valid":0.499267935694661}],[8,{"invalid":0.054607430466603546,"precondition":0.0014641286106780171,"unknown":0.4602626282185156,"valid":0.48366581270420284}],[7,{"invalid":0.04680636897137447,"precondition":0.0014641286106780171,"unknown":0.5460743046660355,"valid":0.40565519775191206}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":217.680908203125,"type":"analyze"},{"bogosity":[{"infinite":0.0637433691208138,"invalid":0.24672836358726666,"precondition":0.0014641286106780171,"valid":0.6880641386812415}],"memory":[[14285216,376959712]],"mixsample":[[7.66015625,"ival-sub",1200],[141.348876953125,"ival-div",0],[73.61474609375,"adjust",800],[0.185791015625,"ival-sub",4800],[5.50634765625,"ival-mult",1200],[0.01806640625,"ival-sqrt",3200],[0.03564453125,"ival-div",400],[3.18994140625,"ival-sub",1600],[5.048828125,"ival-assert",0],[0.031982421875,"ival-sub",3600],[12.658203125,"ival-sqrt",1200],[159.559326171875,"ival-sub",0],[0.432373046875,"ival-sqrt",4800],[4.815185546875,"ival-sub",400],[89.95263671875,"ival-sqrt",0],[0.01708984375,"ival-mult",3600],[0.009033203125,"ival-sqrt",2800],[6.643798828125,"ival-mult",800],[1.785888671875,"ival-sub",4400],[7.47998046875,"ival-sub",800],[0.8564453125,"ival-mult",1600],[3.5927734375,"adjust",2800],[0.01318359375,"ival-div",2000],[0.063232421875,"ival-sqrt",3600],[0.32470703125,"ival-sub",4000],[8.333740234375,"ival-sqrt",400],[6.15478515625,"ival-sqrt",2000],[10.1787109375,"ival-sqrt",800],[3.108642578125,"ival-sub",2000],[0.0810546875,"ival-mult",2000],[0.012939453125,"ival-sub",3200],[0.77880859375,"ival-sqrt",4000],[0.009033203125,"ival-sub",6800],[1.34765625,"ival-sqrt",4400],[27.32958984375,"adjust",2000],[3.668701171875,"ival-sub",2400],[7.3154296875,"ival-mult",400],[8.03271484375,"ival-sqrt",1600],[193.802001953125,"ival-mult",0],[0.02685546875,"ival-sqrt",6400],[0.02783203125,"ival-div",800],[9.96826171875,"ival-true",0],[7.095458984375,"ival-sqrt",2400],[0.0048828125,"ival-sub",2800],[62.806640625,"ival-neg",0]],"outcomes":[[233.289306640625,1,"valid",1334],[317.91357421875,2,"valid",1183],[105.07958984375,0,"invalid",1055],[57.3310546875,3,"valid",174],[544.3876953125,0,"valid",5565]],"time":1698.64404296875,"type":"sample"},{"compiler":[[13,10],[52,12],[52,12]],"confusion":[[136,1,21,98]],"explanations":[["-.f64","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","nan-rescue",2,0,[["(*.f64 b_2 b_2)","overflow",89],["(*.f64 a c)","overflow",26]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","uflow-rescue",5,0,[["(*.f64 b_2 b_2)","underflow",36],["(*.f64 a c)","underflow",38],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",5]],[[1,2]]],["/.f64","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","u/n",15,0,[["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","underflow",25],["(*.f64 b_2 b_2)","underflow",36],["(*.f64 a c)","underflow",38],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",5]],[[]]],["-.f64","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cancellation",61,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","oflow-rescue",107,0,[["(*.f64 b_2 b_2)","overflow",89],["(*.f64 a c)","overflow",26],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","overflow",107]],[[1,2]]]],"fperrors":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))",2,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))",112,0,false,0,false],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",16,0,false,1,[-4.3159649695842934e-204,-3.772020500567738e+34,1.7472153923075408e-74]],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))",61,0,false,0,false],["(*.f64 b_2 b_2)",0,0,false,0,false],["a",0,0,false,0,false],["(neg.f64 b_2)",0,0,false,0,false],["b_2",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["c",0,0,false,0,false]],"freqs":[[3,1],[2,31],[1,125],[0,99]],"maybe-confusion":[[136,0,1,21,0,98]],"memory":[[-2272512,66303200]],"mixsample":[[0.4267578125,"ival-sub",1200],[0.010986328125,"ival-sub",4800],[0.26513671875,"ival-sqrt",2000],[4.11181640625,"adjust",800],[6.53125,"ival-div",0],[0.357177734375,"ival-mult",1200],[0.14990234375,"ival-sub",1600],[0.32373046875,"ival-sqrt",800],[0.166748046875,"ival-sub",2000],[0.265869140625,"ival-assert",0],[0.02490234375,"ival-sqrt",4000],[0.02685546875,"ival-sqrt",4800],[0.78857421875,"ival-sqrt",1200],[8.436279296875,"ival-sub",0],[0.334716796875,"ival-sub",400],[4.735595703125,"ival-sqrt",0],[0.025146484375,"ival-sqrt",4400],[1.519287109375,"adjust",2000],[0.21533203125,"ival-sub",2400],[0.010009765625,"ival-sub",4400],[0.290283203125,"ival-mult",800],[0.295654296875,"ival-sub",800],[8.707275390625,"ival-mult",0],[0.470458984375,"ival-mult",400],[0.32666015625,"ival-sqrt",1600],[0.032958984375,"ival-mult",1600],[0.11376953125,"adjust",2800],[0.43701171875,"ival-sqrt",2400],[0.59033203125,"ival-true",0],[0.01025390625,"ival-sub",4000],[0.5810546875,"ival-sqrt",400],[2.654052734375,"ival-neg",0]],"outcomes":[[14.90283203125,1,"valid",84],[20.071533203125,2,"valid",76],[2.4130859375,3,"valid",8],[32.248779296875,0,"valid",344]],"time":156.779052734375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,10]],"egraph":[[0,866,13,0.002898693],[10,866,13,0.006014284],[9,865,13,0.009188243],[8,848,13,0.007562749],[7,743,13,0.007301814],[6,620,13,0.008185896],[5,356,13,0.004176883],[4,200,13,0.001911158],[3,121,13,0.000841226],[2,59,13,0.000464191],[1,32,13,0.000246057],[0,17,13,0.000199531],[0,10,13,0.000134652],[10,3618,113,0.021482304],[9,3618,113,0.02634542],[8,3618,113,0.020058468],[7,3526,113,0.024144782],[6,3404,113,0.02003692],[5,3333,113,0.031200062],[4,2501,113,0.029875033],[3,1079,113,0.01733486],[2,354,113,0.005342125],[1,142,118,0.001220396],[0,44,118,0.000465808]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[309392,8091792]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)))) a)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":279.489013671875,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.075927734375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",31.865488310583263,"binary64"]],"compiler":[[13,10]],"memory":[[339936,339936]],"time":0.510009765625,"type":"prune"},{"egraph":[[0,866,50,0.003719753],[10,866,50,0.008188047],[9,865,50,0.00724605],[8,848,50,0.00847128],[7,743,50,0.007777215],[6,620,50,0.00691212],[5,356,50,0.003654052],[4,200,50,0.002348553],[3,121,50,0.000873065],[2,59,50,0.000517802],[1,32,50,0.000270419],[0,17,50,0.000231244],[0,10,50,0.000139623]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"locations":[["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0]],"memory":[[2246560,2246560]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 c (neg.f64 a) (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","(*.f64 c a)","a","c"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":64.23193359375,"type":"simplify"},{"compiler":[[52,12]],"locations":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.40234375000000006],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",3.6737748217328314],["(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",13.874041657555372],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",26.11467062552949]],"memory":[[-7253968,13258112]],"mixsample":[[0.214599609375,"ival-sub",1200],[0.01220703125,"ival-sub",4800],[0.112060546875,"ival-sqrt",2000],[2.025390625,"adjust",800],[13.5595703125,"ival-div",0],[0.200439453125,"ival-mult",1200],[0.08203125,"ival-sub",1600],[0.169677734375,"ival-sqrt",800],[0.06640625,"ival-sub",2000],[0.135009765625,"ival-assert",0],[0.011962890625,"ival-sqrt",4000],[0.018798828125,"ival-sqrt",4800],[0.398193359375,"ival-sqrt",1200],[3.834228515625,"ival-sub",0],[0.179443359375,"ival-sub",400],[2.37060546875,"ival-sqrt",0],[0.02099609375,"ival-sqrt",4400],[0.658447265625,"adjust",2000],[0.1044921875,"ival-sub",2400],[0.011962890625,"ival-sub",4400],[0.150146484375,"ival-mult",800],[0.114013671875,"ival-sub",800],[4.277587890625,"ival-mult",0],[0.245361328125,"ival-mult",400],[0.14794921875,"ival-sqrt",1600],[0.015869140625,"ival-mult",1600],[0.109375,"adjust",2800],[0.2080078125,"ival-sqrt",2400],[0.236572265625,"ival-true",0],[0.00390625,"ival-sub",4000],[0.30029296875,"ival-sqrt",400],[1.57275390625,"ival-neg",0]],"outcomes":[[20.406005859375,1,"valid",42],[9.075439453125,2,"valid",38],[1.208251953125,3,"valid",4],[17.0322265625,0,"valid",172]],"time":58.4990234375,"type":"localize"},{"count":[[5,97]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[152848,7773040]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[3.91796875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","-inf"],[6.162841796875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","inf"],[2.116943359375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","0"],[4.47216796875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","-inf"],[2.9111328125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","inf"],[3.545166015625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","0"],[3.95703125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","-inf"],[3.9609375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","inf"],[1.739013671875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","0"]],"time":34.80712890625,"type":"series"},{"count":[[97,96]],"egraph":[[0,8218,2554,0.097175809],[2,5611,2679,0.031943732],[1,1657,2699,0.021828602],[0,528,2732,0.00542352]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1/2 (/ c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1/2 (/ (* a c) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[1064304,49128256]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal 1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))))) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) b_2) (neg.f64 a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) a)) (neg.f64 a)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) a)) a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 1/8 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal 1/2 binary64) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64)))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 2 binary64)))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 c b_2) b_2) a)) b_2) b_2)","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 (fma.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) a)) c) #s(literal 1/2 binary64)))) (neg.f64 b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) c (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (*.f64 c (/.f64 (/.f64 c b_2) b_2)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) c) a) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (-.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) c) a)) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (/.f64 c b_2) b_2) a) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64)) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (/.f64 (neg.f64 b_2) a)) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) (neg.f64 c)) (/.f64 b_2 a)) c)) c)","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b_2)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (+.f64 (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) c)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":275.9638671875,"type":"simplify"},{"count":[[5,428]],"egraph":[[0,8305,38,0.06236328],[3,6590,38,0.040465036],[2,503,38,0.019567954],[1,68,41,0.002371487],[0,17,41,0.000739967],[0,10,41,0.000138026]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[10061424,49637312]],"outputs":[["(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a))) (/.f64 a (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(*.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))))","(*.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (/.f64 #s(literal 1 binary64) (*.f64 a a)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) a))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64))","(*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) a) a)","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) a)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal -1 binary64) a)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) a)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 a #s(literal -1 binary64))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a)))) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (*.f64 a a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64)) (neg.f64 a))","(/.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)) (*.f64 (/.f64 b_2 a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a)))) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (neg.f64 (*.f64 a a)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (neg.f64 a) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 a (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 b_2 (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (/.f64 a b_2) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 a b_2) #s(literal 1 binary64))) (*.f64 (/.f64 a b_2) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 a (*.f64 (/.f64 a b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 a b_2) a))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 b_2 (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a) (*.f64 a (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a))) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 9/2 binary64))) (*.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(/.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (neg.f64 a) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","(/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (neg.f64 a)))","(/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a a) (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (neg.f64 a) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 b_2 a))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)) (/.f64 b_2 a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 b_2 a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 (/.f64 b_2 a) #s(literal -1 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 (/.f64 b_2 a) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 (/.f64 b_2 a) #s(literal -1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 (/.f64 b_2 a) #s(literal 1 binary64) (*.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a) (/.f64 b_2 a))","(fma.f64 b_2 (*.f64 #s(literal -1 binary64) (pow.f64 a #s(literal -1 binary64))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 b_2 (*.f64 #s(literal -1 binary64) (pow.f64 a #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 b_2 (*.f64 #s(literal -1 binary64) (pow.f64 a #s(literal -1 binary64))) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 b_2 (/.f64 #s(literal -1 binary64) a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 b_2 (/.f64 #s(literal -1 binary64) a) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 b_2 (/.f64 #s(literal -1 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(-.f64 (/.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 a) a)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(-.f64 (/.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))) (/.f64 (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 a b_2) (*.f64 a a)) (/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a a)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) a) (/.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(-.f64 (/.f64 b_2 a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 b_2 a) #s(literal 1 binary64)) (*.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 b_2 a))","(+.f64 (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 b_2 a))","(+.f64 (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(+.f64 (/.f64 b_2 a) (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(+.f64 (/.f64 b_2 a) (/.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))","(*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(*.f64 #s(literal 1 binary64) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))) (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 9/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (fma.f64 b_2 (/.f64 b_2 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))) (*.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (fma.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 b_2 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))) (*.f64 b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))) (*.f64 b_2 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) (*.f64 b_2 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 9 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 9/2 binary64))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (neg.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64)))","(neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) b_2)","(fma.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) b_2)","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) b_2)","(fma.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (/.f64 (pow.f64 b_2 #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 #s(literal 1 binary64) b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b_2 b_2)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64) b_2)","(fma.f64 (*.f64 b_2 b_2) (/.f64 b_2 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 b_2 (/.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 b_2 (/.f64 b_2 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 b_2 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(-.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2)","(-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) b_2)","(+.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(+.f64 #s(literal 0 binary64) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(+.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2)","(+.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 #s(literal 1 binary64) b_2)","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b_2 b_2)))","(*.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) b_2))","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 1 binary64))","(pow.f64 b_2 #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 b_2 b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 b_2 b_2))","(/.f64 (*.f64 b_2 b_2) b_2)","(neg.f64 b_2)","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b_2 b_2)) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) (/.f64 #s(literal 1 binary64) b_2) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(exp.f64 (*.f64 (log.f64 b_2) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b_2)","(+.f64 b_2 #s(literal 0 binary64))","b_2","(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(neg.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fabs.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 8 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(pow.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 2 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)))","(/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a)) (hypot.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 c a))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 b_2 #s(literal 12 binary64)))))","(/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 a b_2) c) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 8 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 c #s(literal -1 binary64)) a (*.f64 b_2 b_2))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 a) c))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 c a) (*.f64 b_2 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (/.f64 (*.f64 b_2 b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(fma.f64 (*.f64 c a) #s(literal -1 binary64) (*.f64 b_2 b_2))","(fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))","(fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))","(fma.f64 (*.f64 b_2 b_2) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 a) c))","(fma.f64 b_2 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 a) c))","(sqrt.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(fabs.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(hypot.f64 (pow.f64 (*.f64 c a) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 c a) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 c a) #s(literal 1 binary64)))","(hypot.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(hypot.f64 (*.f64 b_2 b_2) (*.f64 c a))","(exp.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":264.614990234375,"type":"rewrite"},{"compiler":[[16974,2054]],"memory":[[-840384,40935136]],"time":100.820068359375,"type":"eval"},{"alts":[["(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","fresh",50.392635261334775,"binary64"],["(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","next",53.52257198087458,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","fresh",47.61837414354757,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) a)","fresh",47.420344145834406,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",31.865488310583263,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",41.99398968926333,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","fresh",47.87886520267555,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","next",42.80170006493376,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","next",46.513309462435124,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","fresh",42.537002532089,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","fresh",47.605777311935874,"binary64"],["(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","fresh",47.5910022634473,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","fresh",47.605777335671256,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","fresh",42.73658753183451,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","next",42.537002532089,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","next",41.380686226192545,"binary64"]],"compiler":[[22,11],[18,12],[21,11],[17,13],[13,10],[18,13],[17,12],[22,15],[21,15],[17,13],[14,11],[24,13],[14,11],[24,17],[19,14],[19,14],[22,11],[18,12],[21,11],[17,13],[18,13],[17,12],[22,15],[21,15],[17,13],[14,11],[24,13],[14,11],[24,17],[19,14],[19,14]],"count":[[522,16]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[521,15],"picked":[1,1]}],"memory":[[-1737184,25698608]],"min-error":[[5.816156579754064,"binary64"]],"time":19.64306640625,"type":"prune"},{"egraph":[[0,8098,265,0.038925526],[6,5015,265,0.030999364],[5,1686,265,0.025638537],[4,731,265,0.008677341],[3,428,265,0.003451539],[2,221,267,0.001852679],[1,117,269,0.000989073],[0,62,273,0.000578835],[0,38,273,0.000379516]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","#s(literal -1/2 binary64)","(/.f64 c b_2)","c","b_2","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","b_2","a","#s(literal -2 binary64)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(/.f64 a b_2)","a","b_2","#s(literal -1/2 binary64)","c","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))","(neg.f64 b_2)","b_2","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))","(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","c","(/.f64 a b_2)","a","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","(-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(*.f64 a b_2)","a","b_2","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","(*.f64 a a)"]],"locations":[["(*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)","cost-diff",0],["(*.f64 a b_2)","cost-diff",0],["(-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","cost-diff",2],["(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","cost-diff",4],["#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","cost-diff",0],["(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","cost-diff",0],["(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","cost-diff",0],["#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","cost-diff",0],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","cost-diff",0],["(/.f64 b_2 a)","cost-diff",0],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","cost-diff",0],["(/.f64 c b_2)","cost-diff",0],["(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","cost-diff",0]],"memory":[[-3223408,21089488]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(/.f64 c b_2)","c","b_2","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","b_2","a","#s(literal -2 binary64)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) a)) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) a))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) a)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) a)","(/.f64 a b_2)","a","b_2","#s(literal -1/2 binary64)","c","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))","(neg.f64 b_2)","b_2","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))","(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","c","(/.f64 a b_2)","a","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","(/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(*.f64 a b_2)","a","b_2","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","(*.f64 a a)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":193.910888671875,"type":"simplify"},{"compiler":[[227,33]],"locations":[["(fma.f64 c a (*.f64 b_2 b_2))","accuracy",0.49999449521112044],["(-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","accuracy",0.8515604358302059],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","accuracy",5.704986764516719],["(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","accuracy",10.613319429094311],["(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))","accuracy",0.01171875],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","accuracy",0.07421875],["(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","accuracy",1.9321058518338732],["#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))","accuracy",21.816064207420464],["(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","accuracy",0.0],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","accuracy",0.07421875],["(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","accuracy",1.9281996018338732],["#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","accuracy",21.594433666742404],["(/.f64 b_2 a)","accuracy",0.0],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","accuracy",0.0078125],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","accuracy",21.576267088372607],["(/.f64 c b_2)","accuracy",0.0],["(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","accuracy",0.0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","accuracy",21.63089444322448]],"memory":[[-935536,32112192]],"mixsample":[[9.153076171875,"ival-div",0],[2.47705078125,"ival-add",0],[19.666015625,"ival-mult",0],[0.116943359375,"ival-assert",0],[3.605224609375,"ival-sub",0],[0.225830078125,"ival-true",0],[3.60546875,"ival-sqrt",0],[0.304443359375,"exact",0],[2.465576171875,"ival-neg",0]],"outcomes":[[39.890869140625,0,"invalid",166],[23.19384765625,0,"valid",90]],"time":85.671142578125,"type":"localize"},{"count":[[21,230]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))","(neg.f64 b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","(-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(*.f64 a b_2)","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 c a (*.f64 b_2 b_2))"]],"memory":[[4527904,19721888]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/ b_2 a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(* -1/2 (/ (* a c) b_2))","(* -1/2 (/ a b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ (- b_2 (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) (* b_2 (sqrt -1))) a)","(* a (- b_2 (* b_2 (sqrt -1))))","(* a (- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1))))","(* a (- (+ b_2 (* a (- (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1))))","(* a (- (+ b_2 (* a (- (* a (- (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1))))","(* a b_2)","(* a (* b_2 (sqrt -1)))","(* a (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))))","(* a (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))))","(* a (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))))","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(pow b_2 2)","(+ (* a c) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(* -1 (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(* (pow a 2) (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1))))","(* (pow a 2) (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* (pow a 2) (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* (pow a 3) c)) (sqrt -1))","(* (pow a 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* (pow a 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (pow a 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (+ (* -1/2 (/ c b_2)) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a c)","(* a (+ c (/ (pow b_2 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(* (sqrt (* (pow a 3) c)) (pow (sqrt -1) 3))","(* (pow a 2) (- (/ b_2 a) (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* (pow a 2) (- (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* (pow a 2) (- (* -1 (/ (+ (* -1 b_2) (* -1 (/ (- (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* (sqrt (* (pow a 3) c)) (pow (sqrt -1) 3)))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))))))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2)))))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(* -1/2 (/ c b_2))","(/ c b_2)","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(- (* a b_2) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(- (* b_2 (+ a (* -1/2 (* (sqrt (/ a c)) (* b_2 (sqrt -1)))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(- (* b_2 (+ a (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (sqrt -1))))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (* (sqrt (* (pow a 3) c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (sqrt -1))))))","(+ (* (sqrt (* (pow a 3) c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ a c)) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(/ (+ (* -1/2 (* a c)) (pow b_2 2)) b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(/ (* b_2 (- a (* a (sqrt -1)))) (pow a 2))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (/ 1 a)) (/ (sqrt -1) a)))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a))) (/ (sqrt -1) a)))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a)))) (/ (sqrt -1) a)))","(* b_2 (- a (* a (sqrt -1))))","(* b_2 (- (+ a (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2)))) (* a (sqrt -1))))","(* b_2 (- (+ a (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4)))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))","(* b_2 (- (+ a (* -1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (/ (* b_2 (- (* -1 a) (* a (sqrt -1)))) (pow a 2)))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (/ -1 a)) (/ (sqrt -1) a))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ -1 a))) (/ (sqrt -1) a))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ -1 a)))) (/ (sqrt -1) a))))","(* -1 (* b_2 (- (* -1 a) (* a (sqrt -1)))))","(* -1 (* b_2 (- (+ (* -1 a) (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2)))) (* a (sqrt -1)))))","(* -1 (* b_2 (- (+ (* -1 a) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4)))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(* -1 (* b_2 (- (+ (* -1 a) (* -1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))))","(* -1 (* a (* b_2 (sqrt -1))))","(* -1 (* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(/ (- (* a b_2) (* a (* b_2 (sqrt -1)))) (pow a 2))","(- (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (* a b_2) (* a (* b_2 (sqrt -1))))","(- (+ (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) b_2)) (* a b_2)) (* a (* b_2 (sqrt -1))))","(- (+ (* a b_2) (* c (- (* 1/8 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2))))) (* a (* b_2 (sqrt -1))))","(- (+ (* a b_2) (* c (- (* c (- (* -1/16 (/ (* (pow a 4) (* c (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow a 3) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2))))) (* a (* b_2 (sqrt -1))))","(+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) b_2)) (* a (* b_2 (sqrt -1))))","(+ (* a (* b_2 (sqrt -1))) (* c (+ (* -1/8 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)))))","(+ (* a (* b_2 (sqrt -1))) (* c (+ (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 3) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 4) (* c (sqrt -1))) (pow b_2 5))))))))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(* c (- (/ (* a b_2) c) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (/ (* a b_2) c)) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ (* a b_2) c)) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1)))))","(* c (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))))","(* c (+ (* -1/2 (/ a b_2)) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ a (/ (pow b_2 2) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (* c (- (* -1 (/ (* a b_2) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* a b_2)) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (* a c)) (* (pow b_2 2) (sqrt -1))))) c)) (* a b_2)) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))"]],"series":[[9.844970703125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a a)) (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a) (+ (* (* -1/2 c) (/ a b_2)) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)))","c","-inf"],[7.259033203125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a a)) (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a) (+ (* (* -1/2 c) (/ a b_2)) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)))","c","inf"],[3.656982421875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a a)) (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a) (+ (* (* -1/2 c) (/ a b_2)) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)))","c","0"],[5.452880859375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a a)) (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a) (+ (* (* -1/2 c) (/ a b_2)) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)))","b_2","-inf"],[5.35498046875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a a)) (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a) (+ (* (* -1/2 c) (/ a b_2)) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)))","b_2","inf"],[6.591796875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a a)) (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a) (+ (* (* -1/2 c) (/ a b_2)) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)))","b_2","0"],[5.027099609375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a a)) (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a) (+ (* (* -1/2 c) (/ a b_2)) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)))","a","-inf"],[5.837890625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a a)) (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a) (+ (* (* -1/2 c) (/ a b_2)) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)))","a","inf"],[4.261962890625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -1/2 (/ c b_2)) (/ c b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* (/ b_2 a) -2) (/ b_2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a a)) (- (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a)) (* a b_2) (* (sqrt (neg (+ (* c a) (* b_2 b_2)))) a) (+ (* (* -1/2 c) (/ a b_2)) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (+ (* c a) (* b_2 b_2)))","a","0"]],"time":58.32080078125,"type":"series"},{"count":[[230,229]],"egraph":[[0,8086,6714,0.097970609],[1,3472,7022,0.029017727],[0,1049,7088,0.011430429]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/ b_2 a)","(* -2 b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(* -1/2 (/ (* a c) b_2))","(* -1/2 (/ a b_2))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ (- b_2 (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) (* b_2 (sqrt -1))) a)","(* a (- b_2 (* b_2 (sqrt -1))))","(* a (- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1))))","(* a (- (+ b_2 (* a (- (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1))))","(* a (- (+ b_2 (* a (- (* a (- (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1))))","(* a b_2)","(* a (* b_2 (sqrt -1)))","(* a (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))))","(* a (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))))","(* a (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))))","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(pow b_2 2)","(+ (* a c) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(* -1 (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(* (pow a 2) (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1))))","(* (pow a 2) (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* (pow a 2) (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* (pow a 3) c)) (sqrt -1))","(* (pow a 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* (pow a 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (pow a 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (+ (* -1/2 (/ c b_2)) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a c)","(* a (+ c (/ (pow b_2 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(* (sqrt (* (pow a 3) c)) (pow (sqrt -1) 3))","(* (pow a 2) (- (/ b_2 a) (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* (pow a 2) (- (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* (pow a 2) (- (* -1 (/ (+ (* -1 b_2) (* -1 (/ (- (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* (sqrt (* (pow a 3) c)) (pow (sqrt -1) 3)))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))))))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2)))))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(* -1/2 (/ c b_2))","(/ c b_2)","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(- (* a b_2) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(- (* b_2 (+ a (* -1/2 (* (sqrt (/ a c)) (* b_2 (sqrt -1)))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(- (* b_2 (+ a (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (sqrt -1))))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (* (sqrt (* (pow a 3) c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (sqrt -1))))))","(+ (* (sqrt (* (pow a 3) c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ a c)) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(/ (+ (* -1/2 (* a c)) (pow b_2 2)) b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(/ (* b_2 (- a (* a (sqrt -1)))) (pow a 2))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (/ 1 a)) (/ (sqrt -1) a)))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a))) (/ (sqrt -1) a)))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a)))) (/ (sqrt -1) a)))","(* b_2 (- a (* a (sqrt -1))))","(* b_2 (- (+ a (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2)))) (* a (sqrt -1))))","(* b_2 (- (+ a (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4)))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))","(* b_2 (- (+ a (* -1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (/ (* b_2 (- (* -1 a) (* a (sqrt -1)))) (pow a 2)))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (/ -1 a)) (/ (sqrt -1) a))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ -1 a))) (/ (sqrt -1) a))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ -1 a)))) (/ (sqrt -1) a))))","(* -1 (* b_2 (- (* -1 a) (* a (sqrt -1)))))","(* -1 (* b_2 (- (+ (* -1 a) (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2)))) (* a (sqrt -1)))))","(* -1 (* b_2 (- (+ (* -1 a) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4)))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(* -1 (* b_2 (- (+ (* -1 a) (* -1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))))","(* -1 (* a (* b_2 (sqrt -1))))","(* -1 (* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(/ (- (* a b_2) (* a (* b_2 (sqrt -1)))) (pow a 2))","(- (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (* a b_2) (* a (* b_2 (sqrt -1))))","(- (+ (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) b_2)) (* a b_2)) (* a (* b_2 (sqrt -1))))","(- (+ (* a b_2) (* c (- (* 1/8 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2))))) (* a (* b_2 (sqrt -1))))","(- (+ (* a b_2) (* c (- (* c (- (* -1/16 (/ (* (pow a 4) (* c (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow a 3) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2))))) (* a (* b_2 (sqrt -1))))","(+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) b_2)) (* a (* b_2 (sqrt -1))))","(+ (* a (* b_2 (sqrt -1))) (* c (+ (* -1/8 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)))))","(+ (* a (* b_2 (sqrt -1))) (* c (+ (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 3) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 4) (* c (sqrt -1))) (pow b_2 5))))))))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(* c (- (/ (* a b_2) c) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (/ (* a b_2) c)) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ (* a b_2) c)) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1)))))","(* c (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))))","(* c (+ (* -1/2 (/ a b_2)) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ a (/ (pow b_2 2) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (* c (- (* -1 (/ (* a b_2) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* a b_2)) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (* a c)) (* (pow b_2 2) (sqrt -1))))) c)) (* a b_2)) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))"]],"memory":[[-14621936,55731872]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b_2 #s(literal 5 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ b_2 a)","(/.f64 b_2 a)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(- (* 1/2 (/ (* a c) b_2)) (* 2 b_2))","(fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) b_2))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* -1/8 (/ (pow c 2) (pow b_2 3))))) (* -1/2 (/ c b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b_2 #s(literal 5 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))","(* -1/2 (/ a b_2))","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/16 binary64) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) a b_2)","(/ (- b_2 (* b_2 (sqrt -1))) a)","(/.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(/ (- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1))) a)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal -1/2 binary64) (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) (* b_2 (sqrt -1))) a)","(/.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) (* b_2 (sqrt -1))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) a)","(* a (- b_2 (* b_2 (sqrt -1))))","(*.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(* a (- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal -1/2 binary64) (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) a)","(* a (- (+ b_2 (* a (- (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) a)","(* a (- (+ b_2 (* a (- (* a (- (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) a)","(* a b_2)","(*.f64 a b_2)","(* a (* b_2 (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) a)","(* a (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(* a (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(* a (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(* b_2 (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* a c) (pow b_2 2))","(fma.f64 c a (*.f64 b_2 b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(-.f64 (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a)))))","(*.f64 (-.f64 (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (/.f64 b_2 a))))","(* -1 (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))","(* (pow a 2) (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 a a))","(* (pow a 2) (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) (*.f64 a a))","(* (pow a 2) (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (/.f64 b_2 a)))) (*.f64 a a))","(* (sqrt (* (pow a 3) c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64)))","(* (pow a 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 a a))","(* (pow a 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) (*.f64 a a))","(* (pow a 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) (*.f64 a a))","(* a (+ (* -1/2 (/ c b_2)) (/ b_2 a)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 c b_2) (/.f64 b_2 a)) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* a c)","(*.f64 c a)","(* a (+ c (/ (pow b_2 2) a)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) b_2) (neg.f64 a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) a)) (neg.f64 a)))","(* -1 (* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) (neg.f64 a)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 a)) b_2) (neg.f64 a)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 a)) b_2) (neg.f64 a)))","(* (sqrt (* (pow a 3) c)) (pow (sqrt -1) 3))","(*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))","(* (pow a 2) (- (/ b_2 a) (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)) (*.f64 a a))","(* (pow a 2) (- (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) (neg.f64 a))) (*.f64 a a))","(* (pow a 2) (- (* -1 (/ (+ (* -1 b_2) (* -1 (/ (- (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 a)) b_2) (neg.f64 a))) (*.f64 a a))","(* -1 (* (sqrt (* (pow a 3) c)) (pow (sqrt -1) 3)))","(*.f64 (neg.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) (*.f64 a a))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64)))) (*.f64 a a))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1))))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64))))) (*.f64 a a))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2)))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) a)))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(*.f64 (neg.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(*.f64 (neg.f64 a) (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) a)) b_2))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/ c b_2)","(/.f64 c b_2)","(- (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(-.f64 (neg.f64 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) #s(literal -1/2 binary64) #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a))))","(- (* b_2 (- (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) a)) b_2))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64))) b_2 (/.f64 #s(literal 1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* a b_2) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (+ a (* -1/2 (* (sqrt (/ a c)) (* b_2 (sqrt -1)))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64) a) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))","(- (* b_2 (+ a (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (sqrt -1))))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 a) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))","(+ (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* (pow a 3) c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (sqrt -1))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* (pow a 3) c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ a c)) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/16 binary64))) (*.f64 b_2 b_2) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))","(/ (+ (* -1/2 (* a c)) (pow b_2 2)) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 c a) (*.f64 b_2 b_2)) b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 b_2 b_2) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 #s(literal -2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (/.f64 #s(literal -2 binary64) a))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (/.f64 #s(literal -2 binary64) a)))) b_2)","(* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal 1/2 binary64) #s(literal -2 binary64)) b_2)","(* b_2 (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (neg.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 2 binary64)))) b_2)","(* b_2 (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))) (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64)) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 2 binary64)))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) b_2 b_2)","(/ (* b_2 (- a (* a (sqrt -1)))) (pow a 2))","(*.f64 (/.f64 (-.f64 a (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)) a) (/.f64 b_2 a))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (/ 1 a)) (/ (sqrt -1) a)))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 #s(literal 1 binary64) a)) (/.f64 (sqrt.f64 #s(literal -1 binary64)) a)) b_2)","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a))) (/ (sqrt -1) a)))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (/.f64 #s(literal 1 binary64) a))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) a)) b_2)","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a)))) (/ (sqrt -1) a)))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (/.f64 #s(literal 1 binary64) a)))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) a)) b_2)","(* b_2 (- a (* a (sqrt -1))))","(*.f64 (-.f64 a (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)) b_2)","(* b_2 (- (+ a (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2)))) (* a (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64) (-.f64 a (*.f64 (sqrt.f64 #s(literal -1 binary64)) a))) b_2)","(* b_2 (- (+ a (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4)))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) a) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a))) b_2)","(* b_2 (- (+ a (* -1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) a) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)))) b_2)","(* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)) b_2)","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a))) b_2)","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)))) b_2)","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64)))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64)))) b_2)","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(*.f64 (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) (neg.f64 b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c)))) (neg.f64 b_2))","(* -1 (/ (- (* 1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/2 (* a c))) b_2))","(/.f64 (fma.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal 1/8 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (neg.f64 b_2))","(* -1 (/ (- (* 1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))) (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))))) b_2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (*.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal -1/8 binary64))) (neg.f64 b_2))","(* -1 (/ (- (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 c a))) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 a a) b_2) (/.f64 (*.f64 c c) b_2)) #s(literal -1/8 binary64)))) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64)) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64) #s(literal 1 binary64))) (neg.f64 b_2))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) b_2 b_2))","(* -1 (/ (* b_2 (- (* -1 a) (* a (sqrt -1)))) (pow a 2)))","(*.f64 (neg.f64 b_2) (/.f64 (*.f64 a (-.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 a a)))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (/ -1 a)) (/ (sqrt -1) a))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (/.f64 #s(literal -1 binary64) a)) (/.f64 (sqrt.f64 #s(literal -1 binary64)) a)) (neg.f64 b_2))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ -1 a))) (/ (sqrt -1) a))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (/.f64 #s(literal -1 binary64) a))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) a)) (neg.f64 b_2))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ -1 a)))) (/ (sqrt -1) a))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (/.f64 #s(literal -1 binary64) a)))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) a)) (neg.f64 b_2))","(* -1 (* b_2 (- (* -1 a) (* a (sqrt -1)))))","(*.f64 (*.f64 a (-.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 b_2))","(* -1 (* b_2 (- (+ (* -1 a) (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2)))) (* a (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 (*.f64 a a) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2)) (*.f64 a (-.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 b_2))","(* -1 (* b_2 (- (+ (* -1 a) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4)))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (neg.f64 a)) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a))) (neg.f64 b_2))","(* -1 (* b_2 (- (+ (* -1 a) (* -1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (neg.f64 a)) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)))) (neg.f64 b_2))","(* -1 (* a (* b_2 (sqrt -1))))","(*.f64 (*.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64))) a)","(* -1 (* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)) (neg.f64 b_2))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a))) (neg.f64 b_2))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (sqrt -1)))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)))) (neg.f64 b_2))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal 1/2 binary64) #s(literal -1 binary64)) (neg.f64 b_2))","(* -1 (* b_2 (sqrt -1)))","(*.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 b_2))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 a (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 a a) c)) (pow.f64 b_2 #s(literal 5 binary64)))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(- (* c (- (* 1/8 (/ (* (pow a 2) c) (pow b_2 3))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64) (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (pow b_2 5))) (* -1/8 (/ (pow a 2) (pow b_2 3))))) (* -1/2 (/ a b_2)))) (* 2 b_2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64)))) #s(literal 1/16 binary64) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (*.f64 (/.f64 a b_2) #s(literal 1/2 binary64))) c (*.f64 #s(literal -2 binary64) b_2))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (/.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(/ (- (* a b_2) (* a (* b_2 (sqrt -1)))) (pow a 2))","(*.f64 (/.f64 a a) (/.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(- (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64) (/.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) #s(literal -1/2 binary64))) c (/.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64))) c (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) #s(literal -1/2 binary64))) c (/.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(- (* a b_2) (* a (* b_2 (sqrt -1))))","(*.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(- (+ (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) b_2)) (* a b_2)) (* a (* b_2 (sqrt -1))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2)) #s(literal -1/2 binary64) (*.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(- (+ (* a b_2) (* c (- (* 1/8 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2))))) (* a (* b_2 (sqrt -1))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 a a) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64))) c (*.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(- (+ (* a b_2) (* c (- (* c (- (* -1/16 (/ (* (pow a 4) (* c (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow a 3) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2))))) (* a (* b_2 (sqrt -1))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64))) c (*.f64 (*.f64 (*.f64 a a) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64))) c (*.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) b_2)) (* a (* b_2 (sqrt -1))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2)) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) a))","(+ (* a (* b_2 (sqrt -1))) (* c (+ (* -1/8 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) a))","(+ (* a (* b_2 (sqrt -1))) (* c (+ (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 3) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 4) (* c (sqrt -1))) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64))) c (*.f64 (*.f64 (*.f64 a a) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) a))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) (*.f64 c a))))) c)","(* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c)))))","(*.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(*.f64 (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (- (/ (* a b_2) c) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(*.f64 (-.f64 (*.f64 a (/.f64 b_2 c)) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (- (+ (* -1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (/ (* a b_2) c)) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (-.f64 (*.f64 a (/.f64 b_2 c)) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ (* a b_2) c)) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1)))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 c))) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* -1/2 (/ a b_2)) (/ b_2 c)))","(*.f64 (fma.f64 (/.f64 a b_2) #s(literal -1/2 binary64) (/.f64 b_2 c)) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ a (/ (pow b_2 2) c)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) a)) c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c)) (/.f64 b_2 a)) c))) (neg.f64 c))","(* -1 (* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) (neg.f64 c)) b_2) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 a)) c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))))) c)) c))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (* a b_2) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 (fma.f64 a (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (+ (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* a b_2)) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (*.f64 a b_2))) c) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (* a c)) (* (pow b_2 2) (sqrt -1))))) c)) (* a b_2)) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(*.f64 (-.f64 (/.f64 (fma.f64 a b_2 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 c a)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c)) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2)))))","(*.f64 (fma.f64 (/.f64 a b_2) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(*.f64 (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a)) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":275.60205078125,"type":"simplify"},{"count":[[21,718]],"egraph":[[0,8257,230,0.086437818],[2,1599,230,0.040211841],[1,232,230,0.006452531],[0,62,234,0.001848426],[0,38,234,0.000682492]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/.f64 c b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))","(neg.f64 b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","(-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(*.f64 a b_2)","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 c a (*.f64 b_2 b_2))"]],"memory":[[3824928,66538432]],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 (neg.f64 c) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 (*.f64 (neg.f64 c) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 c) b_2) #s(literal 1/2 binary64))","(*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 c) b_2))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 c (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 (neg.f64 c) #s(literal -1/2 binary64)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 (neg.f64 c) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (neg.f64 c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 c) #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (/.f64 b_2 c)))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 b_2 #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","(*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 c #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 c) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (*.f64 c #s(literal 1 binary64)) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 c)) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 b_2 c))))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) c)","(*.f64 #s(literal 1 binary64) (/.f64 c b_2))","(*.f64 (neg.f64 c) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 c (pow.f64 b_2 #s(literal -1 binary64)))","(pow.f64 (/.f64 b_2 c) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (*.f64 (neg.f64 c) #s(literal -1 binary64)) b_2)","(/.f64 (*.f64 c #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 c)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 (neg.f64 c) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 c #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b_2 c))))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 c))","(/.f64 (neg.f64 c) (neg.f64 b_2))","(/.f64 c (*.f64 b_2 #s(literal 1 binary64)))","(/.f64 c b_2)","(neg.f64 (/.f64 (neg.f64 c) b_2))","(neg.f64 (/.f64 c (neg.f64 b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b_2)) (/.f64 c (neg.f64 b_2)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 c) b_2))","(-.f64 #s(literal 0 binary64) (/.f64 c (neg.f64 b_2)))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (*.f64 b_2 #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) a))","(*.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b_2) a))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(*.f64 b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -2 binary64)))","(pow.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 a))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) (*.f64 a #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 (neg.f64 b_2) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) (neg.f64 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b_2) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 #s(literal 2 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 #s(literal -2 binary64) (/.f64 a b_2))","(*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (neg.f64 b_2))","(*.f64 (*.f64 b_2 #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 b_2)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 a b_2))))","(*.f64 #s(literal -1 binary64) (/.f64 b_2 (neg.f64 a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 b_2 #s(literal 1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b_2)","(*.f64 #s(literal 1 binary64) (/.f64 b_2 a))","(*.f64 (neg.f64 b_2) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal 1 binary64))","(*.f64 b_2 (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 a b_2) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 a) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) a) #s(literal 3 binary64)) (pow.f64 (/.f64 b_2 (neg.f64 a)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 #s(literal 0 binary64) a) (fma.f64 (/.f64 b_2 (neg.f64 a)) (/.f64 b_2 (neg.f64 a)) (*.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 b_2 (neg.f64 a))))))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b_2))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) (neg.f64 (pow.f64 b_2 #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 (neg.f64 a) b_2)) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 a b_2))","(/.f64 (/.f64 (neg.f64 b_2) a) #s(literal -1 binary64))","(/.f64 (neg.f64 b_2) (neg.f64 a))","(/.f64 (/.f64 b_2 a) #s(literal 1 binary64))","(/.f64 b_2 (*.f64 a #s(literal 1 binary64)))","(/.f64 b_2 a)","(neg.f64 (/.f64 b_2 (neg.f64 a)))","(neg.f64 (/.f64 (neg.f64 b_2) a))","(fma.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (/.f64 b_2 a))","(fma.f64 #s(literal 0 binary64) (pow.f64 a #s(literal -1 binary64)) (/.f64 b_2 a))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) a) #s(literal 1 binary64)) (/.f64 (/.f64 b_2 (neg.f64 a)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 b_2 (neg.f64 a)))","(-.f64 #s(literal 0 binary64) (/.f64 b_2 (neg.f64 a)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 b_2) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 b_2 a))","(*.f64 (*.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 a #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a))","(*.f64 (neg.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 a #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (*.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))))))","(/.f64 #s(literal 1 binary64) (/.f64 a #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))))","(/.f64 (neg.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))) (neg.f64 a))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) (*.f64 a #s(literal 1 binary64)))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(neg.f64 (/.f64 (neg.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))) a))","(neg.f64 (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) (neg.f64 a)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))) a))","(-.f64 #s(literal 0 binary64) (/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))) #s(literal -1 binary64)))","#s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 a #s(literal -1 binary64))) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal 1 binary64)) (/.f64 a b_2))","(*.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 b_2)) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal -1 binary64)) (/.f64 (neg.f64 a) b_2))","(*.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 b_2)) (/.f64 c (pow.f64 (neg.f64 a) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) (/.f64 c (neg.f64 b_2)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 a #s(literal -1 binary64))) (/.f64 c b_2))","(*.f64 (/.f64 c (pow.f64 (neg.f64 a) #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) (neg.f64 b_2)))","(*.f64 (/.f64 c (pow.f64 a #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 (/.f64 c #s(literal 1 binary64)) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 b_2)))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 (neg.f64 a))))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c (pow.f64 a #s(literal -1 binary64))))","(*.f64 (*.f64 a #s(literal 1 binary64)) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) c)) (/.f64 a b_2))","(*.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal 1 binary64)) (/.f64 a b_2))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 a) b_2) (/.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal -1 binary64)))","(*.f64 (/.f64 c (neg.f64 b_2)) (/.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64))))","(*.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 (neg.f64 a) #s(literal -1 binary64))))","(*.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 a b_2) c) #s(literal -1/2 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 b_2 (neg.f64 a))))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 a #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 #s(literal 1/2 binary64) (/.f64 c (/.f64 b_2 (neg.f64 a))))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) (*.f64 a #s(literal 1 binary64)))","(*.f64 (/.f64 c b_2) (/.f64 #s(literal -1/2 binary64) (pow.f64 a #s(literal -1 binary64))))","(*.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 a b_2) c))","(*.f64 c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)))","(*.f64 a (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) c)))","(pow.f64 (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) c))) (/.f64 (neg.f64 b_2) a))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal 1 binary64))) (/.f64 (neg.f64 b_2) a))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c) b_2)","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) c)) (/.f64 b_2 a))","(/.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal 1 binary64)) (/.f64 b_2 a))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c)) (/.f64 (neg.f64 b_2) a))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) (*.f64 b_2 #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) b_2)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a))))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 a) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 a) (*.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 a) (*.f64 #s(literal -1/2 binary64) c)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 b_2 a))","(/.f64 c (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) a)))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 a #s(literal 1 binary64)))","(*.f64 (*.f64 a #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 (*.f64 (neg.f64 a) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 a)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 a) b_2) #s(literal 1/2 binary64))","(*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) a)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) a) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 a) b_2))","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))","(*.f64 a (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 a (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 (neg.f64 a) #s(literal -1/2 binary64)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 a)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) a)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 b_2 #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1/2 binary64) a) b_2)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) (neg.f64 a))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 a) #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) a)))","(/.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) a))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 a))","(*.f64 (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) a) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)))","(*.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) a) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) a) (pow.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) a) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))))","(*.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))))))","(*.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) a)))","(*.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (pow.f64 a #s(literal -2 binary64)))","(*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))))","(*.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)) #s(literal 3 binary64))) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (-.f64 (*.f64 (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))) (*.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) a)) (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) a)) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) a) (*.f64 (neg.f64 a) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (*.f64 (/.f64 a (neg.f64 b_2)) #s(literal 1 binary64))) (*.f64 (/.f64 a (neg.f64 b_2)) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (neg.f64 b_2)) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (*.f64 (/.f64 a (neg.f64 b_2)) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (neg.f64 a)) (*.f64 a (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))","(/.f64 (/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) a) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))","(/.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) a) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))","(/.f64 (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 3 binary64))) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)))) (neg.f64 (*.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)))) (neg.f64 (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) (*.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)) (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)))) (-.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) a) (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) a) (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a a) (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (neg.f64 a))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (*.f64 a #s(literal 1 binary64)))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","(neg.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) a))","(neg.f64 (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (neg.f64 a)))","(fma.f64 (neg.f64 (neg.f64 b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)))","(fma.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)))","(fma.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)))","(-.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))) (/.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 b_2) a) #s(literal 3 binary64)) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))))) (/.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 3 binary64)) (fma.f64 (/.f64 b_2 a) (/.f64 b_2 a) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (*.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) a) (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) a))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) a) (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) a))","(-.f64 (/.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a a)) (/.f64 (*.f64 a #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (*.f64 a a)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (neg.f64 a)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) a))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (neg.f64 a)))","(-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) a)))","(*.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))))","(*.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))))","(*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 b_2 b_2 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) (/.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (*.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (*.f64 #s(literal 0 binary64) (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (neg.f64 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64))) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) (fma.f64 b_2 b_2 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64))) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))","(neg.f64 (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(fma.f64 (*.f64 (neg.f64 b_2) b_2) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) b_2)) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(fma.f64 #s(literal -1 binary64) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))))","(-.f64 #s(literal 0 binary64) (+.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(-.f64 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) b_2)","(-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))","(+.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2)) (neg.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2))))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) b_2) (*.f64 b_2 b_2)))))","(+.f64 #s(literal 0 binary64) (neg.f64 (-.f64 b_2 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))))","(+.f64 #s(literal 0 binary64) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(+.f64 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(*.f64 (*.f64 (neg.f64 b_2) b_2) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) b_2)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(*.f64 b_2 #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 b_2) b_2) (+.f64 #s(literal 0 binary64) b_2))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) b_2) (*.f64 (neg.f64 b_2) b_2)))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 0 binary64) (neg.f64 b_2)))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(/.f64 (*.f64 b_2 b_2) (neg.f64 (+.f64 #s(literal 0 binary64) b_2)))","(neg.f64 b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (neg.f64 b_2))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 #s(literal 0 binary64) b_2)))","(-.f64 #s(literal 0 binary64) b_2)","(+.f64 #s(literal 0 binary64) (neg.f64 b_2))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))","(*.f64 (/.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a a)) (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(*.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) (*.f64 a a)) (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (pow.f64 a #s(literal -2 binary64)) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (pow.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 a)))","(*.f64 (pow.f64 (/.f64 (*.f64 a a) (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)) (pow.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 a a) (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64)) (pow.f64 a #s(literal -2 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (/.f64 a a) (/.f64 b_2 a) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))))))","(*.f64 (/.f64 a a) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(*.f64 (neg.f64 (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (pow.f64 a #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) (*.f64 a a))))","(*.f64 (-.f64 (*.f64 (*.f64 a b_2) (*.f64 a a)) (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 a a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 a a) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))","(*.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 a a) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 a a) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))))","(*.f64 (neg.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (pow.f64 (*.f64 (neg.f64 a) a) #s(literal -1 binary64)))","(*.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 a #s(literal -2 binary64)))","(pow.f64 (*.f64 (/.f64 a a) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))) (*.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 a) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 a a) (/.f64 b_2 a) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 a) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) (*.f64 a a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 a b_2) (*.f64 a a)) (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))) (neg.f64 (pow.f64 a #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 a b_2) a) a) (*.f64 a (/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) a))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 a b_2) a) (*.f64 (neg.f64 a) a)) (*.f64 a (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 a (*.f64 (neg.f64 a) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 a b_2) a) (/.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 a b_2) a) (*.f64 a a)) (*.f64 a (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (pow.f64 a #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 a b_2)) a) (*.f64 (*.f64 (neg.f64 a) a) (/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) a))) (*.f64 (*.f64 (neg.f64 a) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 a b_2)) (*.f64 (neg.f64 a) a)) (*.f64 (*.f64 (neg.f64 a) a) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (*.f64 (neg.f64 a) a) (*.f64 (neg.f64 a) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 a b_2)) (/.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (*.f64 (*.f64 (neg.f64 a) a) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 a) a) (/.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 a b_2)) (*.f64 a a)) (*.f64 (*.f64 (neg.f64 a) a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (*.f64 (*.f64 (neg.f64 a) a) (*.f64 a a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 (/.f64 a a) (/.f64 a b_2)) (/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) a))) (*.f64 (*.f64 (/.f64 a a) (/.f64 a b_2)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) a)) (*.f64 (*.f64 (/.f64 a a) (/.f64 a b_2)) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (*.f64 (/.f64 a a) (/.f64 a b_2)) (*.f64 (neg.f64 a) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (*.f64 (*.f64 (/.f64 a a) (/.f64 a b_2)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a a) (/.f64 a b_2)) (/.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 a a)) (*.f64 (*.f64 (/.f64 a a) (/.f64 a b_2)) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (*.f64 (*.f64 (/.f64 a a) (/.f64 a b_2)) (*.f64 a a)))","(/.f64 (-.f64 (*.f64 (*.f64 a b_2) a) (*.f64 (*.f64 a a) (/.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) a))) (pow.f64 a #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) a)) (*.f64 (*.f64 a a) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (*.f64 a a) (*.f64 (neg.f64 a) a)))","(/.f64 (-.f64 (*.f64 (*.f64 a b_2) (/.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (*.f64 (*.f64 a a) #s(literal 1 binary64))) (*.f64 (*.f64 a a) (/.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -2 binary64))) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (pow.f64 a #s(literal -2 binary64))) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64)) (*.f64 a a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64))) (fma.f64 (/.f64 a a) (/.f64 b_2 a) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (*.f64 a a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 a a) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (neg.f64 (*.f64 (neg.f64 a) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)) (*.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) (*.f64 a a)))","(/.f64 (-.f64 (*.f64 (*.f64 a b_2) (*.f64 a a)) (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (pow.f64 a #s(literal 4 binary64)))","(/.f64 (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a) (*.f64 a #s(literal 1 binary64)))","(/.f64 (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a) a)","(/.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (*.f64 a a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a a) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a a) (*.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 a a) (/.f64 b_2 a) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))) (-.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))) (-.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a a)) (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) (*.f64 a a)) (*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 a #s(literal 4 binary64)) (-.f64 (*.f64 (*.f64 a b_2) (*.f64 a a)) (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 a a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 a a) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 a a) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a a) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (*.f64 (*.f64 a a) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (neg.f64 a) a))","(/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (*.f64 a a) #s(literal 1 binary64)))","(/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a a))","(neg.f64 (*.f64 (neg.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (pow.f64 a #s(literal -2 binary64))))","(neg.f64 (*.f64 (/.f64 a (neg.f64 a)) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(fma.f64 (/.f64 a a) (/.f64 b_2 a) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(fma.f64 (/.f64 (*.f64 a b_2) a) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(fma.f64 (neg.f64 (*.f64 a b_2)) (pow.f64 (*.f64 (neg.f64 a) a) #s(literal -1 binary64)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 a a) (/.f64 b_2 a)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(fma.f64 (*.f64 a b_2) (pow.f64 a #s(literal -2 binary64)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(fma.f64 (/.f64 b_2 a) (/.f64 a a) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(fma.f64 a (*.f64 b_2 (pow.f64 a #s(literal -2 binary64))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(fma.f64 b_2 (*.f64 a (pow.f64 a #s(literal -2 binary64))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (fma.f64 (/.f64 a a) (/.f64 b_2 a) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))) (/.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64)) (fma.f64 (/.f64 a a) (/.f64 b_2 a) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))))) (/.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))))))","(-.f64 (/.f64 (*.f64 (*.f64 a b_2) (*.f64 a a)) (pow.f64 a #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (pow.f64 a #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (/.f64 (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 a a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(-.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (*.f64 (*.f64 a a) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (*.f64 (*.f64 a a) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 a) a)) (*.f64 (/.f64 a (neg.f64 a)) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 a a)) (/.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 a a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (*.f64 a a)) (/.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (*.f64 a a)))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (pow.f64 a #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 (/.f64 a (neg.f64 a)) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(-.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 a a) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 a a) (/.f64 b_2 a)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (pow.f64 a #s(literal -2 binary64)))))","(*.f64 (/.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a) (/.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(*.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(pow.f64 (pow.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (fma.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 a) #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 (*.f64 a b_2) #s(literal 3 binary64))) (fma.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (neg.f64 (neg.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 a b_2) b_2) a) (/.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(fma.f64 (/.f64 (*.f64 (*.f64 a b_2) a) a) (/.f64 b_2 (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(fma.f64 (/.f64 (*.f64 b_2 b_2) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(fma.f64 (/.f64 (*.f64 a a) a) (/.f64 (*.f64 b_2 b_2) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(fma.f64 (/.f64 a a) (/.f64 (*.f64 b_2 (*.f64 a b_2)) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(fma.f64 (/.f64 (*.f64 a b_2) a) (/.f64 (*.f64 a b_2) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(fma.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a (*.f64 a b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a b_2))","(fma.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (pow.f64 (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(fma.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))))","(fma.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a b_2))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a) (*.f64 a b_2))","(fma.f64 (/.f64 b_2 a) (/.f64 (*.f64 a (*.f64 a b_2)) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(fma.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a b_2))","(fma.f64 a b_2 (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 b_2 a (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (/.f64 (*.f64 (*.f64 a a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))))","(-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(+.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (neg.f64 (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (*.f64 a a) (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(+.f64 (/.f64 (pow.f64 (*.f64 a b_2) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 a (+.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (*.f64 a b_2) #s(literal 2 binary64))))))","(+.f64 (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a b_2))","(+.f64 (*.f64 a b_2) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 a b_2)","(*.f64 b_2 a)","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)","(*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 b_2) b_2))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 b_2) b_2)) (pow.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))","(*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 b_2 b_2 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) b_2)))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) (fma.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)))) (neg.f64 (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 b_2) b_2)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) (*.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)) (*.f64 b_2 b_2))) (*.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64))) (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 b_2) b_2))) (neg.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) b_2)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 b_2) b_2)) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) (-.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) b_2))) (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 b_2 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) b_2))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 a b_2) c) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2)","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 a #s(literal -1 binary64))) (pow.f64 b_2 #s(literal -1 binary64)) b_2)","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal 1 binary64)) (/.f64 a b_2) b_2)","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 b_2)) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) b_2)","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal -1 binary64)) (/.f64 (neg.f64 a) b_2) b_2)","(fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 b_2)) (/.f64 c (pow.f64 (neg.f64 a) #s(literal -1 binary64))) b_2)","(fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) (/.f64 c (neg.f64 b_2)) b_2)","(fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 a #s(literal -1 binary64))) (/.f64 c b_2) b_2)","(fma.f64 (/.f64 c (pow.f64 (neg.f64 a) #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) (neg.f64 b_2)) b_2)","(fma.f64 (/.f64 c (pow.f64 a #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) b_2) b_2)","(fma.f64 (/.f64 c #s(literal 1 binary64)) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) b_2)","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 b_2)) b_2)","(fma.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 (neg.f64 a))) b_2)","(fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c (pow.f64 a #s(literal -1 binary64))) b_2)","(fma.f64 (*.f64 a #s(literal 1 binary64)) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) b_2)","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c) (pow.f64 b_2 #s(literal -1 binary64)) b_2)","(fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) c)) (/.f64 a b_2) b_2)","(fma.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2)","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal 1 binary64)) (/.f64 a b_2) b_2)","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2)","(fma.f64 (/.f64 (neg.f64 a) b_2) (/.f64 (*.f64 #s(literal -1/2 binary64) c) #s(literal -1 binary64)) b_2)","(fma.f64 (/.f64 c (neg.f64 b_2)) (/.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) b_2)","(fma.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 (neg.f64 a) #s(literal -1 binary64))) b_2)","(fma.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2)","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) (pow.f64 b_2 #s(literal -1 binary64)) b_2)","(fma.f64 (*.f64 (/.f64 a b_2) c) #s(literal -1/2 binary64) b_2)","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 b_2 (neg.f64 a))) b_2)","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 a #s(literal -1 binary64))) b_2)","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) b_2)","(fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c (/.f64 b_2 (neg.f64 a))) b_2)","(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","(fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c b_2)","(fma.f64 (/.f64 a b_2) (*.f64 #s(literal -1/2 binary64) c) b_2)","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) (*.f64 a #s(literal 1 binary64)) b_2)","(fma.f64 (/.f64 c b_2) (/.f64 #s(literal -1/2 binary64) (pow.f64 a #s(literal -1 binary64))) b_2)","(fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 a b_2) c) b_2)","(fma.f64 c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) b_2)","(fma.f64 a (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))) (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (-.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) #s(literal 2 binary64)) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2))) (neg.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c (neg.f64 b_2)))))","(+.f64 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c) b_2)","(+.f64 b_2 (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(pow.f64 (exp.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(exp.f64 (*.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (*.f64 c a) (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(*.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2)))))","(*.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2))))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 c a))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 c a))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (*.f64 c a))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 c a))","(fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 c a))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 c a))","(fma.f64 c a (*.f64 b_2 b_2))","(fma.f64 a c (*.f64 b_2 b_2))","(fma.f64 b_2 b_2 (*.f64 c a))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(-.f64 (*.f64 c a) (*.f64 (neg.f64 b_2) b_2))","(+.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (neg.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(+.f64 (*.f64 c a) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 c a))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":296.26513671875,"type":"rewrite"},{"compiler":[[35972,3918]],"memory":[[8123440,81716304]],"time":194.669921875,"type":"eval"},{"alts":[["(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","fresh",50.392635261334775,"binary64"],["(/.f64 (-.f64 (/.f64 (*.f64 (neg.f64 b_2) b_2) (+.f64 #s(literal 0 binary64) b_2)) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","fresh",49.02313809932997,"binary64"],["(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))) a)) (*.f64 a a))","fresh",52.95031604542211,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","next",47.61837414354757,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) a)","fresh",47.420344145834406,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",31.865488310583263,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",41.99398968926333,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","done",42.80170006493376,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) b_2)) a)","fresh",47.49838169037638,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","done",46.513309462435124,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","next",47.605777311935874,"binary64"],["(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","fresh",47.5910022634473,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","fresh",47.605777335671256,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","next",42.73658753183451,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","fresh",41.80079770758671,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","fresh",42.58387595018011,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","done",42.537002532089,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64))) #s(literal -2 binary64)))","fresh",53.646280402947944,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","next",41.447092476192545,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","next",42.611221282089,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","done",41.380686226192545,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))))","fresh",53.39909627710526,"binary64"]],"compiler":[[22,11],[28,19],[23,15],[21,11],[17,13],[13,10],[18,13],[22,15],[21,15],[21,15],[14,11],[24,13],[14,11],[24,17],[19,14],[19,14],[19,14],[23,18],[19,14],[19,14],[19,14],[23,18],[22,11],[28,19],[23,15],[21,11],[17,13],[18,13],[21,15],[14,11],[24,13],[14,11],[24,17],[19,14],[19,14],[23,18],[19,14],[19,14],[23,18]],"count":[[962,22]],"kept":[{"done":[1,1],"fresh":[10,8],"new":[946,9],"picked":[5,4]}],"memory":[[-7704176,44451792]],"min-error":[[5.816156579705875,"binary64"]],"time":37.865966796875,"type":"prune"},{"egraph":[[0,8039,253,0.033951593],[12,7889,253,0.025084376],[11,7517,253,0.029697318],[10,6705,253,0.040792196],[9,6676,253,0.020244293],[8,6620,253,0.025223172],[7,6350,253,0.022197671],[6,5693,253,0.026447666],[5,4384,253,0.026271047],[4,1290,253,0.021371559],[3,419,253,0.006428553],[2,184,253,0.001798009],[1,102,257,0.000919273],[0,57,259,0.000550696],[0,36,259,0.000331408]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","c","(/.f64 #s(literal -1/2 binary64) b_2)","#s(literal -1/2 binary64)","b_2","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","b_2","(/.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","a","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(literal 1/2 binary64) b_2)","#s(literal 1/2 binary64)","b_2","c","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","a","#s(literal -2 binary64)","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","#s(literal 1 binary64)","(/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","a","(-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","b_2","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","(-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(neg.f64 b_2)","b_2","(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))"]],"locations":[["(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","cost-diff",0],["(-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","cost-diff",2],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","cost-diff",0],["(-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","cost-diff",0],["(/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","cost-diff",2],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) b_2)","cost-diff",0],["(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","cost-diff",0],["(/.f64 #s(literal -2 binary64) a)","cost-diff",0],["(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","cost-diff",0],["(/.f64 #s(literal -1/2 binary64) b_2)","cost-diff",0],["(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","cost-diff",0]],"memory":[[6600352,13799664]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","c","(/.f64 #s(literal -1/2 binary64) b_2)","#s(literal -1/2 binary64)","b_2","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","b_2","(/.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","a","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(literal 1/2 binary64) b_2)","#s(literal 1/2 binary64)","b_2","c","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 b_2 a)","a","#s(literal -2 binary64)","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","#s(literal 1 binary64)","(/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","a","(-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","b_2","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","(-.f64 (/.f64 (fma.f64 (/.f64 b_2 a) b_2 c) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 b_2 a))","(-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2)","(neg.f64 b_2)","b_2","(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":339.68701171875,"type":"simplify"},{"compiler":[[254,35]],"locations":[["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","accuracy",0.07421875],["(fma.f64 c a (*.f64 b_2 b_2))","accuracy",0.49999449521112044],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","accuracy",5.704986764516719],["(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","accuracy",5.80613162700142],["(/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","accuracy",0.08203125],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","accuracy",0.08984375],["(fma.f64 c a (*.f64 b_2 b_2))","accuracy",0.49999449521112044],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","accuracy",5.704986764516719],["(/.f64 #s(literal 1/2 binary64) b_2)","accuracy",0.0],["(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","accuracy",0.0078125],["(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","accuracy",0.0859375],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","accuracy",21.78882836953494],["(/.f64 #s(literal -2 binary64) a)","accuracy",0.0],["(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","accuracy",0.05078125],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","accuracy",21.576267088372607],["(/.f64 #s(literal -1/2 binary64) b_2)","accuracy",0.0],["(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","accuracy",0.08984375],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","accuracy",21.63089444322448]],"memory":[[-8974144,31911344]],"mixsample":[[13.6435546875,"ival-div",0],[5.730712890625,"ival-add",0],[11.406494140625,"ival-mult",0],[0.12255859375,"ival-assert",0],[5.559326171875,"ival-sub",0],[0.26611328125,"ival-true",0],[4.287841796875,"ival-sqrt",0],[0.500244140625,"exact",0],[2.570068359375,"ival-neg",0]],"outcomes":[[40.543212890625,0,"invalid",166],[47.4599609375,0,"valid",90]],"time":111.7490234375,"type":"localize"},{"count":[[19,257]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","(/.f64 #s(literal -1/2 binary64) b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -2 binary64) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(literal 1/2 binary64) b_2)","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","(neg.f64 b_2)","(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 c a (*.f64 b_2 b_2))"]],"memory":[[-4154848,20591824]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/ -2 a)","(/ (- b_2 (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) (* b_2 (sqrt -1))) a)","(/ a (- b_2 (* b_2 (sqrt -1))))","(* a (+ (* 1/2 (/ (* a (* c (sqrt -1))) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (/ 1 (- b_2 (* b_2 (sqrt -1))))))","(* a (+ (* a (- (* -1 (* a (+ (* -1/4 (/ (* (pow c 2) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* c (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ 1 (- b_2 (* b_2 (sqrt -1))))))","(* a (+ (* a (- (* a (- (* -1 (* a (+ (* -1/16 (/ (* (pow c 3) (sqrt -1)) (* (pow b_2 5) (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (+ (* 1/16 (/ (* (pow c 3) (pow (sqrt -1) 2)) (* (pow b_2 4) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/2 (/ (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow c 2) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* b_2 (- b_2 (* b_2 (sqrt -1)))))))))) (+ (* -1/4 (/ (* (pow c 2) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* c (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ 1 (- b_2 (* b_2 (sqrt -1))))))","(- b_2 (* b_2 (sqrt -1)))","(- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1)))","(- (+ b_2 (* a (- (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(- (+ b_2 (* a (- (* a (- (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(- (* 1/2 (/ (* a c) (* b_2 (sqrt -1)))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(- (* a (- (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 3) (sqrt -1)))) (* -1/2 (/ c (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow c 2) (* (pow b_2 3) (sqrt -1)))))) (* -1/2 (/ c (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a))","(/ (+ (* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1))))) (* 1/2 (/ (* a c) (* b_2 (sqrt -1))))) a)","(/ (+ (* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1))))) (* a (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 3) (sqrt -1)))) (* 1/2 (/ c (* b_2 (sqrt -1))))))) a)","(/ (+ (* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1))))) (* a (+ (* 1/2 (/ c (* b_2 (sqrt -1)))) (* a (+ (* -1/8 (/ (pow c 2) (* (pow b_2 3) (sqrt -1)))) (* 1/16 (/ (* a (pow c 3)) (* (pow b_2 5) (sqrt -1))))))))) a)","(* -1 (/ b_2 (sqrt -1)))","(+ (* -1 (/ b_2 (sqrt -1))) (* -1/2 (/ (* a c) (* b_2 (sqrt -1)))))","(+ (* -1 (/ b_2 (sqrt -1))) (* a (+ (* -1/2 (/ c (* b_2 (sqrt -1)))) (* 1/8 (/ (* a (pow c 2)) (* (pow b_2 3) (sqrt -1)))))))","(+ (* -1 (/ b_2 (sqrt -1))) (* a (+ (* -1/2 (/ c (* b_2 (sqrt -1)))) (* a (+ (* -1/16 (/ (* a (pow c 3)) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow c 2) (* (pow b_2 3) (sqrt -1)))))))))","(pow b_2 2)","(+ (* a c) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow a 2)))) (/ b_2 (* c (pow (sqrt -1) 2))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 2)))) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (pow a 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3))) (/ b_2 (* c (pow (sqrt -1) 2))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (* a c)) (/ 1 (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))))","(* a (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (/ b_2 a))))","(* a (- (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 a)))))","(* (sqrt (/ c a)) (/ 1 (sqrt -1)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1)))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))))","(* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1))))","(* a (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(* a (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))))))","(* a (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1))))))))","(* a c)","(* a (+ c (/ (pow b_2 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(* (sqrt (/ a c)) (/ 1 (sqrt -1)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -1))) (/ b_2 (* c (pow (sqrt -1) 4))))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ a (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* 1/2 (* (sqrt (/ a (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (/ (* a b_2) (* c (pow (sqrt -1) 4)))) a)) (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/2 (/ (* a (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 6)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) a)) (/ (* a b_2) (* c (pow (sqrt -1) 4)))) a)) (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(* (sqrt (* a c)) (pow (sqrt -1) 3))","(* -1 (* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(* -1 (* a (- (/ b_2 a) (* -1 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) b_2) a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* -1/2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))) a))) a)))","(* -1 (* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))))","(* -1 (* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* -1 (* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(* -1/2 (/ c b_2))","(/ -1/2 b_2)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ 1/2 b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (- (* -1 (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (sqrt -1)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (- (* b_2 (- (* b_2 (- (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -1) 2))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (sqrt -1)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (sqrt -1))))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (sqrt -1)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(- b_2 (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (* b_2 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 1 (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(- (* -1 b_2) (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))))","(- (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))))","(- (* b_2 (- (* b_2 (- (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(* -1 b_2)","(+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))))","(+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1)))))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(/ (* b_2 (- 1 (sqrt -1))) a)","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (/ 1 a)) (/ (sqrt -1) a)))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a))) (/ (sqrt -1) a)))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a)))) (/ (sqrt -1) a)))","(/ a (* b_2 (- 1 (sqrt -1))))","(/ (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (- 1 (sqrt -1)) 2)))) (/ a (- 1 (sqrt -1)))) b_2)","(/ (- (+ (* -1 (/ (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (pow (- 1 (sqrt -1)) 3))) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow (- 1 (sqrt -1)) 2)))) (pow b_2 4))) (/ a (- 1 (sqrt -1)))) (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (- 1 (sqrt -1)) 2))))) b_2)","(/ (- (+ (* -1 (/ (+ (* -1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow (- 1 (sqrt -1)) 2))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (pow (sqrt -1) 2))) (pow (- 1 (sqrt -1)) 3))) (* 1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (pow (- 1 (sqrt -1)) 3))) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow (- 1 (sqrt -1)) 2))))))) (- 1 (sqrt -1)))))) (pow b_2 6))) (/ a (- 1 (sqrt -1)))) (+ (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (- 1 (sqrt -1)) 2)))) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (* (pow b_2 4) (pow (- 1 (sqrt -1)) 3)))) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (- 1 (sqrt -1)) 2))))))) b_2)","(* b_2 (- 1 (sqrt -1)))","(* b_2 (- (+ 1 (* -1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))) (sqrt -1)))","(* b_2 (- (+ 1 (* 1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4)))) (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (- (+ 1 (* -1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6)))) (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* b_2 (- (/ 1 (sqrt -1)) 1))","(* b_2 (- (+ (* 1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1))) 1))","(* b_2 (- (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (/ 1 (sqrt -1))) (+ 1 (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (/ 1 (sqrt -1))) (+ 1 (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))))))","(* -1 (/ (* b_2 (- 1 (/ 1 (sqrt -1)))) a))","(* b_2 (+ (* -1 (/ (- 1 (/ 1 (sqrt -1))) a)) (* 1/2 (/ c (* (pow b_2 2) (sqrt -1))))))","(* b_2 (+ (* -1 (/ (- 1 (/ 1 (sqrt -1))) a)) (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))))))","(* b_2 (+ (* -1 (/ (- 1 (/ 1 (sqrt -1))) a)) (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (* 1/2 (/ c (* (pow b_2 2) (sqrt -1))))))))","(* b_2 (- (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1))))","(* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))) (/ 1 (sqrt -1))))","(* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))))) (/ 1 (sqrt -1))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(/ (* b_2 (+ 1 (sqrt -1))) a)","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))))","(/ a (* b_2 (+ 1 (sqrt -1))))","(* -1 (/ (+ (* -1 (/ a (+ 1 (sqrt -1)))) (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))) b_2))","(* -1 (/ (+ (* -1 (/ a (+ 1 (sqrt -1)))) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 3)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))) b_2))","(* -1 (/ (+ (* -1 (/ a (+ 1 (sqrt -1)))) (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (pow (+ 1 (sqrt -1)) 3))) (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))))))) (* (pow b_2 6) (+ 1 (sqrt -1))))) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 3)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (* (pow b_2 6) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (pow (sqrt -1) 2))) (* (pow b_2 6) (pow (+ 1 (sqrt -1)) 3)))) (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2)))))))))) b_2))","(* b_2 (+ 1 (sqrt -1)))","(* -1 (* b_2 (- (* -1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))) (+ 1 (sqrt -1)))))","(* -1 (* b_2 (- (* 1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ 1 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -1 (* b_2 (- (* -1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -1 (* b_2 (+ 1 (/ 1 (sqrt -1)))))","(* -1 (* b_2 (+ 1 (+ (* 1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1))))))","(* -1 (* b_2 (- (+ 1 (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (/ 1 (sqrt -1)))) (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))))))","(* -1 (* b_2 (- (+ 1 (+ (* 1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (/ 1 (sqrt -1)))) (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))))))","(* -1 (/ (* b_2 (+ 1 (/ 1 (sqrt -1)))) a))","(* -1 (* b_2 (+ (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))) (+ (/ 1 a) (/ 1 (* a (sqrt -1)))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))) (+ (/ 1 a) (/ 1 (* a (sqrt -1))))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))) (+ (/ 1 a) (/ 1 (* a (sqrt -1)))))))))","(/ b_2 (sqrt -1))","(* -1 (* b_2 (- (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1)))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))) (/ 1 (sqrt -1)))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))))) (/ 1 (sqrt -1)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (/ a (- b_2 (* b_2 (sqrt -1)))))","(+ (* c (- (* -1 (* c (+ (* -1/4 (/ (* (pow a 3) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow a 3) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* (pow a 2) (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ a (- b_2 (* b_2 (sqrt -1)))))","(+ (* c (- (* c (- (* -1 (* c (+ (* -1/16 (/ (* (pow a 4) (sqrt -1)) (* (pow b_2 5) (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (+ (* 1/16 (/ (* (pow a 4) (pow (sqrt -1) 2)) (* (pow b_2 4) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/2 (/ (* a (* (sqrt -1) (+ (* -1/4 (/ (* (pow a 3) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow a 3) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* b_2 (- b_2 (* b_2 (sqrt -1)))))))))) (+ (* -1/4 (/ (* (pow a 3) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow a 3) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* (pow a 2) (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ a (- b_2 (* b_2 (sqrt -1)))))","(- (+ b_2 (* c (- (* 1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(- (+ b_2 (* c (- (* c (- (* -1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(- (* c (- (* -1/8 (/ (* (pow a 2) c) (* (pow b_2 3) (sqrt -1)))) (* -1/2 (/ a (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow a 2) (* (pow b_2 3) (sqrt -1)))))) (* -1/2 (/ a (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(+ (* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a)) (* 1/2 (/ c (* b_2 (sqrt -1)))))","(+ (* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a)) (* c (+ (* -1/8 (/ (* a c) (* (pow b_2 3) (sqrt -1)))) (* 1/2 (/ 1 (* b_2 (sqrt -1)))))))","(+ (* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a)) (* c (+ (* c (+ (* -1/8 (/ a (* (pow b_2 3) (sqrt -1)))) (* 1/16 (/ (* (pow a 2) c) (* (pow b_2 5) (sqrt -1)))))) (* 1/2 (/ 1 (* b_2 (sqrt -1)))))))","(+ (* -1 (/ b_2 (sqrt -1))) (* c (+ (* -1/2 (/ a (* b_2 (sqrt -1)))) (* 1/8 (/ (* (pow a 2) c) (* (pow b_2 3) (sqrt -1)))))))","(+ (* -1 (/ b_2 (sqrt -1))) (* c (+ (* -1/2 (/ a (* b_2 (sqrt -1)))) (* c (+ (* -1/16 (/ (* (pow a 3) c) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow a 2) (* (pow b_2 3) (sqrt -1)))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) c)","(/ (- (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow c 2)))) (/ b_2 (pow (sqrt -1) 2))) c)","(/ (- (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (/ (* (pow b_2 3) (pow c 2)) (* a (pow (sqrt -1) 2)))) (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (pow c 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3))) (/ b_2 (pow (sqrt -1) 2))))) c)","(* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (* -1 (/ b_2 c)) (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))))","(* c (- (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (/ b_2 c))))","(* c (- (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 c)))))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1))))))","(* c (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1))))))))","(* c (+ a (/ (pow b_2 2) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 4)))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1/2 (* (sqrt (/ c a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ c a)) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* -1 (/ (* b_2 c) (pow (sqrt -1) 4)))) c))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (* (pow b_2 3) c) (* a (pow (sqrt -1) 6)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 5))))) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 5))))) c)) (* -1 (/ (* b_2 c) (pow (sqrt -1) 4)))) c))) c))","(* -1 (* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(* -1 (* c (- (/ b_2 c) (* -1 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) b_2) c)) (* -1 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* -1/2 (* (sqrt (/ c a)) (/ (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* -1 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))"]],"series":[[5.216064453125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (/ -1/2 b_2)) (/ -1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (* (/ b_2 a) -2) (/ 1 (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))))) (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (/ (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) a) (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2))))) (+ (* c a) (* b_2 b_2)))","c","-inf"],[4.862060546875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (/ -1/2 b_2)) (/ -1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (* (/ b_2 a) -2) (/ 1 (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))))) (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (/ (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) a) (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2))))) (+ (* c a) (* b_2 b_2)))","c","inf"],[4.43310546875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (/ -1/2 b_2)) (/ -1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (* (/ b_2 a) -2) (/ 1 (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))))) (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (/ (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) a) (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2))))) (+ (* c a) (* b_2 b_2)))","c","0"],[8.02099609375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (/ -1/2 b_2)) (/ -1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (* (/ b_2 a) -2) (/ 1 (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))))) (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (/ (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) a) (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2))))) (+ (* c a) (* b_2 b_2)))","b_2","-inf"],[6.2978515625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (/ -1/2 b_2)) (/ -1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (* (/ b_2 a) -2) (/ 1 (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))))) (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (/ (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) a) (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2))))) (+ (* c a) (* b_2 b_2)))","b_2","inf"],[4.557861328125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (/ -1/2 b_2)) (/ -1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (* (/ b_2 a) -2) (/ 1 (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))))) (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (/ (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) a) (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2))))) (+ (* c a) (* b_2 b_2)))","b_2","0"],[5.196044921875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (/ -1/2 b_2)) (/ -1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (* (/ b_2 a) -2) (/ 1 (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))))) (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (/ (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) a) (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2))))) (+ (* c a) (* b_2 b_2)))","a","-inf"],[7.10693359375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (/ -1/2 b_2)) (/ -1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (* (/ b_2 a) -2) (/ 1 (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))))) (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (/ (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) a) (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2))))) (+ (* c a) (* b_2 b_2)))","a","inf"],[4.177001953125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (/ -1/2 b_2)) (/ -1/2 b_2) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/ 1/2 b_2) (* (/ b_2 a) -2) (/ 1 (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))))) (/ a (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (- b_2 (sqrt (neg (+ (* c a) (* b_2 b_2))))) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) (/ (- (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2)))))) a) (neg b_2) (/ (neg (+ (* c a) (* b_2 b_2))) (sqrt (neg (+ (* c a) (* b_2 b_2))))) (+ (* c a) (* b_2 b_2)))","a","0"]],"time":57.94091796875,"type":"series"},{"count":[[257,257]],"egraph":[[0,8304,8539,0.096034416],[1,4873,8838,0.032369096],[0,1437,9225,0.017573187]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/ -2 a)","(/ (- b_2 (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) (* b_2 (sqrt -1))) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) (* b_2 (sqrt -1))) a)","(/ a (- b_2 (* b_2 (sqrt -1))))","(* a (+ (* 1/2 (/ (* a (* c (sqrt -1))) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (/ 1 (- b_2 (* b_2 (sqrt -1))))))","(* a (+ (* a (- (* -1 (* a (+ (* -1/4 (/ (* (pow c 2) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* c (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ 1 (- b_2 (* b_2 (sqrt -1))))))","(* a (+ (* a (- (* a (- (* -1 (* a (+ (* -1/16 (/ (* (pow c 3) (sqrt -1)) (* (pow b_2 5) (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (+ (* 1/16 (/ (* (pow c 3) (pow (sqrt -1) 2)) (* (pow b_2 4) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/2 (/ (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow c 2) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* b_2 (- b_2 (* b_2 (sqrt -1)))))))))) (+ (* -1/4 (/ (* (pow c 2) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* c (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ 1 (- b_2 (* b_2 (sqrt -1))))))","(- b_2 (* b_2 (sqrt -1)))","(- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1)))","(- (+ b_2 (* a (- (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(- (+ b_2 (* a (- (* a (- (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(- (* 1/2 (/ (* a c) (* b_2 (sqrt -1)))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(- (* a (- (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 3) (sqrt -1)))) (* -1/2 (/ c (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow c 2) (* (pow b_2 3) (sqrt -1)))))) (* -1/2 (/ c (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a))","(/ (+ (* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1))))) (* 1/2 (/ (* a c) (* b_2 (sqrt -1))))) a)","(/ (+ (* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1))))) (* a (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 3) (sqrt -1)))) (* 1/2 (/ c (* b_2 (sqrt -1))))))) a)","(/ (+ (* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1))))) (* a (+ (* 1/2 (/ c (* b_2 (sqrt -1)))) (* a (+ (* -1/8 (/ (pow c 2) (* (pow b_2 3) (sqrt -1)))) (* 1/16 (/ (* a (pow c 3)) (* (pow b_2 5) (sqrt -1))))))))) a)","(* -1 (/ b_2 (sqrt -1)))","(+ (* -1 (/ b_2 (sqrt -1))) (* -1/2 (/ (* a c) (* b_2 (sqrt -1)))))","(+ (* -1 (/ b_2 (sqrt -1))) (* a (+ (* -1/2 (/ c (* b_2 (sqrt -1)))) (* 1/8 (/ (* a (pow c 2)) (* (pow b_2 3) (sqrt -1)))))))","(+ (* -1 (/ b_2 (sqrt -1))) (* a (+ (* -1/2 (/ c (* b_2 (sqrt -1)))) (* a (+ (* -1/16 (/ (* a (pow c 3)) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow c 2) (* (pow b_2 3) (sqrt -1)))))))))","(pow b_2 2)","(+ (* a c) (pow b_2 2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow a 2)))) (/ b_2 (* c (pow (sqrt -1) 2))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 2)))) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (pow a 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3))) (/ b_2 (* c (pow (sqrt -1) 2))))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (* a c)) (/ 1 (sqrt -1)))","(* a (- (* -1 (/ b_2 a)) (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))))","(* a (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (/ b_2 a))))","(* a (- (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 a)))))","(* (sqrt (/ c a)) (/ 1 (sqrt -1)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1)))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))))","(* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1))))","(* a (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(* a (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))))))","(* a (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1))))))))","(* a c)","(* a (+ c (/ (pow b_2 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(* (sqrt (/ a c)) (/ 1 (sqrt -1)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -1))) (/ b_2 (* c (pow (sqrt -1) 4))))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ a (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* 1/2 (* (sqrt (/ a (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (/ (* a b_2) (* c (pow (sqrt -1) 4)))) a)) (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/2 (/ (* a (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 6)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) a)) (/ (* a b_2) (* c (pow (sqrt -1) 4)))) a)) (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(* (sqrt (* a c)) (pow (sqrt -1) 3))","(* -1 (* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(* -1 (* a (- (/ b_2 a) (* -1 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) b_2) a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* -1/2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))) a))) a)))","(* -1 (* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))))","(* -1 (* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* -1 (* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(* -1/2 (/ c b_2))","(/ -1/2 b_2)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ 1/2 b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (- (* -1 (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (sqrt -1)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (- (* b_2 (- (* b_2 (- (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -1) 2))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (sqrt -1)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (sqrt -1))))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (sqrt -1)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(- b_2 (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (* b_2 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(- (* b_2 (+ 1 (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(- (* -1 b_2) (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))))","(- (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))))","(- (* b_2 (- (* b_2 (- (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(* -1 b_2)","(+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))))","(+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1)))))))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(/ (* b_2 (- 1 (sqrt -1))) a)","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (/ 1 a)) (/ (sqrt -1) a)))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a))) (/ (sqrt -1) a)))","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a)))) (/ (sqrt -1) a)))","(/ a (* b_2 (- 1 (sqrt -1))))","(/ (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (- 1 (sqrt -1)) 2)))) (/ a (- 1 (sqrt -1)))) b_2)","(/ (- (+ (* -1 (/ (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (pow (- 1 (sqrt -1)) 3))) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow (- 1 (sqrt -1)) 2)))) (pow b_2 4))) (/ a (- 1 (sqrt -1)))) (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (- 1 (sqrt -1)) 2))))) b_2)","(/ (- (+ (* -1 (/ (+ (* -1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow (- 1 (sqrt -1)) 2))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (pow (sqrt -1) 2))) (pow (- 1 (sqrt -1)) 3))) (* 1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (pow (- 1 (sqrt -1)) 3))) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow (- 1 (sqrt -1)) 2))))))) (- 1 (sqrt -1)))))) (pow b_2 6))) (/ a (- 1 (sqrt -1)))) (+ (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (- 1 (sqrt -1)) 2)))) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (* (pow b_2 4) (pow (- 1 (sqrt -1)) 3)))) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (- 1 (sqrt -1)) 2))))))) b_2)","(* b_2 (- 1 (sqrt -1)))","(* b_2 (- (+ 1 (* -1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))) (sqrt -1)))","(* b_2 (- (+ 1 (* 1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4)))) (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (- (+ 1 (* -1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6)))) (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* b_2 (- (/ 1 (sqrt -1)) 1))","(* b_2 (- (+ (* 1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1))) 1))","(* b_2 (- (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (/ 1 (sqrt -1))) (+ 1 (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (/ 1 (sqrt -1))) (+ 1 (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))))))","(* -1 (/ (* b_2 (- 1 (/ 1 (sqrt -1)))) a))","(* b_2 (+ (* -1 (/ (- 1 (/ 1 (sqrt -1))) a)) (* 1/2 (/ c (* (pow b_2 2) (sqrt -1))))))","(* b_2 (+ (* -1 (/ (- 1 (/ 1 (sqrt -1))) a)) (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))))))","(* b_2 (+ (* -1 (/ (- 1 (/ 1 (sqrt -1))) a)) (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (* 1/2 (/ c (* (pow b_2 2) (sqrt -1))))))))","(* b_2 (- (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1))))","(* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))) (/ 1 (sqrt -1))))","(* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))))) (/ 1 (sqrt -1))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(/ (* b_2 (+ 1 (sqrt -1))) a)","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))))","(/ a (* b_2 (+ 1 (sqrt -1))))","(* -1 (/ (+ (* -1 (/ a (+ 1 (sqrt -1)))) (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))) b_2))","(* -1 (/ (+ (* -1 (/ a (+ 1 (sqrt -1)))) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 3)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))) b_2))","(* -1 (/ (+ (* -1 (/ a (+ 1 (sqrt -1)))) (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (pow (+ 1 (sqrt -1)) 3))) (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))))))) (* (pow b_2 6) (+ 1 (sqrt -1))))) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 3)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (* (pow b_2 6) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (pow (sqrt -1) 2))) (* (pow b_2 6) (pow (+ 1 (sqrt -1)) 3)))) (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2)))))))))) b_2))","(* b_2 (+ 1 (sqrt -1)))","(* -1 (* b_2 (- (* -1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))) (+ 1 (sqrt -1)))))","(* -1 (* b_2 (- (* 1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ 1 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -1 (* b_2 (- (* -1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -1 (* b_2 (+ 1 (/ 1 (sqrt -1)))))","(* -1 (* b_2 (+ 1 (+ (* 1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1))))))","(* -1 (* b_2 (- (+ 1 (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (/ 1 (sqrt -1)))) (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))))))","(* -1 (* b_2 (- (+ 1 (+ (* 1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (/ 1 (sqrt -1)))) (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))))))","(* -1 (/ (* b_2 (+ 1 (/ 1 (sqrt -1)))) a))","(* -1 (* b_2 (+ (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))) (+ (/ 1 a) (/ 1 (* a (sqrt -1)))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))) (+ (/ 1 a) (/ 1 (* a (sqrt -1))))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))) (+ (/ 1 a) (/ 1 (* a (sqrt -1)))))))))","(/ b_2 (sqrt -1))","(* -1 (* b_2 (- (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1)))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))) (/ 1 (sqrt -1)))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))))) (/ 1 (sqrt -1)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(- (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (/ a (- b_2 (* b_2 (sqrt -1)))))","(+ (* c (- (* -1 (* c (+ (* -1/4 (/ (* (pow a 3) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow a 3) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* (pow a 2) (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ a (- b_2 (* b_2 (sqrt -1)))))","(+ (* c (- (* c (- (* -1 (* c (+ (* -1/16 (/ (* (pow a 4) (sqrt -1)) (* (pow b_2 5) (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (+ (* 1/16 (/ (* (pow a 4) (pow (sqrt -1) 2)) (* (pow b_2 4) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/2 (/ (* a (* (sqrt -1) (+ (* -1/4 (/ (* (pow a 3) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow a 3) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* b_2 (- b_2 (* b_2 (sqrt -1)))))))))) (+ (* -1/4 (/ (* (pow a 3) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow a 3) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* (pow a 2) (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ a (- b_2 (* b_2 (sqrt -1)))))","(- (+ b_2 (* c (- (* 1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(- (+ b_2 (* c (- (* c (- (* -1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(- (* c (- (* -1/8 (/ (* (pow a 2) c) (* (pow b_2 3) (sqrt -1)))) (* -1/2 (/ a (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow a 2) (* (pow b_2 3) (sqrt -1)))))) (* -1/2 (/ a (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(+ (* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a)) (* 1/2 (/ c (* b_2 (sqrt -1)))))","(+ (* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a)) (* c (+ (* -1/8 (/ (* a c) (* (pow b_2 3) (sqrt -1)))) (* 1/2 (/ 1 (* b_2 (sqrt -1)))))))","(+ (* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a)) (* c (+ (* c (+ (* -1/8 (/ a (* (pow b_2 3) (sqrt -1)))) (* 1/16 (/ (* (pow a 2) c) (* (pow b_2 5) (sqrt -1)))))) (* 1/2 (/ 1 (* b_2 (sqrt -1)))))))","(+ (* -1 (/ b_2 (sqrt -1))) (* c (+ (* -1/2 (/ a (* b_2 (sqrt -1)))) (* 1/8 (/ (* (pow a 2) c) (* (pow b_2 3) (sqrt -1)))))))","(+ (* -1 (/ b_2 (sqrt -1))) (* c (+ (* -1/2 (/ a (* b_2 (sqrt -1)))) (* c (+ (* -1/16 (/ (* (pow a 3) c) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow a 2) (* (pow b_2 3) (sqrt -1)))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) c)","(/ (- (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow c 2)))) (/ b_2 (pow (sqrt -1) 2))) c)","(/ (- (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (/ (* (pow b_2 3) (pow c 2)) (* a (pow (sqrt -1) 2)))) (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (pow c 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3))) (/ b_2 (pow (sqrt -1) 2))))) c)","(* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (* -1 (/ b_2 c)) (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))))","(* c (- (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (/ b_2 c))))","(* c (- (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 c)))))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1))))))","(* c (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1))))))))","(* c (+ a (/ (pow b_2 2) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 4)))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1/2 (* (sqrt (/ c a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ c a)) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* -1 (/ (* b_2 c) (pow (sqrt -1) 4)))) c))) c))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (* (pow b_2 3) c) (* a (pow (sqrt -1) 6)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 5))))) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 5))))) c)) (* -1 (/ (* b_2 c) (pow (sqrt -1) 4)))) c))) c))","(* -1 (* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(* -1 (* c (- (/ b_2 c) (* -1 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) b_2) c)) (* -1 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* -1/2 (* (sqrt (/ c a)) (/ (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* -1 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))"]],"memory":[[6935600,61488768]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b_2 #s(literal 5 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ -2 a)","(/.f64 #s(literal -2 binary64) a)","(/ (- b_2 (* b_2 (sqrt -1))) a)","(/.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(/ (- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1))) a)","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal -1/2 binary64) b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) (* b_2 (sqrt -1))) a)","(/.f64 (-.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(/ (- (+ b_2 (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) (* b_2 (sqrt -1))) a)","(/.f64 (-.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a)","(/ a (- b_2 (* b_2 (sqrt -1))))","(/.f64 a (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))","(* a (+ (* 1/2 (/ (* a (* c (sqrt -1))) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (/ 1 (- b_2 (* b_2 (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (/.f64 #s(literal 1 binary64) (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))) a)","(* a (+ (* a (- (* -1 (* a (+ (* -1/4 (/ (* (pow c 2) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* c (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ 1 (- b_2 (* b_2 (sqrt -1))))))","(*.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 #s(literal -1 binary64) (*.f64 c c))) (*.f64 (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 3 binary64)) (*.f64 b_2 b_2)))) (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 c (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))) a (/.f64 #s(literal 1 binary64) (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))) a)","(* a (+ (* a (- (* a (- (* -1 (* a (+ (* -1/16 (/ (* (pow c 3) (sqrt -1)) (* (pow b_2 5) (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (+ (* 1/16 (/ (* (pow c 3) (pow (sqrt -1) 2)) (* (pow b_2 4) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/2 (/ (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow c 2) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* b_2 (- b_2 (* b_2 (sqrt -1)))))))))) (+ (* -1/4 (/ (* (pow c 2) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* c (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ 1 (- b_2 (* b_2 (sqrt -1))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 #s(literal -1 binary64) (*.f64 c c))) (*.f64 (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 3 binary64)) (*.f64 b_2 b_2))))) (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))))) (neg.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 #s(literal -1 binary64) (*.f64 c c))) (*.f64 (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 3 binary64)) (*.f64 b_2 b_2)))))) a (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 c (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))) a (/.f64 #s(literal 1 binary64) (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))) a)","(- b_2 (* b_2 (sqrt -1)))","(-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(- (+ b_2 (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) (* b_2 (sqrt -1)))","(-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal -1/2 binary64) b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(- (+ b_2 (* a (- (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(-.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(- (+ b_2 (* a (- (* a (- (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* c (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(-.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(* b_2 (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(neg.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))))","(- (* 1/2 (/ (* a c) (* b_2 (sqrt -1)))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 c a) b_2)) (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))))","(- (* a (- (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 3) (sqrt -1)))) (* -1/2 (/ c (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 c b_2) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 3 binary64))))) a (neg.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))))","(- (* a (- (* a (- (* 1/16 (/ (* a (pow c 3)) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow c 2) (* (pow b_2 3) (sqrt -1)))))) (* -1/2 (/ c (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))))) a (*.f64 (/.f64 c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) a (neg.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a))","(neg.f64 (/.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) a))","(/ (+ (* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1))))) (* 1/2 (/ (* a c) (* b_2 (sqrt -1))))) a)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 c a) b_2)) (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) a)","(/ (+ (* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1))))) (* a (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 3) (sqrt -1)))) (* 1/2 (/ c (* b_2 (sqrt -1))))))) a)","(/.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 c b_2) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 3 binary64))))) a (neg.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))))) a)","(/ (+ (* -1 (+ b_2 (* -1 (/ b_2 (sqrt -1))))) (* a (+ (* 1/2 (/ c (* b_2 (sqrt -1)))) (* a (+ (* -1/8 (/ (pow c 2) (* (pow b_2 3) (sqrt -1)))) (* 1/16 (/ (* a (pow c 3)) (* (pow b_2 5) (sqrt -1))))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))))) a (*.f64 (/.f64 c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) a (neg.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))))) a)","(* -1 (/ b_2 (sqrt -1)))","(/.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 (sqrt -1))) (* -1/2 (/ (* a c) (* b_2 (sqrt -1)))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 c a) b_2) (/.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (/ b_2 (sqrt -1))) (* a (+ (* -1/2 (/ c (* b_2 (sqrt -1)))) (* 1/8 (/ (* a (pow c 2)) (* (pow b_2 3) (sqrt -1)))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64))) a (/.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (/ b_2 (sqrt -1))) (* a (+ (* -1/2 (/ c (* b_2 (sqrt -1)))) (* a (+ (* -1/16 (/ (* a (pow c 3)) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow c 2) (* (pow b_2 3) (sqrt -1)))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (/.f64 #s(literal 1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))))) a (*.f64 (/.f64 c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64))) a (/.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64))))","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* a c) (pow b_2 2))","(fma.f64 c a (*.f64 b_2 b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(neg.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(-.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) a)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(+.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64))))","(* 1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(-.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (/.f64 b_2 a)) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (* c (pow (sqrt -1) 2)))))","(-.f64 (*.f64 (/.f64 b_2 c) #s(literal 1 binary64)) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow a 2)))) (/ b_2 (* c (pow (sqrt -1) 2))))","(-.f64 (-.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64))) (*.f64 a a))) (/.f64 b_2 (neg.f64 c)))","(- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 2)))) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (pow a 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3))) (/ b_2 (* c (pow (sqrt -1) 2))))))","(-.f64 (-.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) c) (/.f64 (*.f64 a a) c)))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (/.f64 b_2 (neg.f64 c)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(neg.f64 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* a (- (/ b_2 a) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)) a)","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))) a)","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (-.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (/.f64 b_2 a)) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* (sqrt (* a c)) (/ 1 (sqrt -1)))","(/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (- (* -1 (/ b_2 a)) (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))))","(*.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 a)) a)","(* a (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (/ b_2 a))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (-.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 a))) a)","(* a (- (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 a)))))","(*.f64 (-.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 a))) a)","(* (sqrt (/ c a)) (/ 1 (sqrt -1)))","(/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(-.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1)))))","(fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (-.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))))","(-.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) (/.f64 b_2 a))","(* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1))))","(neg.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* a (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64))) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1))))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64)))) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a c)","(*.f64 c a)","(* a (+ c (/ (pow b_2 2) a)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) b_2) a))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))))) a)) a))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))) (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))))) a)) a))","(* (sqrt (/ a c)) (/ 1 (sqrt -1)))","(/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -1))) (/ b_2 (* c (pow (sqrt -1) 4))))","(+.f64 (/.f64 b_2 (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) c)) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (/ (- (+ (* -1 (* (sqrt (/ a (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* 1/2 (* (sqrt (/ a (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (/ (* a b_2) (* c (pow (sqrt -1) 4)))) a)) (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64))))) (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (neg.f64 (/.f64 a c)) (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) a))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/2 (/ (* a (pow b_2 3)) (* (pow c 2) (pow (sqrt -1) 6)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) a)) (/ (* a b_2) (* c (pow (sqrt -1) 4)))) a)) (* (sqrt (/ a c)) (/ 1 (sqrt -1))))","(-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) c) (/.f64 a c)) (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/2 binary64) (neg.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/2 binary64) (neg.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))))))))) a) (*.f64 a (/.f64 b_2 (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) c)))) a))","(* (sqrt (* a c)) (pow (sqrt -1) 3))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* a (- (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (neg.f64 b_2) a) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) b_2)) a) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (neg.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))))) a))) a) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(neg.f64 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (- (/ b_2 a) (* -1 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (+.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (- (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) b_2) a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) a) #s(literal -1 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* -1/2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* -1 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (*.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))))) a) b_2) a) #s(literal -1 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) a)) a)))","(* -1 (* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (neg.f64 a) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64)))))","(* -1 (* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))))","(*.f64 (neg.f64 a) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64))))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(*.f64 (neg.f64 a) (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) a))) b_2 (neg.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (neg.f64 (/.f64 #s(literal 1 binary64) a))) b_2 (neg.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/ -1/2 b_2)","(/.f64 #s(literal -1/2 binary64) b_2)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) c)) b_2)","(/ 1/2 b_2)","(/.f64 #s(literal 1/2 binary64) b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) a)) b_2 (neg.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64))) b_2 (/.f64 #s(literal 1 binary64) a)) b_2 (neg.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (- (* -1 (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (sqrt -1)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(fma.f64 (fma.f64 (neg.f64 b_2) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 (/.f64 #s(literal 1 binary64) (neg.f64 c)))) b_2 (neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* b_2 (- (* b_2 (- (* b_2 (- (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -1) 2))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (sqrt -1)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (sqrt -1))))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (sqrt -1)))) (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))))) (/ 1 (* c (pow (sqrt -1) 2))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal -1 binary64) (*.f64 c c)) a)) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))) (sqrt.f64 #s(literal -1 binary64)))) b_2 (neg.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))))) b_2 (neg.f64 (/.f64 #s(literal 1 binary64) (neg.f64 c)))) b_2 (neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(- b_2 (* (sqrt (* a c)) (sqrt -1)))","(-.f64 b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (* b_2 (sqrt -1)))))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))","(- (* b_2 (+ 1 (* b_2 (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/8 binary64) (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))))) b_2 #s(literal 1 binary64)) b_2 (neg.f64 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/16 binary64))) (*.f64 b_2 b_2) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (* -1 b_2) (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))))","(+.f64 (neg.f64 b_2) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) #s(literal -1 binary64)) b_2 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (* b_2 (- (* b_2 (- (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))))) b_2 #s(literal -1 binary64)) b_2 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) a))) b_2 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (neg.f64 (/.f64 #s(literal 1 binary64) a))) b_2 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) (*.f64 b_2 b_2) (neg.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) (*.f64 b_2 b_2) (neg.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (-.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) (/.f64 #s(literal 2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) a))) b_2)","(/ (* b_2 (- 1 (sqrt -1))) a)","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) b_2) a)","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (/ 1 a)) (/ (sqrt -1) a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) a)) b_2)","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a))) (/ (sqrt -1) a)))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (/.f64 #s(literal 1 binary64) a))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) a)) b_2)","(* b_2 (- (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))) (/ 1 a)))) (/ (sqrt -1) a)))","(*.f64 (-.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (/.f64 #s(literal 1 binary64) a)))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) a)) b_2)","(/ a (* b_2 (- 1 (sqrt -1))))","(/.f64 a (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) b_2))","(/ (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (- 1 (sqrt -1)) 2)))) (/ a (- 1 (sqrt -1)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (/.f64 a (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))))) b_2)","(/ (- (+ (* -1 (/ (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (pow (- 1 (sqrt -1)) 3))) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow (- 1 (sqrt -1)) 2)))) (pow b_2 4))) (/ a (- 1 (sqrt -1)))) (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (- 1 (sqrt -1)) 2))))) b_2)","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 c c))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 3 binary64))) #s(literal -1/4 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (/.f64 a (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))))) b_2)","(/ (- (+ (* -1 (/ (+ (* -1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow (- 1 (sqrt -1)) 2))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (pow (sqrt -1) 2))) (pow (- 1 (sqrt -1)) 3))) (* 1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (pow (- 1 (sqrt -1)) 3))) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow (- 1 (sqrt -1)) 2))))))) (- 1 (sqrt -1)))))) (pow b_2 6))) (/ a (- 1 (sqrt -1)))) (+ (* -1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (- 1 (sqrt -1)) 2)))) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (* (pow b_2 4) (pow (- 1 (sqrt -1)) 3)))) (* 1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (- 1 (sqrt -1)) 2))))))) b_2)","(/.f64 (-.f64 (-.f64 (/.f64 a (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) #s(literal -1/16 binary64) (fma.f64 (*.f64 a (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 c c))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 3 binary64))) #s(literal -1/4 binary64)))) (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 3 binary64))) #s(literal 1/16 binary64)))) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 c c))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 3 binary64))))))) b_2)","(* b_2 (- 1 (sqrt -1)))","(*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (- (+ 1 (* -1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))) (sqrt -1)))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1 binary64)) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (- (+ 1 (* 1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4)))) (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64)))) b_2)","(* b_2 (- (+ 1 (* -1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6)))) (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) #s(literal 1 binary64)) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64)))) b_2)","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2)))) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (- (/ 1 (sqrt -1)) 1))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1 binary64)) b_2)","(* b_2 (- (+ (* 1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1))) 1))","(fma.f64 b_2 (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 c (*.f64 b_2 b_2))) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 b_2))","(* b_2 (- (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (/ 1 (sqrt -1))) (+ 1 (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal 1 binary64)))) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (/ 1 (sqrt -1))) (+ 1 (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 c (*.f64 b_2 b_2))) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64)))))) b_2)","(* -1 (/ (* b_2 (- 1 (/ 1 (sqrt -1)))) a))","(neg.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) b_2) a))","(* b_2 (+ (* -1 (/ (- 1 (/ 1 (sqrt -1))) a)) (* 1/2 (/ c (* (pow b_2 2) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 c (*.f64 b_2 b_2)) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) a))) b_2)","(* b_2 (+ (* -1 (/ (- 1 (/ 1 (sqrt -1))) a)) (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 c (*.f64 b_2 b_2)) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) a)) b_2)","(* b_2 (+ (* -1 (/ (- 1 (/ 1 (sqrt -1))) a)) (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (* 1/2 (/ c (* (pow b_2 2) (sqrt -1))))))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 c (*.f64 b_2 b_2)) (*.f64 (/.f64 #s(literal 1/16 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) a)) b_2)","(* b_2 (- (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1))))","(*.f64 (-.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 c (*.f64 b_2 b_2)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) b_2)","(* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))) (/ 1 (sqrt -1))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)) (/.f64 (*.f64 c a) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))))) b_2)","(* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))))) (/ 1 (sqrt -1))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)) (/.f64 (*.f64 c a) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64)))))) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) b_2)","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(*.f64 (fma.f64 a (/.f64 c (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) b_2)","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)))) b_2)","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) (+.f64 c (*.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a))))))) b_2)","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(/ (* b_2 (+ 1 (sqrt -1))) a)","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 b_2) a)","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal -1 binary64)) a)))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2))) (/.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) a)))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) a)))","(/ a (* b_2 (+ 1 (sqrt -1))))","(/.f64 a (fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 b_2))","(* -1 (/ (+ (* -1 (/ a (+ 1 (sqrt -1)))) (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (/.f64 (neg.f64 a) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))))) b_2)","(* -1 (/ (+ (* -1 (/ a (+ 1 (sqrt -1)))) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 3)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))) b_2))","(/.f64 (neg.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (*.f64 (/.f64 #s(literal -1/8 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64)))))) (/.f64 a (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))))) b_2)","(* -1 (/ (+ (* -1 (/ a (+ 1 (sqrt -1)))) (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (pow (+ 1 (sqrt -1)) 3))) (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))))))) (* (pow b_2 6) (+ 1 (sqrt -1))))) (+ (* -1/4 (/ (* (pow a 3) (* (pow c 2) (pow (sqrt -1) 2))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 3)))) (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (* (pow b_2 6) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (pow (sqrt -1) 2))) (* (pow b_2 6) (pow (+ 1 (sqrt -1)) 3)))) (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2)))))))))) b_2))","(/.f64 (neg.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 c c))) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 3 binary64))) #s(literal -1/4 binary64)))) a) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/8 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) (*.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 6 binary64))))))))) (/.f64 a (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))))) b_2)","(* b_2 (+ 1 (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 b_2)","(* -1 (* b_2 (- (* -1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))) (+ 1 (sqrt -1)))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal -1 binary64)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* b_2 (- (* 1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ 1 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) #s(literal -1 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* b_2 (- (* -1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) #s(literal -1 binary64)) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* b_2 (sqrt -1)))","(*.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2)))) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* b_2 (+ 1 (/ 1 (sqrt -1)))))","(neg.f64 (fma.f64 b_2 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) b_2))","(* -1 (* b_2 (+ 1 (+ (* 1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1))))))","(neg.f64 (fma.f64 b_2 (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 c (*.f64 b_2 b_2))) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) b_2))","(* -1 (* b_2 (- (+ 1 (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (/ 1 (sqrt -1)))) (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))))))","(*.f64 (neg.f64 b_2) (+.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 c (*.f64 b_2 b_2)))))))","(* -1 (* b_2 (- (+ 1 (+ (* 1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (/ 1 (sqrt -1)))) (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))))))","(*.f64 (neg.f64 b_2) (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 c (*.f64 b_2 b_2)))))))","(* -1 (/ (* b_2 (+ 1 (/ 1 (sqrt -1)))) a))","(/.f64 (neg.f64 (fma.f64 b_2 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) b_2)) a)","(* -1 (* b_2 (+ (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))) (+ (/ 1 a) (/ 1 (* a (sqrt -1)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 c (*.f64 b_2 b_2)) (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)) (/.f64 #s(literal 1 binary64) a))))","(* -1 (* b_2 (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))) (+ (/ 1 a) (/ 1 (* a (sqrt -1))))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 c (*.f64 b_2 b_2)) (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)) (/.f64 #s(literal 1 binary64) a)))))","(* -1 (* b_2 (+ (* -1/8 (/ (* a (pow c 2)) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (/ c (* (pow b_2 2) (sqrt -1)))) (+ (/ 1 a) (/ 1 (* a (sqrt -1)))))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 c (*.f64 b_2 b_2)) (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) a)) (/.f64 #s(literal 1 binary64) a))))))","(/ b_2 (sqrt -1))","(/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))","(* -1 (* b_2 (- (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (/ 1 (sqrt -1)))))","(*.f64 (neg.f64 b_2) (-.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 c (*.f64 b_2 b_2)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1))))) (/ 1 (sqrt -1)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)) (/.f64 (*.f64 c a) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))))))","(* -1 (* b_2 (- (+ (* -1/2 (/ (* a c) (* (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (/ (* (pow a 3) (pow c 3)) (* (pow b_2 6) (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (pow c 2)) (* (pow b_2 4) (sqrt -1)))))) (/ 1 (sqrt -1)))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)) (/.f64 (*.f64 c a) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (sqrt.f64 #s(literal -1 binary64)))))) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 a (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 a a) c)) (pow.f64 b_2 #s(literal 5 binary64)))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(- (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64) (/.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) #s(literal -1/2 binary64))) c (/.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(- (+ (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))) (/ b_2 a)) (/ (* b_2 (sqrt -1)) a))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64))) c (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) #s(literal -1/2 binary64))) c (/.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) a))","(+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (/ a (- b_2 (* b_2 (sqrt -1)))))","(fma.f64 (*.f64 (*.f64 a a) (*.f64 (/.f64 c (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) #s(literal 1/2 binary64) (/.f64 a (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))))","(+ (* c (- (* -1 (* c (+ (* -1/4 (/ (* (pow a 3) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow a 3) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* (pow a 2) (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ a (- b_2 (* b_2 (sqrt -1)))))","(fma.f64 (fma.f64 (neg.f64 c) (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 (pow.f64 a #s(literal 3 binary64)) b_2)) (*.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64)) b_2)))) c (/.f64 a (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))))","(+ (* c (- (* c (- (* -1 (* c (+ (* -1/16 (/ (* (pow a 4) (sqrt -1)) (* (pow b_2 5) (pow (- b_2 (* b_2 (sqrt -1))) 2)))) (+ (* 1/16 (/ (* (pow a 4) (pow (sqrt -1) 2)) (* (pow b_2 4) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/2 (/ (* a (* (sqrt -1) (+ (* -1/4 (/ (* (pow a 3) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow a 3) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* b_2 (- b_2 (* b_2 (sqrt -1)))))))))) (+ (* -1/4 (/ (* (pow a 3) (pow (sqrt -1) 2)) (* (pow b_2 2) (pow (- b_2 (* b_2 (sqrt -1))) 3)))) (* 1/8 (/ (* (pow a 3) (sqrt -1)) (* (pow b_2 3) (pow (- b_2 (* b_2 (sqrt -1))) 2))))))) (* -1/2 (/ (* (pow a 2) (sqrt -1)) (* b_2 (pow (- b_2 (* b_2 (sqrt -1))) 2)))))) (/ a (- b_2 (* b_2 (sqrt -1)))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 c) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) (/.f64 (*.f64 (*.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 (pow.f64 a #s(literal 3 binary64)) b_2)) (*.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1 binary64))) a) b_2) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 3 binary64)))))) (neg.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 (pow.f64 a #s(literal 3 binary64)) b_2)) (*.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))))))) c (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 2 binary64)) b_2)))) c (/.f64 a (-.f64 b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))))","(- (+ b_2 (* c (- (* 1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(-.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 #s(literal -1/2 binary64) (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))) c b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(- (+ b_2 (* c (- (* c (- (* -1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))) (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) (* b_2 (sqrt -1)))","(-.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))))) c (*.f64 #s(literal -1/2 binary64) (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))) c b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64))) c (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(- (* c (- (* -1/8 (/ (* (pow a 2) c) (* (pow b_2 3) (sqrt -1)))) (* -1/2 (/ a (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (/.f64 a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))) c (neg.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))))","(- (* c (- (* c (- (* 1/16 (/ (* (pow a 3) c) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow a 2) (* (pow b_2 3) (sqrt -1)))))) (* -1/2 (/ a (* b_2 (sqrt -1)))))) (+ b_2 (* -1 (/ b_2 (sqrt -1)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 #s(literal -1/8 binary64) (*.f64 (/.f64 a (sqrt.f64 #s(literal -1 binary64))) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))))) c (*.f64 #s(literal 1/2 binary64) (/.f64 a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)))) c (neg.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))))","(+ (* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a)) (* 1/2 (/ c (* b_2 (sqrt -1)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 c b_2) (neg.f64 (/.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a)) (* c (+ (* -1/8 (/ (* a c) (* (pow b_2 3) (sqrt -1)))) (* 1/2 (/ 1 (* b_2 (sqrt -1)))))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) c (neg.f64 (/.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) a)))","(+ (* -1 (/ (+ b_2 (* -1 (/ b_2 (sqrt -1)))) a)) (* c (+ (* c (+ (* -1/8 (/ a (* (pow b_2 3) (sqrt -1)))) (* 1/16 (/ (* (pow a 2) c) (* (pow b_2 5) (sqrt -1)))))) (* 1/2 (/ 1 (* b_2 (sqrt -1)))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))))) c (/.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))) c (neg.f64 (/.f64 (-.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) a)))","(+ (* -1 (/ b_2 (sqrt -1))) (* c (+ (* -1/2 (/ a (* b_2 (sqrt -1)))) (* 1/8 (/ (* (pow a 2) c) (* (pow b_2 3) (sqrt -1)))))))","(fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 a b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 a a) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) c (/.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (/ b_2 (sqrt -1))) (* c (+ (* -1/2 (/ a (* b_2 (sqrt -1)))) (* c (+ (* -1/16 (/ (* (pow a 3) c) (* (pow b_2 5) (sqrt -1)))) (* 1/8 (/ (pow a 2) (* (pow b_2 3) (sqrt -1)))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 a a)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) c (*.f64 (/.f64 a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64))) c (/.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) (*.f64 c a))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (+.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/8 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64)))) c)","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(*.f64 (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/8 binary64) (/.f64 (/.f64 b_2 a) c)))) c)","(/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) c)","(/.f64 (-.f64 (/.f64 (neg.f64 b_2) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) c)","(/ (- (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (pow c 2)))) (/ b_2 (pow (sqrt -1) 2))) c)","(/.f64 (-.f64 (-.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))) (*.f64 c c))) (/.f64 b_2 #s(literal -1 binary64))) c)","(/ (- (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (+ (* -1/2 (/ (* (pow b_2 3) (pow c 2)) (* a (pow (sqrt -1) 2)))) (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3))))) (sqrt -1)))) (pow c 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (+ (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (pow (sqrt -1) 3))) (/ b_2 (pow (sqrt -1) 2))))) c)","(/.f64 (-.f64 (-.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 c c)) a))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (/.f64 b_2 #s(literal -1 binary64))))) c)","(* c (- (/ b_2 c) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (-.f64 (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (-.f64 (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/8 binary64) (/.f64 b_2 c)) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (* -1 (/ b_2 c)) (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 b_2 c) #s(literal -1 binary64) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (- (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (/ b_2 c))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 b_2 c)) c)","(* c (- (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (/ b_2 c)))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 c))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))","(*.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (/.f64 b_2 a) c)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1))))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (/.f64 b_2 a) c)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))))) (/.f64 (/.f64 b_2 a) c)) c)","(* c (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/8 binary64))) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1))))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/16 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/8 binary64)))) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ a (/ (pow b_2 2) c)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) a)) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) c)) c))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b_2 a) c) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) b_2)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 (/.f64 b_2 a) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 a)) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) c)) c))))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 4)))) c))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (neg.f64 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1/2 (* (sqrt (/ c a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ c a)) (/ (pow b_2 2) (pow (sqrt -1) 5)))) (* -1 (/ (* b_2 c) (pow (sqrt -1) 4)))) c))) c))","(/.f64 (neg.f64 (-.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 b_2 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) c))) c)","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ (- (* -1 (/ (- (+ (* -1/2 (/ (* (pow b_2 3) c) (* a (pow (sqrt -1) 6)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 5))))) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* (sqrt (/ (pow c 3) a)) (/ (pow b_2 2) (pow (sqrt -1) 5))))) c)) (* -1 (/ (* b_2 c) (pow (sqrt -1) 4)))) c))) c))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (/.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) c) a) (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (/.f64 (*.f64 b_2 b_2) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))))))) c) #s(literal -1 binary64) (*.f64 b_2 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) c) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* -1 (* c (- (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (neg.f64 b_2) c) (*.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) b_2)) c) (*.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* c (- (* -1 (/ (+ b_2 (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (neg.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))))) c))) c) (*.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))))))","(* -1 (* c (- (/ b_2 c) (* -1 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (+.f64 (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (- (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) b_2) c)) (* -1 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) c) #s(literal -1 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* -1/2 (* (sqrt (/ c a)) (/ (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* -1 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))) c) b_2) c) #s(literal -1 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (neg.f64 c) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) a)) c)))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))))) c)) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (neg.f64 c) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/8 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))))","(*.f64 (neg.f64 c) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) #s(literal -1/16 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/8 binary64))))))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(*.f64 (neg.f64 c) (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a)))"]],"stop":[["iter limit",1],["node limit",1]],"time":274.468994140625,"type":"simplify"},{"count":[[19,837]],"egraph":[[0,8795,178,0.085494618],[2,1669,178,0.02810721],[1,228,192,0.005629959],[0,57,196,0.001754046],[0,36,204,0.000334611]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","(/.f64 #s(literal -1/2 binary64) b_2)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -2 binary64) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(literal 1/2 binary64) b_2)","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","(neg.f64 b_2)","(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 c a (*.f64 b_2 b_2))"]],"memory":[[4424800,70593648]],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c))","(*.f64 (/.f64 c #s(literal -2 binary64)) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 c #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c)","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) c))","(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) c)) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) c) (*.f64 #s(literal -2 binary64) b_2))","(/.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) b_2))","(/.f64 (neg.f64 c) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 #s(literal 1/2 binary64) c) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c))))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) c)))","(/.f64 c (*.f64 #s(literal -2 binary64) b_2))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (pow.f64 b_2 #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) b_2))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 b_2))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 b_2)))","(/.f64 #s(literal -1/2 binary64) b_2)","(neg.f64 (/.f64 #s(literal 1/2 binary64) b_2))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 b_2 #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) a))","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) b_2))","(*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b_2) a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(pow.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 2 binary64) b_2)) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) b_2)) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 a #s(literal -1/2 binary64)))","(/.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 a #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) a)","(/.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a))","(/.f64 #s(literal 2 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (neg.f64 b_2) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 #s(literal -2 binary64) (/.f64 a b_2))","(/.f64 b_2 (*.f64 a #s(literal -1/2 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) a))","(*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal 2 binary64) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 a #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 a #s(literal -1/2 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -2 binary64) a)","(neg.f64 (/.f64 #s(literal 2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 a #s(literal -1/2 binary64))) #s(literal -1 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 c b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 c b_2) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 c b_2) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 c b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 c b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 c b_2) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 b_2 (*.f64 #s(literal -2 binary64) b_2)))) (neg.f64 (*.f64 b_2 a)))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) b_2 (*.f64 a (*.f64 #s(literal 1/2 binary64) c)))) (neg.f64 (*.f64 a b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))) (*.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) #s(literal -2 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (neg.f64 b_2)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) a (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (/.f64 a b_2) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal -2 binary64))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (/.f64 a b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) b_2)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) #s(literal -2 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (neg.f64 b_2)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) a (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) a))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (/.f64 a b_2) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal -2 binary64))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (/.f64 a b_2)))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) b_2)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 (neg.f64 b_2) #s(literal -2 binary64)))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) (neg.f64 b_2)))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a) (*.f64 (neg.f64 b_2) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) a (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (neg.f64 b_2) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (/.f64 a b_2) (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (*.f64 (neg.f64 b_2) (/.f64 a b_2)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) b_2)) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (neg.f64 a) (*.f64 b_2 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (neg.f64 a) (*.f64 b_2 (*.f64 #s(literal 2 binary64) b_2))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 (*.f64 #s(literal 1 binary64) b_2))) (*.f64 b_2 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (neg.f64 a) (*.f64 b_2 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 b_2 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (neg.f64 a) (*.f64 b_2 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (neg.f64 a) (*.f64 b_2 (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 b_2 (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 #s(literal 1 binary64))) (*.f64 b_2 (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (/.f64 a b_2) (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 (/.f64 a b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 b_2)) (*.f64 b_2 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 (neg.f64 b_2) #s(literal -2 binary64)))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) (neg.f64 b_2)))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a) (*.f64 (neg.f64 b_2) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) a (*.f64 (neg.f64 b_2) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (neg.f64 b_2) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 a) (*.f64 (neg.f64 b_2) (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (neg.f64 b_2) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (neg.f64 b_2) (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (*.f64 (neg.f64 b_2) (/.f64 a b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) b_2)) (*.f64 (neg.f64 b_2) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (neg.f64 b_2) #s(literal -2 binary64)))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal -2 binary64) (neg.f64 b_2)))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) #s(literal 1 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (+.f64 (/.f64 a b_2) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) #s(literal -2 binary64))) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (/.f64 a b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) b_2)) (*.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 c) a (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) #s(literal -2 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 c) a (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 c (*.f64 a #s(literal -1/2 binary64)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 c) a (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (neg.f64 b_2)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 c (*.f64 a #s(literal -1/2 binary64)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal 1 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 c) a (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 c a (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) b_2))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) a))","(/.f64 (fma.f64 (neg.f64 c) a (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal 2 binary64)))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 c (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (fma.f64 c (/.f64 a b_2) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal -2 binary64))) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (/.f64 a b_2)))","(/.f64 (fma.f64 c (*.f64 a #s(literal -1/2 binary64)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) b_2)) (*.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) c))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 c #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (neg.f64 b_2) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) b_2 (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) c))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 c #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 b_2) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) b_2 (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 c #s(literal 1 binary64)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) c)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) c))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 c #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (neg.f64 b_2) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) b_2 (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 c #s(literal 1 binary64)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) b_2))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (neg.f64 b_2) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) c)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) c))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 c #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 b_2) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) b_2 (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a (*.f64 #s(literal 1 binary64) c))) (*.f64 a (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 a (*.f64 c #s(literal 1 binary64)))) (*.f64 a (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 b_2) (*.f64 a (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 a (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (neg.f64 b_2) (*.f64 a (*.f64 #s(literal -1/2 binary64) c))) (*.f64 a (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 c a)) (*.f64 a (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) c))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) (*.f64 c #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 b_2) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 2 binary64)) b_2 (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (neg.f64 a) b_2))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 b_2) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (neg.f64 a) (neg.f64 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 2 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 #s(literal 1 binary64) c))) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 c #s(literal 1 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) b_2 (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) b_2))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b_2) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) c)) (*.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (/.f64 a b_2) (*.f64 #s(literal 1 binary64) c))) (*.f64 (/.f64 a b_2) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (/.f64 a b_2) (*.f64 c #s(literal 1 binary64)))) (*.f64 (/.f64 a b_2) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 b_2) (*.f64 (/.f64 a b_2) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (/.f64 a b_2) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) b_2 (*.f64 (/.f64 a b_2) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (/.f64 a b_2) b_2))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 b_2) (*.f64 (/.f64 a b_2) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (/.f64 a b_2) (neg.f64 b_2)))","(/.f64 (fma.f64 #s(literal -2 binary64) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (/.f64 a b_2) #s(literal 1 binary64))) (*.f64 (/.f64 a b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (/.f64 a b_2) c)) (*.f64 (/.f64 a b_2) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 b_2 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 b_2 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 c #s(literal 1 binary64)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) c)))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 b_2 b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) b_2))","(/.f64 (fma.f64 (neg.f64 b_2) b_2 (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) c))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (neg.f64 b_2)))","(/.f64 (fma.f64 b_2 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 b_2 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) c)) (*.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64))) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 c b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal -2 binary64)) (/.f64 b_2 a))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 c b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 c b_2) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) a (*.f64 b_2 (*.f64 #s(literal -2 binary64) b_2))) (*.f64 b_2 a))","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) b_2 (*.f64 a (*.f64 #s(literal 1/2 binary64) c))) (*.f64 a b_2))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 c b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal -2 binary64)) (/.f64 b_2 a)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 c b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 c b_2) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 c b_2) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 c b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a))) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 c b_2) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 c b_2) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 3 binary64)))))","(fma.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (/.f64 b_2 #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 c #s(literal 2 binary64)) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) b_2) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b_2) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 (/.f64 b_2 a) #s(literal -2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) c) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -2 binary64) a) b_2 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 #s(literal -2 binary64) (/.f64 b_2 a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c #s(literal -1 binary64)) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 c (/.f64 #s(literal 1/2 binary64) b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(fma.f64 b_2 (/.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))) (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) #s(literal 2 binary64)) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))) (/.f64 (pow.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b_2 a)))))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(+.f64 (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) b_2))","(*.f64 #s(literal 1/2 binary64) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 b_2 #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 b_2)))","(/.f64 #s(literal 1/2 binary64) b_2)","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 b_2))","(neg.f64 (/.f64 #s(literal -1/2 binary64) b_2))","(exp.f64 (*.f64 (log.f64 (*.f64 b_2 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 b_2 #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) a))","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) b_2))","(*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b_2) a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(pow.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 2 binary64) b_2)) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) b_2)) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 a #s(literal -1/2 binary64)))","(/.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 a #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) a)","(/.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a))","(/.f64 #s(literal 2 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 (neg.f64 b_2) (neg.f64 (*.f64 a #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 #s(literal -2 binary64) (/.f64 a b_2))","(/.f64 b_2 (*.f64 a #s(literal -1/2 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(*.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(pow.f64 (exp.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64))","(pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -3 binary64)) (pow.f64 (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)))) (*.f64 (/.f64 b_2 a) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -3 binary64)) (pow.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 #s(literal 1 binary64)) a) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) a) (*.f64 (neg.f64 (neg.f64 a)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 (neg.f64 a)) a))","(/.f64 (-.f64 (neg.f64 a) (*.f64 (neg.f64 (/.f64 a b_2)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 (/.f64 a b_2)) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (/.f64 a b_2) #s(literal 1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 (/.f64 a b_2) #s(literal 1 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 a b_2) a))","(/.f64 (-.f64 (*.f64 b_2 a) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 b_2 #s(literal 1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 a))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 a) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(fma.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 (neg.f64 a)) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 (neg.f64 a)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 (neg.f64 b_2) (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (neg.f64 b_2) (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a) (/.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a) (/.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(-.f64 (/.f64 b_2 a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal -1 binary64)))","(+.f64 (/.f64 b_2 a) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64))))","(+.f64 (/.f64 b_2 a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))))","(*.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(*.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) a)","(*.f64 (neg.f64 a) (pow.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 a) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 a (/.f64 (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 a (pow.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 a #s(literal 1 binary64))) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 a))) (neg.f64 (neg.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (*.f64 a #s(literal 1 binary64)) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (neg.f64 a)) (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (neg.f64 (neg.f64 a)) (neg.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (/.f64 (neg.f64 a) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64))","(/.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 a) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(/.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(/.f64 a (*.f64 #s(literal 1 binary64) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(neg.f64 (/.f64 (neg.f64 a) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (/.f64 a (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (/.f64 (neg.f64 a) (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)) #s(literal -1 binary64)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (-.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))))","(fma.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) b_2)","(fma.f64 (/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) b_2)","(fma.f64 (/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(fma.f64 (/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) b_2)","(fma.f64 (/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(fma.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) b_2)","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) b_2)","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2)","(fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2)","(fma.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) b_2)","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) b_2)","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) b_2)","(fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) b_2)","(+.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (-.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))","(neg.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (*.f64 c a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (*.f64 (neg.f64 a) c) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fabs.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 b_2)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (neg.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b_2) b_2) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) b_2) (*.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 b_2) b_2))) (*.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) (*.f64 (+.f64 #s(literal 0 binary64) b_2) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b_2) b_2) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b_2) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))))","(neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(fma.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 b_2))","(fma.f64 (/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (neg.f64 b_2))","(fma.f64 (/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))","(fma.f64 (/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (neg.f64 b_2))","(fma.f64 (/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))","(fma.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (neg.f64 b_2))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (neg.f64 b_2))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 b_2))","(fma.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 b_2))","(fma.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fma.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (neg.f64 b_2))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 b_2))","(fma.f64 b_2 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(*.f64 (pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(pow.f64 (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -3 binary64)) (pow.f64 (neg.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (neg.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (*.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 a b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (neg.f64 (*.f64 a a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) a) (*.f64 (neg.f64 a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (neg.f64 a) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (neg.f64 a) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 a) (*.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (*.f64 a (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 a (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b_2)) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (neg.f64 a)) (*.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (*.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 a (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a (*.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (*.f64 a (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 a (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (neg.f64 b_2)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 a (neg.f64 b_2)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 a (neg.f64 b_2)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 a (neg.f64 b_2)) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (*.f64 (/.f64 a (neg.f64 b_2)) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (/.f64 a (neg.f64 b_2)) (*.f64 a (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 a (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (neg.f64 b_2)) #s(literal 1 binary64))) (*.f64 (/.f64 a (neg.f64 b_2)) (*.f64 a (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 (/.f64 a (neg.f64 b_2)) #s(literal 1 binary64))) (*.f64 (/.f64 a (neg.f64 b_2)) (/.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 a))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(/.f64 (-.f64 (pow.f64 (/.f64 a b_2) #s(literal -3 binary64)) (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (*.f64 a (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (*.f64 (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (*.f64 a a))","(/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 a (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(neg.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (neg.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(fma.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(-.f64 (/.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))) (/.f64 (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (/.f64 b_2 a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 a b_2) #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))) (/.f64 (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 2 binary64)) (*.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 a (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (*.f64 a (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) a) (/.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) a))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a) (/.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 b_2 (fma.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))","(-.f64 (/.f64 (*.f64 (neg.f64 b_2) a) (*.f64 a a)) (/.f64 (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a a)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a))","(-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (neg.f64 b_2) a) (neg.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 0 binary64) (neg.f64 b_2)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(/.f64 (*.f64 (neg.f64 b_2) b_2) (+.f64 #s(literal 0 binary64) b_2))","(/.f64 (*.f64 b_2 b_2) (neg.f64 (+.f64 #s(literal 0 binary64) b_2)))","(neg.f64 b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 #s(literal 0 binary64) b_2)))","(-.f64 #s(literal 0 binary64) b_2)","(+.f64 #s(literal 0 binary64) (neg.f64 b_2))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (-.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64)))","(neg.f64 (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (*.f64 (neg.f64 b_2) b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (*.f64 c a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (*.f64 (neg.f64 a) c) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(fabs.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (*.f64 c a) (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 #s(literal 1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(pow.f64 (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (neg.f64 (*.f64 (neg.f64 a) c)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (neg.f64 (*.f64 (neg.f64 a) c)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(neg.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 c a))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 c a))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (*.f64 c a))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 c a))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 c a))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 c a))","(fma.f64 c a (*.f64 b_2 b_2))","(fma.f64 a c (*.f64 b_2 b_2))","(fma.f64 b_2 b_2 (*.f64 c a))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 b_2 b_2))","(+.f64 (*.f64 c a) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 c a))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":319.677001953125,"type":"rewrite"},{"compiler":[[43203,5023]],"memory":[[4864848,95287664]],"time":172.47314453125,"type":"eval"},{"alts":[["(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","next",50.392635261334775,"binary64"],["(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))) a)) (*.f64 a a))","fresh",52.95031604542211,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))))) a)","fresh",47.7258863473856,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))))) a)","fresh",46.36396632403235,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",31.865488310583263,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",41.99398968926333,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) b_2)) a)","fresh",47.49838169037638,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","done",46.513309462435124,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))))))","fresh",46.983988022437224,"binary64"],["(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","fresh",47.5910022634473,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","next",47.605777335671256,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","done",42.73658753183451,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (exp.f64 (*.f64 (log.f64 (*.f64 b_2 #s(literal 2 binary64))) #s(literal -1 binary64))) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","fresh",43.45973564315624,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)))))","fresh",53.96351279086524,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","next",41.80079770758671,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","fresh",42.58387595018011,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","done",42.537002532089,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64))) #s(literal -2 binary64)))","fresh",53.646280402947944,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","done",41.447092476192545,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))))","next",43.49819100745124,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","done",42.611221282089,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 a #s(literal -1/2 binary64))) #s(literal -1 binary64)))))","fresh",54.079825929339066,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","done",41.380686226192545,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","next",58.26911049822248,"binary64"]],"compiler":[[22,11],[23,15],[50,15],[26,17],[13,10],[18,13],[21,15],[21,15],[19,14],[24,13],[14,11],[24,17],[28,21],[34,21],[19,14],[19,14],[19,14],[23,18],[19,14],[23,18],[19,14],[23,18],[19,14],[31,22],[22,11],[23,15],[50,15],[26,17],[18,13],[21,15],[19,14],[24,13],[14,11],[28,21],[34,21],[19,14],[19,14],[23,18],[23,18],[23,18],[31,22]],"count":[[1215,24]],"kept":[{"done":[5,4],"fresh":[12,9],"new":[1193,8],"picked":[5,3]}],"memory":[[-3987312,54560000]],"min-error":[[5.8157677684328775,"binary64"]],"time":50.65087890625,"type":"prune"},{"egraph":[[0,8101,259,0.04432618],[19,7621,263,0.024214373],[18,6521,263,0.04050029],[17,5760,263,0.039522892],[16,5374,265,0.041094186],[15,5318,265,0.047596135],[14,5306,265,0.034550713],[13,5083,265,0.031760179],[12,5013,265,0.029355577],[11,5013,265,0.02170654],[10,5009,265,0.024821763],[9,4971,265,0.021947144],[8,4649,265,0.026430438],[7,3800,265,0.027271684],[6,2503,265,0.027041654],[5,1194,265,0.018278338],[4,553,265,0.007482894],[3,357,265,0.002496719],[2,192,266,0.001614529],[1,110,268,0.000863792],[0,62,270,0.000661428],[0,42,280,0.000467662]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","#s(literal -1/2 binary64)","(/.f64 b_2 c)","b_2","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(/.f64 c b_2)","c","b_2","#s(literal 1/2 binary64)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","a","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","b_2","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","b_2","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))))","(*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))))","c","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))","(*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(log.f64 (*.f64 #s(literal -2 binary64) b_2))","(*.f64 #s(literal -2 binary64) b_2)","#s(literal -2 binary64)","b_2","#s(literal -1 binary64)"]],"locations":[["(*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))))","cost-diff",0],["(*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","cost-diff",1],["(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))","cost-diff",3],["(*.f64 b_2 b_2)","cost-diff",0],["(fma.f64 c a (*.f64 b_2 b_2))","cost-diff",0],["(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","cost-diff",1],["(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","cost-diff",2],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","cost-diff",0],["(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","cost-diff",0],["(/.f64 #s(literal -1 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","cost-diff",2],["(/.f64 c b_2)","cost-diff",0],["(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","cost-diff",0],["(/.f64 b_2 c)","cost-diff",0],["(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","cost-diff",0],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","cost-diff",0]],"memory":[[3368960,18918032]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c)","#s(literal -1/2 binary64)","(/.f64 b_2 c)","b_2","c","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)","(/.f64 c b_2)","c","b_2","#s(literal 1/2 binary64)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) a)","(/.f64 #s(literal -1 binary64) a)","#s(literal -1 binary64)","a","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","c","(*.f64 b_2 b_2)","b_2","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal 2 binary64) c) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 #s(literal 2 binary64) (*.f64 b_2 b_2) (*.f64 c a))","b_2","(fma.f64 c a (*.f64 b_2 b_2))","c","a","(*.f64 b_2 b_2)","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c))","(*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c)","c","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))","(/.f64 #s(literal -1/2 binary64) b_2)","(*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(neg.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)))","(log.f64 (*.f64 #s(literal -2 binary64) b_2))","(*.f64 #s(literal -2 binary64) b_2)","#s(literal -2 binary64)","b_2","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":589.6650390625,"type":"simplify"},{"compiler":[[257,40]],"locations":[["(log.f64 (*.f64 #s(literal -2 binary64) b_2))","accuracy",0.0],["(*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))))","accuracy",0.0546875],["(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))","accuracy",1.1471324534309821],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))))","accuracy",13.010556917169321],["(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)","accuracy",0.015625],["(fma.f64 c a (*.f64 b_2 b_2))","accuracy",0.24999724760556022],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","accuracy",3.5597459575035995],["(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","accuracy",5.542681862921881],["(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","accuracy",0.0],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","accuracy",0.0703125],["(fma.f64 c a (*.f64 b_2 b_2))","accuracy",0.24999724760556022],["(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","accuracy",3.5597459575035995],["(/.f64 c b_2)","accuracy",0.0],["(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","accuracy",0.0],["#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","accuracy",0.1268993989635415],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","accuracy",13.579092726378693],["(/.f64 b_2 c)","accuracy",0.0],["(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","accuracy",0.046875],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","accuracy",13.010556917169321]],"memory":[[-5196240,36330016]],"mixsample":[[14.571533203125,"ival-div",0],[3.340576171875,"ival-exp",0],[4.36279296875,"ival-add",0],[50.260986328125,"ival-mult",0],[0.114013671875,"ival-assert",0],[3.788330078125,"ival-sub",0],[0.2705078125,"ival-true",0],[3.156982421875,"ival-log",0],[3.7919921875,"ival-sqrt",0],[0.4794921875,"exact",0],[3.336669921875,"ival-neg",0]],"outcomes":[[92.769287109375,0,"invalid",201],[19.439697265625,0,"valid",55]],"time":139.137939453125,"type":"localize"},{"count":[[22,222]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","(/.f64 b_2 c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(/.f64 c b_2)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal -1 binary64) a)","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))","(*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))))","(*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)","(log.f64 (*.f64 #s(literal -2 binary64) b_2))"]],"memory":[[4370240,40398480]],"outputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -1 (/ (- (* b_2 (sqrt -1)) b_2) a))","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) a)","(/ -1 a)","(- (* b_2 (sqrt -1)) b_2)","(- (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))) b_2)","(- (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))) b_2)","(- (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))) b_2)","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2))))","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* -1 (* a (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* a (- (* -1 (* a (+ (* -1/2 (/ (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow c 2) (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow c 3) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(* 2 (pow b_2 2))","(+ (* 2 (pow b_2 2)) (* a c))","(pow b_2 2)","(+ (* a c) (pow b_2 2))","(* -1 (pow b_2 2))","(- (* -1 (* a c)) (pow b_2 2))","(* a (- (* b_2 (sqrt -1)) b_2))","(* a (- (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))) b_2))","(* a (- (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))) b_2))","(* a (- (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))) b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (/ c a)) (/ 1 (sqrt -1)))","(/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1))))) (pow a 2))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2)))))) c)) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow a 3))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* -1 (/ b_2 (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1))))))) a)","(* a c)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(* a (+ c (/ (pow b_2 2) a)))","(* -1 (* a c))","(* a (- (* -1 (/ (pow b_2 2) a)) c))","(* (sqrt (* (pow a 3) c)) (sqrt -1))","(* (pow a 2) (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* (pow a 2) (+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (pow a 2) (+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(* -1 (/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 4)))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (+ (* -1 (/ (+ (* -1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4)))))) (* c (pow (sqrt -1) 2)))) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) a)) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(* -1 (* a (- (/ (pow b_2 2) a) (* -1 c))))","(* -1 (* (sqrt (* (pow a 3) c)) (pow (sqrt -1) 3)))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1 (/ b_2 a))))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a))))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1))))) a))) a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(* -1/2 (/ c b_2))","(/ b_2 c)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ c b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(+ (* (sqrt (/ c a)) (/ 1 (sqrt -1))) (/ b_2 (* a (pow (sqrt -1) 2))))","(+ (* b_2 (+ (* b_2 (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* b_2 (+ (* b_2 (- (+ (* -1 (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (sqrt -1)))) (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -1) 2)))))))) (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(/ -1/2 b_2)","(* -1 (+ (log -2) (log b_2)))","(- (* -1 (pow b_2 2)) (* a c))","(+ (* -1 (* a b_2)) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (* b_2 (+ (* -1 a) (* 1/2 (* (sqrt (/ a c)) (* b_2 (sqrt -1)))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (* b_2 (+ (* -1 a) (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (sqrt -1))))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (log -2) (log b_2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* -1 (/ (* b_2 (- (sqrt -1) 1)) a))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2)))))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* b_2 (- (sqrt -1) 1))","(* b_2 (- (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))) 1))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))) 1))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))) 1))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* 2 (/ b_2 (* a (- (sqrt -1) 1))))","(* b_2 (- (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1)))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))))))) (- (sqrt -1) 1))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (- (sqrt -1) 1) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (- (sqrt -1) 1) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (* (pow b_2 4) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))))","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* -1 (+ (log -2) (* -1 (log (/ 1 b_2)))))","(* (pow b_2 2) (- (* -1 (/ (* a c) (pow b_2 2))) 1))","(* a (* b_2 (- (sqrt -1) 1)))","(* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (- (sqrt -1) 1))))","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (- (sqrt -1) 1)))))","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (- (sqrt -1) 1))))))","(+ (log -2) (* -1 (log (/ 1 b_2))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(/ (* b_2 (+ 1 (sqrt -1))) a)","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))))","(* -1 (* b_2 (+ 1 (sqrt -1))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -2 (/ b_2 (* a (+ 1 (sqrt -1)))))","(* -1 (* b_2 (- (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1))))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))))))) (+ 1 (sqrt -1)))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (* (pow b_2 4) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))))","(* -1 (+ (log 2) (* -1 (log (/ -1 b_2)))))","(* -1 (* a (* b_2 (+ 1 (sqrt -1)))))","(* -1 (* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (+ 1 (sqrt -1))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (+ 1 (sqrt -1)))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (+ 1 (sqrt -1))))))))","(+ (log 2) (* -1 (log (/ -1 b_2))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* -1/2 (/ (* c (sqrt -1)) b_2)))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))))","(- (+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) b_2)","(- (+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5)))))))) b_2)","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* -1 (* c (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* c (- (* -1 (* c (+ (* -1/2 (/ (* a (* (sqrt -1) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow a 2) (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow a 2) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) b_2)) (* a (- (* b_2 (sqrt -1)) b_2)))","(+ (* a (- (* b_2 (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)))))","(+ (* a (- (* b_2 (sqrt -1)) b_2)) (* c (+ (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 3) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 4) (* c (sqrt -1))) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(- (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (pow c 2))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b_2 2) (* c (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2))))))) a)) (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow c 3))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (+ (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(* c (+ a (/ (pow b_2 2) c)))","(* c (- (* -1 (/ (pow b_2 2) c)) a))","(* c (+ (* -1 (/ (* a b_2) c)) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(* c (+ (* -1 (/ (* a b_2) c)) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1)))))","(* c (+ (* -1 (/ (* a b_2) c)) (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (pow (sqrt -1) 3)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1/2 (/ (* (pow b_2 2) (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (* a (pow (sqrt -1) 2)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) c)) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (- (/ (pow b_2 2) c) (* -1 a))))","(* -1 (* c (+ (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)) (/ (* a b_2) c))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (* a b_2)) (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (* a b_2)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (* a c)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))"]],"series":[[6.594970703125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1/2 (/ b_2 c)) (/ b_2 c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* c a) (* b_2 b_2)) (* b_2 b_2) (exp (* (log (* -2 b_2)) -1)) (* (log (* -2 b_2)) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (exp (* (log (* -2 b_2)) -1))) (neg (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a) (log (* -2 b_2)))","c","-inf"],[4.90185546875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1/2 (/ b_2 c)) (/ b_2 c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* c a) (* b_2 b_2)) (* b_2 b_2) (exp (* (log (* -2 b_2)) -1)) (* (log (* -2 b_2)) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (exp (* (log (* -2 b_2)) -1))) (neg (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a) (log (* -2 b_2)))","c","inf"],[4.955078125,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1/2 (/ b_2 c)) (/ b_2 c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* c a) (* b_2 b_2)) (* b_2 b_2) (exp (* (log (* -2 b_2)) -1)) (* (log (* -2 b_2)) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (exp (* (log (* -2 b_2)) -1))) (neg (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a) (log (* -2 b_2)))","c","0"],[47.796875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1/2 (/ b_2 c)) (/ b_2 c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* c a) (* b_2 b_2)) (* b_2 b_2) (exp (* (log (* -2 b_2)) -1)) (* (log (* -2 b_2)) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (exp (* (log (* -2 b_2)) -1))) (neg (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a) (log (* -2 b_2)))","b_2","-inf"],[13.674072265625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1/2 (/ b_2 c)) (/ b_2 c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* c a) (* b_2 b_2)) (* b_2 b_2) (exp (* (log (* -2 b_2)) -1)) (* (log (* -2 b_2)) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (exp (* (log (* -2 b_2)) -1))) (neg (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a) (log (* -2 b_2)))","b_2","inf"],[40.744873046875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1/2 (/ b_2 c)) (/ b_2 c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* c a) (* b_2 b_2)) (* b_2 b_2) (exp (* (log (* -2 b_2)) -1)) (* (log (* -2 b_2)) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (exp (* (log (* -2 b_2)) -1))) (neg (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a) (log (* -2 b_2)))","b_2","0"],[6.285888671875,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1/2 (/ b_2 c)) (/ b_2 c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* c a) (* b_2 b_2)) (* b_2 b_2) (exp (* (log (* -2 b_2)) -1)) (* (log (* -2 b_2)) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (exp (* (log (* -2 b_2)) -1))) (neg (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a) (log (* -2 b_2)))","a","-inf"],[8.73291015625,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1/2 (/ b_2 c)) (/ b_2 c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* c a) (* b_2 b_2)) (* b_2 b_2) (exp (* (log (* -2 b_2)) -1)) (* (log (* -2 b_2)) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (exp (* (log (* -2 b_2)) -1))) (neg (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a) (log (* -2 b_2)))","a","inf"],[4.11083984375,"((/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1/2 (/ b_2 c)) (/ b_2 c) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (* (/ c b_2) 1/2) (/ c b_2) (* (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2)) (/ -1 a) (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) (sqrt (neg (+ (* c a) (* b_2 b_2)))) (/ (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a)) (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (+ (* c a) (* b_2 b_2)) (* b_2 b_2) (exp (* (log (* -2 b_2)) -1)) (* (log (* -2 b_2)) -1) (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* c (exp (* (log (* -2 b_2)) -1))) (neg (+ (* c a) (* b_2 b_2))) (* (- (sqrt (neg (+ (* c a) (* b_2 b_2)))) b_2) a) (log (* -2 b_2)))","a","0"]],"time":143.858154296875,"type":"series"},{"count":[[222,222]],"egraph":[[0,8099,7709,0.096067996],[1,4146,7980,0.030278584],[0,1244,8252,0.013937872]],"inputs":[["(* -2 (/ b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(* -1 (/ (- (* b_2 (sqrt -1)) b_2) a))","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) a)","(/ -1 a)","(- (* b_2 (sqrt -1)) b_2)","(- (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))) b_2)","(- (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))) b_2)","(- (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))) b_2)","(* b_2 (sqrt -1))","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2))))","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* -1 (* a (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* a (- (* -1 (* a (+ (* -1/2 (/ (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow c 2) (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow c 3) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(* 2 (pow b_2 2))","(+ (* 2 (pow b_2 2)) (* a c))","(pow b_2 2)","(+ (* a c) (pow b_2 2))","(* -1 (pow b_2 2))","(- (* -1 (* a c)) (pow b_2 2))","(* a (- (* b_2 (sqrt -1)) b_2))","(* a (- (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))) b_2))","(* a (- (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))) b_2))","(* a (- (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))) b_2))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(* 1/2 (/ c b_2))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (/ c a)) (/ 1 (sqrt -1)))","(/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1))))) (pow a 2))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2)))))) c)) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow a 3))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* -1 (/ b_2 (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1))))))) a)","(* a c)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(* a (+ c (/ (pow b_2 2) a)))","(* -1 (* a c))","(* a (- (* -1 (/ (pow b_2 2) a)) c))","(* (sqrt (* (pow a 3) c)) (sqrt -1))","(* (pow a 2) (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* (pow a 2) (+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (pow a 2) (+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(* -1 (* a (+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(* -1 (/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 4)))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (+ (* -1 (/ (+ (* -1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4)))))) (* c (pow (sqrt -1) 2)))) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) a)) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(* -1 (* a (- (/ (pow b_2 2) a) (* -1 c))))","(* -1 (* (sqrt (* (pow a 3) c)) (pow (sqrt -1) 3)))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1 (/ b_2 a))))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a))))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1))))) a))) a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(* -1/2 (/ c b_2))","(/ b_2 c)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/ c b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(+ (* (sqrt (/ c a)) (/ 1 (sqrt -1))) (/ b_2 (* a (pow (sqrt -1) 2))))","(+ (* b_2 (+ (* b_2 (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(+ (* b_2 (+ (* b_2 (- (+ (* -1 (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (sqrt -1)))) (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -1) 2)))))))) (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(/ -1/2 b_2)","(* -1 (+ (log -2) (log b_2)))","(- (* -1 (pow b_2 2)) (* a c))","(+ (* -1 (* a b_2)) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (* b_2 (+ (* -1 a) (* 1/2 (* (sqrt (/ a c)) (* b_2 (sqrt -1)))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (* b_2 (+ (* -1 a) (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (sqrt -1))))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(+ (log -2) (log b_2))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(* -1 (/ (* b_2 (- (sqrt -1) 1)) a))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2)))))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* b_2 (- (sqrt -1) 1))","(* b_2 (- (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))) 1))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))) 1))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))) 1))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* 2 (/ b_2 (* a (- (sqrt -1) 1))))","(* b_2 (- (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1)))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))))))) (- (sqrt -1) 1))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (- (sqrt -1) 1) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (- (sqrt -1) 1) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (* (pow b_2 4) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))))","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(* -1 (+ (log -2) (* -1 (log (/ 1 b_2)))))","(* (pow b_2 2) (- (* -1 (/ (* a c) (pow b_2 2))) 1))","(* a (* b_2 (- (sqrt -1) 1)))","(* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (- (sqrt -1) 1))))","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (- (sqrt -1) 1)))))","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (- (sqrt -1) 1))))))","(+ (log -2) (* -1 (log (/ 1 b_2))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(/ (* b_2 (+ 1 (sqrt -1))) a)","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))))","(* -1 (* b_2 (+ 1 (sqrt -1))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))))","(* -1 (* b_2 (sqrt -1)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(* -2 (/ b_2 (* a (+ 1 (sqrt -1)))))","(* -1 (* b_2 (- (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1))))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))))))) (+ 1 (sqrt -1)))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (* (pow b_2 4) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))))","(* -1 (+ (log 2) (* -1 (log (/ -1 b_2)))))","(* -1 (* a (* b_2 (+ 1 (sqrt -1)))))","(* -1 (* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (+ 1 (sqrt -1))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (+ 1 (sqrt -1)))))))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (+ 1 (sqrt -1))))))))","(+ (log 2) (* -1 (log (/ -1 b_2))))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* -1/2 (/ (* c (sqrt -1)) b_2)))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))))","(- (+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) b_2)","(- (+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5)))))))) b_2)","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* -1 (* c (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* c (- (* -1 (* c (+ (* -1/2 (/ (* a (* (sqrt -1) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow a 2) (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow a 2) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) b_2)) (* a (- (* b_2 (sqrt -1)) b_2)))","(+ (* a (- (* b_2 (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)))))","(+ (* a (- (* b_2 (sqrt -1)) b_2)) (* c (+ (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 3) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 4) (* c (sqrt -1))) (pow b_2 5))))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(- (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (pow c 2))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b_2 2) (* c (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2))))))) a)) (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow c 3))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (+ (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))))","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(* c (+ a (/ (pow b_2 2) c)))","(* c (- (* -1 (/ (pow b_2 2) c)) a))","(* c (+ (* -1 (/ (* a b_2) c)) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(* c (+ (* -1 (/ (* a b_2) c)) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1)))))","(* c (+ (* -1 (/ (* a b_2) c)) (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (pow (sqrt -1) 3)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1/2 (/ (* (pow b_2 2) (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (* a (pow (sqrt -1) 2)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) c)) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (- (/ (pow b_2 2) c) (* -1 a))))","(* -1 (* c (+ (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)) (/ (* a b_2) c))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (* a b_2)) (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (* a b_2)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (* a c)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))"]],"memory":[[-3279520,59370816]],"method":["egg-herbie"],"outputs":[["(* -2 (/ b_2 a))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/ (+ (* -2 b_2) (* 1/2 (/ (* a c) b_2))) a)","(/.f64 (fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 3))) (* 1/2 (/ c b_2))))) a)","(/.f64 (fma.f64 (fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(/ (+ (* -2 b_2) (* a (+ (* 1/2 (/ c b_2)) (* a (+ (* 1/16 (/ (* a (pow c 3)) (pow b_2 5))) (* 1/8 (/ (pow c 2) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b_2 #s(literal 5 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))) a (*.f64 #s(literal -2 binary64) b_2)) a)","(* -1 (/ (- (* b_2 (sqrt -1)) b_2) a))","(*.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* -1/2 (/ (* a (* c (sqrt -1))) b_2))) a)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal -1/2 binary64) (neg.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3)))))) a)","(/.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a (neg.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))) a)","(/ (+ (* -1 (- (* b_2 (sqrt -1)) b_2)) (* a (+ (* -1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64))) a (neg.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))) a)","(/ -1 a)","(/.f64 #s(literal -1 binary64) a)","(- (* b_2 (sqrt -1)) b_2)","(-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)","(- (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))) b_2)","(fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))","(- (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))) b_2)","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))","(- (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))) b_2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))","(* b_2 (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)","(+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1)))","(fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2))))","(*.f64 (/.f64 #s(literal 2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 b_2 b_2) a))","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/.f64 (fma.f64 (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) a (/.f64 (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* -1 (* a (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)))) (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) a (/.f64 (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))) a)","(/ (+ (* 2 (/ (pow b_2 2) (- (* b_2 (sqrt -1)) b_2))) (* a (- (+ (* a (- (* -1 (* a (+ (* -1/2 (/ (* c (* (sqrt -1) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow c 2) (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow c 3) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* (pow c 2) (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* c (* (sqrt -1) (- (/ c (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ c (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (* c (sqrt -1))) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (/.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))))) b_2) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))))) (neg.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)))))) a (-.f64 (/.f64 c (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) a (/.f64 (*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64)) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2))) a)","(* 2 (pow b_2 2))","(*.f64 (*.f64 b_2 b_2) #s(literal 2 binary64))","(+ (* 2 (pow b_2 2)) (* a c))","(fma.f64 (*.f64 b_2 b_2) #s(literal 2 binary64) (*.f64 c a))","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* a c) (pow b_2 2))","(fma.f64 c a (*.f64 b_2 b_2))","(* -1 (pow b_2 2))","(*.f64 (neg.f64 b_2) b_2)","(- (* -1 (* a c)) (pow b_2 2))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(* a (- (* b_2 (sqrt -1)) b_2))","(*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) a)","(* a (- (+ (* 1/2 (/ (* a (* c (sqrt -1))) b_2)) (* b_2 (sqrt -1))) b_2))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) a)","(* a (- (+ (* a (+ (* -1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* c (sqrt -1)) b_2)))) (* b_2 (sqrt -1))) b_2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) a)","(* a (- (+ (* a (+ (* 1/2 (/ (* c (sqrt -1)) b_2)) (* a (+ (* -1/8 (/ (* (pow c 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* a (* (pow c 3) (sqrt -1))) (pow b_2 5))))))) (* b_2 (sqrt -1))) b_2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64))) a (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal 1/2 binary64))) a (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1))))))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1 (/ b_2 a)) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))))))","(+.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64))))","(* 1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(+ (* -2 (/ b_2 a)) (* 1/2 (/ c b_2)))","(fma.f64 (/.f64 c b_2) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a))","(-.f64 (/.f64 b_2 a) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)))","(fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 a))))","(fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (/.f64 b_2 a))))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* (sqrt (/ c a)) (/ 1 (sqrt -1)))","(/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (+.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) a)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1))))) (pow a 2))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (pow (sqrt -1) 2)))) a)","(/.f64 (+.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 #s(literal -1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) (*.f64 a a))) (/.f64 b_2 #s(literal -1 binary64))) a)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2)))))) c)) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow a 3))) (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 2))))) (sqrt -1)))) (+ (* -1 (/ b_2 (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1))))))) a)","(/.f64 (-.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 #s(literal -1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 (*.f64 (*.f64 a (*.f64 b_2 b_2)) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 #s(literal -1 binary64))))) c) #s(literal 1/2 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 #s(literal -1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) #s(literal -1 binary64))))) a)","(* a c)","(*.f64 c a)","(* a (+ c (* 2 (/ (pow b_2 2) a))))","(*.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal 2 binary64) c) a)","(* a (+ c (/ (pow b_2 2) a)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (* -1 (/ (pow b_2 2) a)) c))","(*.f64 (neg.f64 a) (+.f64 (/.f64 (*.f64 b_2 b_2) a) c))","(* (sqrt (* (pow a 3) c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64)))","(* (pow a 2) (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (*.f64 a a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))","(* (pow a 2) (+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (*.f64 a a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))))","(* (pow a 2) (+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) (*.f64 a a))","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ (+ b_2 (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) b_2) a))","(+ (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) a)) a))","(* (sqrt (/ c a)) (pow (sqrt -1) 3))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) a))","(+ (* -1 (/ (+ (* -1 b_2) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a))) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))","(-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) a)) a))","(* -1 (* (sqrt (* a c)) (pow (sqrt -1) 3)))","(*.f64 (neg.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (pow (sqrt -1) 3)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 (-.f64 (neg.f64 b_2) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) a)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (pow (sqrt -1) 3)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(neg.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (/ (- (+ (* 2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (pow (sqrt -1) 4)))) a))","(/.f64 (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (+.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) a)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(/.f64 (neg.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))))) a)) a))) a)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (* -1 (/ (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (+ (* -1 (/ (+ (* -1/2 (/ (* a (* (pow b_2 2) (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4)))))) (* c (pow (sqrt -1) 2)))) (* (sqrt (/ a c)) (/ (* b_2 (+ (* -1 (* (sqrt (/ a c)) (/ (* b_2 (- (* 2 (* (sqrt (/ a c)) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* a b_2) (pow (sqrt -1) 4))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) a)) (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) a))) a)) (* (sqrt (* a c)) (/ 1 (sqrt -1)))) a))","(/.f64 (neg.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (neg.f64 (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 a c)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (*.f64 a (*.f64 b_2 b_2)) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) c))) a)))) a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))))) a))) a)","(* -1 (* a (+ (* -2 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal -2 binary64) (neg.f64 c)))","(* -1 (* a (+ (* -1 c) (* -1 (/ (pow b_2 2) a)))))","(*.f64 (neg.f64 a) (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) a) c)))","(* -1 (* a (- (/ (pow b_2 2) a) (* -1 c))))","(*.f64 (neg.f64 a) (+.f64 (/.f64 (*.f64 b_2 b_2) a) c))","(* -1 (* (sqrt (* (pow a 3) c)) (pow (sqrt -1) 3)))","(*.f64 (neg.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1 (/ b_2 a))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a))) (*.f64 a a))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) b_2) a))) (*.f64 a a))","(* (pow a 2) (+ (* -1 (* (sqrt (/ c a)) (pow (sqrt -1) 3))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 4) (sqrt -1))))) a))) a))))","(*.f64 (neg.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))))) a)) a))) (*.f64 a a))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) a))) b_2))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (- (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64))) b_2 (neg.f64 (/.f64 #s(literal 1 binary64) a))) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(* -1/2 (/ c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(/ b_2 c)","(/.f64 b_2 c)","(/ (+ (* -2 (/ (pow b_2 2) a)) (* 1/2 c)) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) a) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) c)) b_2)","(/ c b_2)","(/.f64 c b_2)","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* b_2 (sqrt -1)))) (/ 1 a))))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) a)) b_2))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* b_2 (+ (* b_2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (sqrt -1))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))))) (/ 1 a))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/8 binary64))) b_2 (/.f64 #s(literal 1 binary64) a)) b_2 (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (* b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (sqrt -1))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 2) (sqrt -1)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 b_2 b_2) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (/ c a)) (/ 1 (sqrt -1))) (/ b_2 (* a (pow (sqrt -1) 2))))","(+.f64 (/.f64 b_2 (neg.f64 a)) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (+ (* b_2 (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (neg.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))) b_2 (/.f64 #s(literal 1 binary64) (neg.f64 a))) b_2 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (+ (* b_2 (- (+ (* -1 (* b_2 (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (- (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (sqrt -1)))) (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -1) 2)))))))) (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1))))))) (/ 1 (* a (pow (sqrt -1) 2))))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 b_2) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (neg.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))) (sqrt.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 c) (*.f64 a a)))) (-.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (neg.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))))))) b_2 (/.f64 #s(literal 1 binary64) (neg.f64 a))) b_2 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(/ -1/2 b_2)","(/.f64 #s(literal -1/2 binary64) b_2)","(* -1 (+ (log -2) (log b_2)))","(neg.f64 (+.f64 (log.f64 b_2) (log.f64 #s(literal -2 binary64))))","(- (* -1 (pow b_2 2)) (* a c))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(+ (* -1 (* a b_2)) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(fma.f64 (neg.f64 b_2) a (*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (+ (* -1 a) (* 1/2 (* (sqrt (/ a c)) (* b_2 (sqrt -1)))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (neg.f64 a)) b_2 (*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (+ (* -1 a) (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (sqrt -1))))))) (* (sqrt (* (pow a 3) c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (neg.f64 a)) b_2 (*.f64 (sqrt.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))","(+ (log -2) (log b_2))","(+.f64 (log.f64 b_2) (log.f64 #s(literal -2 binary64)))","(* b_2 (- (* 1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a))))","(*.f64 (-.f64 (*.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal 1/2 binary64)) (/.f64 #s(literal 2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2)))) (* 2 (/ 1 a))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) a)) b_2)","(* b_2 (- (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 1/2 (/ c (pow b_2 2))))) (* 2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) a))) b_2)","(* -1 (/ (* b_2 (- (sqrt -1) 1)) a))","(*.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) a)) b_2)","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2))) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)) b_2)","(* b_2 (+ (* -1 (/ (- (sqrt -1) 1) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64)))) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)) b_2)","(* b_2 (- (sqrt -1) 1))","(-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)","(* b_2 (- (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))) 1))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64))) b_2 (neg.f64 b_2))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))) 1))","(fma.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64))) b_2 (neg.f64 b_2))","(* b_2 (- (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))) 1))","(fma.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2)))) (sqrt.f64 #s(literal -1 binary64))) b_2 (neg.f64 b_2))","(* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2)))) (sqrt.f64 #s(literal -1 binary64))) b_2)","(* 2 (/ b_2 (* a (- (sqrt -1) 1))))","(*.f64 (/.f64 b_2 (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)) #s(literal 2 binary64))","(* b_2 (- (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) b_2)","(* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1)))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/4 binary64))) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) b_2)","(* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (- (sqrt -1) 1) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))))))) (- (sqrt -1) 1))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (- (sqrt -1) 1))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (- (sqrt -1) 1) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (- (sqrt -1) 1)))) (/ c (* (pow b_2 2) (- (sqrt -1) 1))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (- (sqrt -1) 1) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (- (sqrt -1) 1)) (/ (* c (sqrt -1)) (pow (- (sqrt -1) 1) 2)))))) (* (pow b_2 4) (- (sqrt -1) 1)))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (- (sqrt -1) 1) 2)))))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))) (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (fma.f64 (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/4 binary64)))) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 (-.f64 (/.f64 c (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 c c)) (*.f64 a a)) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) #s(literal -1/8 binary64)))) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))))) b_2)","(* (pow b_2 2) (+ 2 (/ (* a c) (pow b_2 2))))","(*.f64 (fma.f64 a (/.f64 c (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2))","(* (pow b_2 2) (+ 1 (/ (* a c) (pow b_2 2))))","(*.f64 (fma.f64 a (/.f64 c (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(* -1 (+ (log -2) (* -1 (log (/ 1 b_2)))))","(neg.f64 (+.f64 (log.f64 b_2) (log.f64 #s(literal -2 binary64))))","(* (pow b_2 2) (- (* -1 (/ (* a c) (pow b_2 2))) 1))","(*.f64 (fma.f64 (neg.f64 a) (/.f64 c (*.f64 b_2 b_2)) #s(literal -1 binary64)) (*.f64 b_2 b_2))","(* a (* b_2 (- (sqrt -1) 1)))","(*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) a)","(* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (- (sqrt -1) 1))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)) b_2)","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (- (sqrt -1) 1)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a))) b_2)","(* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (- (sqrt -1) 1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)))) b_2)","(+ (log -2) (* -1 (log (/ 1 b_2))))","(+.f64 (log.f64 b_2) (log.f64 #s(literal -2 binary64)))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c))) b_2)","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c))) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) c)))) b_2)","(* -1 (/ (+ (* 1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))) (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (+ (* 1/2 c) (* 1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6))))))) b_2))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c))))) b_2)","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 c (*.f64 b_2 b_2)) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(/ (* b_2 (+ 1 (sqrt -1))) a)","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 b_2) a)","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal -1 binary64)) a)))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2))) (/.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) a)))","(* -1 (* b_2 (+ (* -1 (/ (+ 1 (sqrt -1)) a)) (+ (* -1/2 (/ (* c (sqrt -1)) (pow b_2 2))) (+ (* -1/16 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/8 (/ (* a (* (pow c 2) (sqrt -1))) (pow b_2 4))))))))","(*.f64 (neg.f64 b_2) (-.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 1/8 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) a)))","(* -1 (* b_2 (+ 1 (sqrt -1))))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 b_2))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(neg.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64))) b_2 b_2))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(neg.f64 (fma.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64))) b_2 b_2))","(* -1 (* b_2 (+ 1 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))))","(neg.f64 (fma.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2)))) (sqrt.f64 #s(literal -1 binary64))) b_2 b_2))","(* -1 (* b_2 (sqrt -1)))","(*.f64 (neg.f64 b_2) (sqrt.f64 #s(literal -1 binary64)))","(* -1 (* b_2 (+ (sqrt -1) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2)))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2))) (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* b_2 (+ (sqrt -1) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 3) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (* 1/2 (/ (* a (* c (sqrt -1))) (pow b_2 2))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) b_2)))) (sqrt.f64 #s(literal -1 binary64))))","(* -2 (/ b_2 (* a (+ 1 (sqrt -1)))))","(*.f64 (/.f64 b_2 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a)) #s(literal -2 binary64))","(* -1 (* b_2 (- (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(*.f64 (neg.f64 b_2) (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a))) (/.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1))))) (pow b_2 4))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))","(*.f64 (neg.f64 b_2) (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a))) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) #s(literal -1/4 binary64))) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)))))","(* -1 (* b_2 (- (+ (* -1 (/ (+ (* -1/2 (/ (* a (* c (* (sqrt -1) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))) (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))))))) (+ 1 (sqrt -1)))) (+ (* -1/8 (/ (* (pow a 2) (* (pow c 2) (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (+ 1 (sqrt -1)))) (* 1/8 (/ (* (pow a 2) (* (pow c 3) (sqrt -1))) (pow (+ 1 (sqrt -1)) 2))))) (pow b_2 6))) (+ (* 2 (/ 1 (* a (+ 1 (sqrt -1))))) (/ c (* (pow b_2 2) (+ 1 (sqrt -1)))))) (+ (* -1/4 (/ (* a (* (pow c 2) (sqrt -1))) (* (pow b_2 4) (pow (+ 1 (sqrt -1)) 2)))) (+ (* 1/2 (/ (* a (* c (* (sqrt -1) (- (/ c (+ 1 (sqrt -1))) (/ (* c (sqrt -1)) (pow (+ 1 (sqrt -1)) 2)))))) (* (pow b_2 4) (+ 1 (sqrt -1))))) (/ (* c (sqrt -1)) (* (pow b_2 2) (pow (+ 1 (sqrt -1)) 2))))))))","(*.f64 (neg.f64 b_2) (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 c (*.f64 b_2 b_2)) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a))) (/.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (fma.f64 (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) #s(literal -1/4 binary64)))) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 (-.f64 (/.f64 c (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 c c)) (*.f64 a a)) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64)))) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (/.f64 #s(literal -1/4 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 c a) (*.f64 (-.f64 (/.f64 c (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (/.f64 c b_2)) (pow.f64 (+.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal -1 binary64))) #s(literal 2 binary64)))))))","(* -1 (+ (log 2) (* -1 (log (/ -1 b_2)))))","(neg.f64 (-.f64 (log.f64 #s(literal 2 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) b_2))))","(* -1 (* a (* b_2 (+ 1 (sqrt -1)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 b_2)) a)","(* -1 (* b_2 (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (+ 1 (sqrt -1))))))","(*.f64 (neg.f64 b_2) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a)))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (+ 1 (sqrt -1)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a))))","(* -1 (* b_2 (+ (* -1/8 (/ (* (pow a 3) (* (pow c 2) (sqrt -1))) (pow b_2 4))) (+ (* 1/16 (/ (* (pow a 4) (* (pow c 3) (sqrt -1))) (pow b_2 6))) (+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 2))) (* a (+ 1 (sqrt -1))))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 c c))) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (*.f64 a a) c) b_2) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) a a)))))","(+ (log 2) (* -1 (log (/ -1 b_2))))","(-.f64 (log.f64 #s(literal 2 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) b_2)))","(+ (* -2 (/ b_2 a)) (* c (+ (* 1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (*.f64 a (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal 1/8 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(+ (* -2 (/ b_2 a)) (* c (+ (* c (+ (* 1/16 (/ (* (pow a 2) c) (pow b_2 5))) (* 1/8 (/ a (pow b_2 3))))) (* 1/2 (/ 1 b_2)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 a a) c)) (pow.f64 b_2 #s(literal 5 binary64)))) c (/.f64 #s(literal 1/2 binary64) b_2)) c (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* -1/2 (/ (* c (sqrt -1)) b_2)))","(fma.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a) (*.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2) #s(literal -1/2 binary64)))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* 1/8 (/ (* a (* c (sqrt -1))) (pow b_2 3))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) #s(literal -1/2 binary64))) c (*.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)))","(+ (* -1 (/ (- (* b_2 (sqrt -1)) b_2) a)) (* c (+ (* -1/2 (/ (sqrt -1) b_2)) (* c (+ (* -1/16 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 5))) (* 1/8 (/ (* a (sqrt -1)) (pow b_2 3))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64))) c (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) #s(literal -1/2 binary64))) c (*.f64 (neg.f64 b_2) (/.f64 (-.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) a)))","(- (+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2))))) b_2)","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (neg.f64 b_2)))","(- (+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5)))))))) b_2)","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) b_2 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (neg.f64 b_2)))","(+ (* b_2 (sqrt -1)) (* c (+ (* -1/8 (/ (* (pow a 2) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* a (sqrt -1)) b_2)))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* b_2 (sqrt -1)) (* c (+ (* 1/2 (/ (* a (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 2) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (*.f64 (*.f64 a (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) c (*.f64 (/.f64 #s(literal 2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 b_2 b_2) a)))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* -1 (* c (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(fma.f64 (fma.f64 (neg.f64 c) (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal 1/2 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) c (*.f64 (/.f64 #s(literal 2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 b_2 b_2) a)))","(+ (* 2 (/ (pow b_2 2) (* a (- (* b_2 (sqrt -1)) b_2)))) (* c (- (+ (* c (- (* -1 (* c (+ (* -1/2 (/ (* a (* (sqrt -1) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (* b_2 (- (* b_2 (sqrt -1)) b_2)))) (+ (* -1/8 (/ (* (pow a 2) (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* (pow b_2 3) (- (* b_2 (sqrt -1)) b_2)))) (* 1/8 (/ (* (pow a 2) (sqrt -1)) (* (pow b_2 3) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))))) (+ (* -1/4 (/ (* a (sqrt -1)) (* b_2 (pow (- (* b_2 (sqrt -1)) b_2) 2)))) (* 1/2 (/ (* a (* (sqrt -1) (- (/ 1 (- (* b_2 (sqrt -1)) b_2)) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2))))) (* b_2 (- (* b_2 (sqrt -1)) b_2))))))) (/ 1 (- (* b_2 (sqrt -1)) b_2))) (/ (* b_2 (sqrt -1)) (pow (- (* b_2 (sqrt -1)) b_2) 2)))))","(fma.f64 (/.f64 #s(literal 2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 b_2 b_2) a) (*.f64 (fma.f64 (fma.f64 (neg.f64 c) (fma.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal 1/2 binary64))) (sqrt.f64 #s(literal -1 binary64))) a) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 a a) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 a a)) (pow.f64 b_2 #s(literal 3 binary64)))))) (neg.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) b_2) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) a) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) b_2)) #s(literal 1/2 binary64))))) c (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2)) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) (pow.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) #s(literal 2 binary64))))) c))","(+ (* 1/2 (/ (* (pow a 2) (* c (sqrt -1))) b_2)) (* a (- (* b_2 (sqrt -1)) b_2)))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) c) b_2)) #s(literal 1/2 binary64) (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) a))","(+ (* a (- (* b_2 (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 3) (* c (sqrt -1))) (pow b_2 3))) (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) a))","(+ (* a (- (* b_2 (sqrt -1)) b_2)) (* c (+ (* 1/2 (/ (* (pow a 2) (sqrt -1)) b_2)) (* c (+ (* -1/8 (/ (* (pow a 3) (sqrt -1)) (pow b_2 3))) (* 1/16 (/ (* (pow a 4) (* c (sqrt -1))) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) c) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal 1/16 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (*.f64 (*.f64 (*.f64 a a) (/.f64 (sqrt.f64 #s(literal -1 binary64)) b_2)) #s(literal 1/2 binary64))) c (*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b_2) b_2) a))","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ b_2 (* a c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) (*.f64 c a)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1 (/ b_2 (* a c))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3))))))))","(*.f64 (+.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/8 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64)))) c)","(* c (+ (* -2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -2 binary64) (/.f64 #s(literal 1/2 binary64) b_2)) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c))))","(*.f64 (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (/.f64 (/.f64 b_2 a) c))) c)","(* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (/ b_2 (* a c))))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/8 binary64) (/.f64 (/.f64 b_2 a) c)))) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(- (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 2 binary64) (+.f64 (/.f64 b_2 (neg.f64 a)) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (pow c 2))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))))","(+.f64 (-.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 2 binary64) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 b_2 (/.f64 c (neg.f64 a)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64))) (*.f64 c c))) (/.f64 b_2 (neg.f64 a)))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b_2 2) (* c (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2))))))) a)) (* (sqrt (/ c a)) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (* 1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (sqrt -1)))) (pow c 3))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (/ 1 (sqrt -1))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 2)))))) (sqrt -1)))) (+ (* -1 (/ b_2 (* a (pow (sqrt -1) 2)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))))))","(-.f64 (-.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 2 binary64) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 b_2 (/.f64 c (neg.f64 a)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 b_2 (/.f64 c (neg.f64 a))))) a) #s(literal 1/2 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 b_2 (/.f64 c (neg.f64 a)))) (sqrt.f64 #s(literal -1 binary64)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 b_2 a)))))","(* c (+ a (* 2 (/ (pow b_2 2) c))))","(*.f64 (fma.f64 (/.f64 (*.f64 b_2 b_2) c) #s(literal 2 binary64) a) c)","(* c (+ a (/ (pow b_2 2) c)))","(*.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a) c)","(* c (- (* -1 (/ (pow b_2 2) c)) a))","(*.f64 (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a)) c)","(* c (+ (* -1 (/ (* a b_2) c)) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))","(*.f64 (fma.f64 (neg.f64 a) (/.f64 b_2 c) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1 (/ (* a b_2) c)) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1)))))","(*.f64 (fma.f64 (neg.f64 a) (/.f64 b_2 c) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1 (/ (* a b_2) c)) (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ a (pow c 3))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ (pow a 3) c)) (sqrt -1))))))","(*.f64 (fma.f64 (neg.f64 a) (/.f64 b_2 c) (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 5 binary64)) a)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b_2 (* a c)))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (/.f64 b_2 a) c) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) a)) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1))))) c))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (neg.f64 b_2) a) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))))) c)) c))))","(* -1 (* c (- (* 2 (/ b_2 (* a c))) (* 1/2 (/ 1 b_2)))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b_2 a) c) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) b_2)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ b_2 (* a c))))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (/ b_2 a)) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 a)) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (pow (sqrt -1) 3))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (/ (pow b_2 4) (sqrt -1))))) c)) (/ b_2 a)) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 b_2 a) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))))) c)) c))))","(* -1 (* c (+ (* (sqrt (/ a c)) (pow (sqrt -1) 3)) (/ b_2 c))))","(*.f64 (neg.f64 c) (fma.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 b_2 c)))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (neg.f64 b_2)) c)))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))))) c) b_2) c)))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (pow (sqrt -1) 3)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(-.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) c))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (+ (* -1/2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(-.f64 (/.f64 (neg.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) (sqrt.f64 #s(literal -1 binary64)))) (+.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64))))) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))))) c) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -1)))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1/2 (/ (* (pow b_2 2) (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (* a (pow (sqrt -1) 2)))) (* (sqrt (/ 1 (* a c))) (/ (* b_2 (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) (sqrt -1)))) (+ (* -1 (* (sqrt (/ c a)) (/ (* b_2 (- (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1)))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4)))))) (sqrt -1)))) (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b_2 2) (pow (sqrt -1) 3)))))) c)) (* 2 (* (sqrt (/ c (pow a 3))) (/ (pow b_2 2) (sqrt -1))))) (* -1 (/ (* b_2 c) (* a (pow (sqrt -1) 4))))) c)))","(-.f64 (neg.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) (/.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) (*.f64 b_2 b_2)) a) (fma.f64 (*.f64 b_2 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))) (/.f64 b_2 #s(literal -1 binary64)))) #s(literal -1/2 binary64)))))) c) #s(literal -1 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (/.f64 b_2 a)))) c))","(* -1 (* c (+ (* -2 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (*.f64 b_2 b_2) c) #s(literal -2 binary64) (neg.f64 a)))","(* -1 (* c (+ (* -1 a) (* -1 (/ (pow b_2 2) c)))))","(*.f64 (neg.f64 c) (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a)))","(* -1 (* c (- (/ (pow b_2 2) c) (* -1 a))))","(*.f64 (neg.f64 (+.f64 (/.f64 (*.f64 b_2 b_2) c) a)) c)","(* -1 (* c (+ (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)) (/ (* a b_2) c))))","(*.f64 (neg.f64 c) (fma.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 a (/.f64 b_2 c))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (* a b_2)) (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/2 binary64) (*.f64 (neg.f64 b_2) a)) c)))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (* a b_2)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (* a c)) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ (pow a 3) c)) (pow (sqrt -1) 3)))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (neg.f64 (fma.f64 a b_2 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 c a))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64))))) c))) c)))"]],"stop":[["iter limit",1],["node limit",1]],"time":268.73583984375,"type":"simplify"},{"count":[[22,643]],"egraph":[[0,8635,209,0.083304572],[2,1640,211,0.033543898],[1,233,212,0.006004939],[0,62,216,0.001798765],[0,42,226,0.000368284]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","(/.f64 b_2 c)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(/.f64 c b_2)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal -1 binary64) a)","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))","(*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))))","(*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)","(log.f64 (*.f64 #s(literal -2 binary64) b_2))"]],"memory":[[-2219072,66790800]],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(*.f64 (/.f64 (pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1/2 binary64)) (pow.f64 c #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) (pow.f64 c #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c)","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (neg.f64 c))","(*.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 c) b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","(pow.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)","(/.f64 (/.f64 #s(literal -1/2 binary64) b_2) (pow.f64 c #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b_2 c) #s(literal -2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64))))","(/.f64 (/.f64 #s(literal 1/2 binary64) b_2) (neg.f64 (pow.f64 c #s(literal -1 binary64))))","(/.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) c))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","(neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) c))","(*.f64 (pow.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 c) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 c #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 c) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 c) #s(literal -1 binary64)) (neg.f64 b_2))","(*.f64 (pow.f64 c #s(literal -1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 c #s(literal -1 binary64)) b_2)","(*.f64 #s(literal 1 binary64) (/.f64 b_2 c))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 b_2) c))","(*.f64 (neg.f64 b_2) (pow.f64 (neg.f64 c) #s(literal -1 binary64)))","(*.f64 b_2 (pow.f64 c #s(literal -1 binary64)))","(pow.f64 (/.f64 c b_2) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 c) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (neg.f64 c)) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 b_2) c) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (neg.f64 c)) (/.f64 #s(literal 0 binary64) (neg.f64 c)) (fma.f64 (/.f64 (neg.f64 b_2) c) (/.f64 (neg.f64 b_2) c) (*.f64 (/.f64 #s(literal 0 binary64) (neg.f64 c)) (/.f64 (neg.f64 b_2) c)))))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 c))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b_2))) (neg.f64 (neg.f64 (neg.f64 c))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 c)) (*.f64 (neg.f64 c) (neg.f64 (neg.f64 b_2)))) (*.f64 (neg.f64 c) (neg.f64 c)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (/.f64 c b_2))) (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 (neg.f64 c) (neg.f64 (/.f64 c b_2))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 c b_2)) (*.f64 (neg.f64 c) #s(literal -1 binary64))) (*.f64 (neg.f64 c) (/.f64 c b_2)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 c))) (*.f64 (neg.f64 c) (neg.f64 b_2))) (*.f64 (neg.f64 c) (neg.f64 (neg.f64 c))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) c) (*.f64 (neg.f64 c) (neg.f64 b_2))) (*.f64 (neg.f64 c) c))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 c)) (*.f64 (neg.f64 c) b_2)) (*.f64 (neg.f64 c) (neg.f64 c)))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 b_2))) (neg.f64 c))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) c)","(/.f64 (neg.f64 (pow.f64 c #s(literal -1 binary64))) (neg.f64 (pow.f64 b_2 #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 (neg.f64 c)))","(/.f64 (pow.f64 c #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -1 binary64)))","(/.f64 (/.f64 (neg.f64 b_2) c) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 c (*.f64 b_2 #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 c b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 c b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 c b_2)))","(/.f64 (/.f64 b_2 c) #s(literal 1 binary64))","(/.f64 (neg.f64 b_2) (neg.f64 c))","(/.f64 b_2 c)","(neg.f64 (/.f64 (neg.f64 b_2) c))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (neg.f64 c)) #s(literal 1 binary64)) (/.f64 (/.f64 (neg.f64 b_2) c) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 c)) (/.f64 (neg.f64 b_2) c))","(exp.f64 (*.f64 (log.f64 (/.f64 c b_2)) #s(literal -1 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 (/.f64 (neg.f64 c) b_2) #s(literal -1/2 binary64))","(*.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) b_2))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 c #s(literal 2 binary64)))","(*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (/.f64 c #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)","(*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 c) b_2))","(*.f64 c (/.f64 #s(literal 1/2 binary64) b_2))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) c)) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 c #s(literal -1/2 binary64))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) c) (*.f64 b_2 #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 c) #s(literal 1/2 binary64)) (neg.f64 b_2))","(/.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 b_2 #s(literal 2 binary64)))","(/.f64 (*.f64 c #s(literal -1/2 binary64)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal 1/2 binary64) c) b_2)","(/.f64 (neg.f64 c) (neg.f64 (*.f64 b_2 #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) c)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 (neg.f64 c) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) (*.f64 c #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 c #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 #s(literal 1/2 binary64) (neg.f64 c))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b_2) (*.f64 #s(literal -1/2 binary64) c)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 #s(literal 2 binary64)) c))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 c) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))","(/.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 b_2) c))","(/.f64 c (*.f64 b_2 #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 c #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 c) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 c) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) (neg.f64 c))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) c)","(*.f64 (neg.f64 c) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 c b_2))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 c) b_2))","(*.f64 c (pow.f64 b_2 #s(literal -1 binary64)))","(pow.f64 (/.f64 c b_2) #s(literal 1 binary64))","(pow.f64 (/.f64 b_2 c) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (pow.f64 b_2 #s(literal -1 binary64))) (neg.f64 (pow.f64 c #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (neg.f64 (/.f64 c #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (*.f64 c #s(literal 1 binary64)) b_2)","(/.f64 (/.f64 c #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 (/.f64 c b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 c #s(literal -1 binary64)))","(/.f64 (neg.f64 c) (neg.f64 b_2))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (/.f64 c #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 c #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 c))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 b_2) c))","(/.f64 (/.f64 c b_2) #s(literal 1 binary64))","(/.f64 c b_2)","(neg.f64 (/.f64 (neg.f64 c) b_2))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b_2)) (/.f64 (neg.f64 c) b_2))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(pow.f64 (/.f64 a (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 a b_2) #s(literal -3 binary64))) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (-.f64 (pow.f64 (/.f64 a b_2) #s(literal -2 binary64)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (/.f64 b_2 a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2)) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2))) (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a))) (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) a))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 (*.f64 a #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64))) (neg.f64 (*.f64 a #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 a #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (*.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 a #s(literal -1 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) a)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 a #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64)) (*.f64 a #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 a))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 a #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (*.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (*.f64 a #s(literal -1 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (*.f64 a #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a)","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)) (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 a #s(literal -1 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 a (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 a #s(literal -1 binary64)))","(/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a) (/.f64 b_2 a))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2)))","(-.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) (*.f64 a #s(literal -1 binary64))) (/.f64 b_2 (*.f64 a #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 a #s(literal -1 binary64))) (/.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 a #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a #s(literal -1 binary64))) (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a #s(literal -1 binary64))))","(-.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a #s(literal -1 binary64))) (/.f64 b_2 (*.f64 a #s(literal -1 binary64))))","(-.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) (neg.f64 a)) (/.f64 b_2 (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a)) (/.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (neg.f64 a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)) (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 a)))","(-.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 a)) (/.f64 b_2 (neg.f64 a)))","(+.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 #s(literal -1 binary64) a)) (/.f64 b_2 a))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) a) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b_2)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal -1 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (*.f64 a #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 a) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 a #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal 1 binary64) (*.f64 a #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 a #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -1 binary64) a)","(neg.f64 (pow.f64 a #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 a)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) (fma.f64 b_2 b_2 (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) b_2))))","(/.f64 (-.f64 (pow.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (fma.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 b_2 b_2))) (*.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2)))","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2)))))","(/.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2)) (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2)))) (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64))))","(fma.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 b_2))","(fma.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b_2))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))","(-.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(-.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))))))","(-.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(-.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)","(+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (sqrt.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(pow.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (hypot.f64 (*.f64 b_2 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 c a)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (-.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fabs.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(exp.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 a)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)))","(*.f64 (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) a) (/.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) (neg.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (neg.f64 (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) a)","(/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))))","(/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(-.f64 (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))) (/.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)))","(exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (fma.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (*.f64 c a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (*.f64 b_2 b_2))) (*.f64 (*.f64 c a) (fma.f64 b_2 b_2 (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (*.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)))) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 b_2 b_2))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (*.f64 b_2 b_2))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (*.f64 c a) (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (*.f64 b_2 b_2))","(fma.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (*.f64 b_2 b_2))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (*.f64 b_2 b_2))","(fma.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)) (*.f64 b_2 b_2))","(fma.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 b_2 b_2))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 c a (fma.f64 b_2 b_2 (*.f64 b_2 b_2)))","(fma.f64 a c (fma.f64 b_2 b_2 (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 b_2 b_2 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(+.f64 (fma.f64 b_2 b_2 (*.f64 b_2 b_2)) (*.f64 c a))","(+.f64 (*.f64 c a) (fma.f64 b_2 b_2 (*.f64 b_2 b_2)))","(+.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (*.f64 c a) (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (*.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (pow.f64 b_2 #s(literal 4 binary64)))) (pow.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 b_2 b_2) c) a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 b_2 b_2) c) a))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 b_2 b_2) c) a))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 c a))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 c a))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 c a))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2) (*.f64 c a))","(fma.f64 c a (*.f64 b_2 b_2))","(fma.f64 a c (*.f64 b_2 b_2))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 c a))","(fma.f64 b_2 b_2 (*.f64 c a))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(+.f64 (*.f64 c a) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2)","(*.f64 #s(literal 1 binary64) (*.f64 b_2 b_2))","(*.f64 (*.f64 b_2 b_2) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b_2) b_2))","(*.f64 (neg.f64 b_2) (neg.f64 b_2))","(*.f64 b_2 b_2)","(pow.f64 (*.f64 b_2 b_2) #s(literal 1 binary64))","(pow.f64 (neg.f64 b_2) #s(literal 2 binary64))","(pow.f64 b_2 #s(literal 2 binary64))","(neg.f64 (*.f64 (neg.f64 b_2) b_2))","(exp.f64 (*.f64 (log.f64 (neg.f64 b_2)) #s(literal 2 binary64)))","(exp.f64 (*.f64 #s(literal 2 binary64) (log.f64 b_2)))","(*.f64 (exp.f64 (*.f64 (log.f64 #s(literal -2 binary64)) #s(literal -1 binary64))) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (exp.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -2 binary64)))) (exp.f64 (*.f64 #s(literal -1 binary64) (log.f64 b_2))))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 b_2)) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 #s(literal -2 binary64))))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 #s(literal -2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 b_2)))","(*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1/2 binary64)) (pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 b_2 #s(literal -1 binary64)))","(pow.f64 (pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 b_2 #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (*.f64 #s(literal -2 binary64) b_2)))","(pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 b_2))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 b_2)))","(/.f64 #s(literal -1/2 binary64) b_2)","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) (log.f64 (*.f64 #s(literal -2 binary64) b_2))))","(exp.f64 (log.f64 (/.f64 #s(literal -1/2 binary64) b_2)))","(*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (log.f64 (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 b_2) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (log.f64 #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (log.f64 #s(literal -2 binary64)) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (log.f64 b_2) #s(literal -1 binary64)) (*.f64 (log.f64 b_2) #s(literal -1 binary64))) (*.f64 (*.f64 (log.f64 #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (log.f64 b_2) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1 binary64) (log.f64 b_2)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -2 binary64))) (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -1 binary64) (log.f64 b_2)) (*.f64 #s(literal -1 binary64) (log.f64 b_2))) (*.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -2 binary64))) (*.f64 #s(literal -1 binary64) (log.f64 b_2))))))","(neg.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)))","(fma.f64 (log.f64 #s(literal -2 binary64)) #s(literal -1 binary64) (*.f64 (log.f64 b_2) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (log.f64 #s(literal -2 binary64)) (*.f64 #s(literal -1 binary64) (log.f64 b_2)))","(+.f64 (*.f64 (log.f64 #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (log.f64 b_2) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -2 binary64))) (*.f64 #s(literal -1 binary64) (log.f64 b_2)))","(log.f64 (/.f64 #s(literal -1/2 binary64) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(*.f64 (/.f64 (pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (*.f64 #s(literal -2 binary64) b_2) #s(literal -1/2 binary64)) (pow.f64 c #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) (pow.f64 c #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) c)","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) b_2) (neg.f64 c))","(*.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 c) b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))","(*.f64 c (/.f64 #s(literal -1/2 binary64) b_2))","(pow.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) c) b_2)","(/.f64 (/.f64 #s(literal -1/2 binary64) b_2) (pow.f64 c #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) b_2)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b_2 c) #s(literal -2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64))))","(/.f64 (/.f64 #s(literal 1/2 binary64) b_2) (neg.f64 (pow.f64 c #s(literal -1 binary64))))","(/.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b_2) c))","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c))","(neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 2 binary64))","(pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 c) a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 c a) #s(literal -1 binary64)) (*.f64 (*.f64 c a) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 c a) #s(literal -1 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -1 binary64)) (*.f64 (*.f64 c a) #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) (*.f64 (*.f64 c a) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (-.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2)))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 c a)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (neg.f64 c) a)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2)) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2)))) (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)) (neg.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64))) (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2))) (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (*.f64 b_2 b_2) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 c) a (*.f64 (neg.f64 b_2) b_2))","(fma.f64 (neg.f64 a) c (*.f64 (neg.f64 b_2) b_2))","(fma.f64 (*.f64 c a) #s(literal -1 binary64) (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 c a) (*.f64 (neg.f64 b_2) b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 c) a))","(fma.f64 c (neg.f64 a) (*.f64 (neg.f64 b_2) b_2))","(fma.f64 a (neg.f64 c) (*.f64 (neg.f64 b_2) b_2))","(fma.f64 (neg.f64 b_2) b_2 (*.f64 (neg.f64 c) a))","(fma.f64 b_2 (neg.f64 b_2) (*.f64 (neg.f64 c) a))","(sqrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))))))","(-.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (fma.f64 c a (*.f64 (neg.f64 b_2) b_2)))))","(-.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 c a))","(-.f64 (*.f64 (neg.f64 c) a) (*.f64 b_2 b_2))","(-.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(fabs.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (*.f64 (*.f64 c a) #s(literal -1 binary64)) (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) (*.f64 (*.f64 c a) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 b_2) b_2) (*.f64 (neg.f64 c) a))","(+.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b_2) b_2))","(+.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a)","(*.f64 a (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 b_2) a) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (-.f64 (*.f64 (*.f64 (neg.f64 b_2) a) (*.f64 (neg.f64 b_2) a)) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 (neg.f64 b_2) a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) #s(literal 3 binary64)) (pow.f64 (*.f64 a (neg.f64 b_2)) #s(literal 3 binary64))) (fma.f64 (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (-.f64 (*.f64 (*.f64 a (neg.f64 b_2)) (*.f64 a (neg.f64 b_2))) (*.f64 (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a (neg.f64 b_2))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 a (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))) (neg.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))","(/.f64 (neg.f64 (*.f64 a (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))","(/.f64 (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 a (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))) (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 (*.f64 a (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (*.f64 a (neg.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a (-.f64 (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a (*.f64 (neg.f64 b_2) a))","(fma.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 a (neg.f64 b_2)))","(+.f64 (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a) (*.f64 (neg.f64 b_2) a))","(+.f64 (*.f64 a (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))) (*.f64 a (neg.f64 b_2)))","(/.f64 (+.f64 (pow.f64 (log.f64 b_2) #s(literal 3 binary64)) (pow.f64 (log.f64 #s(literal -2 binary64)) #s(literal 3 binary64))) (fma.f64 (log.f64 b_2) (log.f64 b_2) (-.f64 (pow.f64 (log.f64 #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (log.f64 b_2) (log.f64 #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 #s(literal -2 binary64)) #s(literal 2 binary64)) (pow.f64 (log.f64 b_2) #s(literal 2 binary64)))) (neg.f64 (log.f64 (/.f64 #s(literal -2 binary64) b_2))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 #s(literal -2 binary64)) #s(literal 3 binary64)) (pow.f64 (log.f64 b_2) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 #s(literal -2 binary64)) (log.f64 #s(literal -2 binary64)) (-.f64 (pow.f64 (log.f64 b_2) #s(literal 2 binary64)) (*.f64 (log.f64 #s(literal -2 binary64)) (log.f64 b_2))))))","(/.f64 (-.f64 (pow.f64 (log.f64 #s(literal -2 binary64)) #s(literal 2 binary64)) (pow.f64 (log.f64 b_2) #s(literal 2 binary64))) (log.f64 (/.f64 #s(literal -2 binary64) b_2)))","(/.f64 (+.f64 (pow.f64 (log.f64 #s(literal -2 binary64)) #s(literal 3 binary64)) (pow.f64 (log.f64 b_2) #s(literal 3 binary64))) (fma.f64 (log.f64 #s(literal -2 binary64)) (log.f64 #s(literal -2 binary64)) (-.f64 (pow.f64 (log.f64 b_2) #s(literal 2 binary64)) (*.f64 (log.f64 #s(literal -2 binary64)) (log.f64 b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (log.f64 (/.f64 #s(literal -2 binary64) b_2)) (-.f64 (pow.f64 (log.f64 #s(literal -2 binary64)) #s(literal 2 binary64)) (pow.f64 (log.f64 b_2) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 #s(literal -2 binary64)) (log.f64 #s(literal -2 binary64)) (-.f64 (pow.f64 (log.f64 b_2) #s(literal 2 binary64)) (*.f64 (log.f64 #s(literal -2 binary64)) (log.f64 b_2)))) (+.f64 (pow.f64 (log.f64 #s(literal -2 binary64)) #s(literal 3 binary64)) (pow.f64 (log.f64 b_2) #s(literal 3 binary64)))))","(-.f64 (/.f64 (pow.f64 (log.f64 #s(literal -2 binary64)) #s(literal 2 binary64)) (log.f64 (/.f64 #s(literal -2 binary64) b_2))) (/.f64 (pow.f64 (log.f64 b_2) #s(literal 2 binary64)) (log.f64 (/.f64 #s(literal -2 binary64) b_2))))","(+.f64 (log.f64 b_2) (log.f64 #s(literal -2 binary64)))","(+.f64 (log.f64 #s(literal -2 binary64)) (log.f64 b_2))","(log.f64 (*.f64 #s(literal -2 binary64) b_2))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":266.545166015625,"type":"rewrite"},{"compiler":[[42828,4262]],"memory":[[9484288,84930112]],"time":173.5078125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))) a)) (*.f64 a a))","fresh",52.95031604542211,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))))) a)","fresh",47.7258863473856,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))))) a)","fresh",46.36396632403235,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",31.865488310583263,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",41.99398968926333,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) b_2)) a)","fresh",47.49838169037638,"binary64"],["(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","done",46.513309462435124,"binary64"],["(/.f64 #s(approx (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (*.f64 c a)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","fresh",50.392635261334775,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))))))","fresh",46.983988022437224,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)))","fresh",47.5910022634473,"binary64"],["(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 #s(approx (neg (+ (* c a) (* b_2 b_2))) (*.f64 (neg.f64 a) c))) b_2))","fresh",46.98398804617637,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","done",42.73658753183451,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (exp.f64 (*.f64 (log.f64 (*.f64 b_2 #s(literal 2 binary64))) #s(literal -1 binary64))) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","fresh",43.45973564315624,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","done",41.80079770758671,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) c))))","fresh",41.83433271735514,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","fresh",42.58387595018011,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","done",42.537002532089,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64))) #s(literal -2 binary64)))","fresh",53.646280402947944,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (*.f64 #s(literal -2 binary64) b_2)))))","fresh",43.52181939224975,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","done",41.447092476192545,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (neg.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2))))))","fresh",43.49819100745124,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","done",42.611221282089,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 a #s(literal -1/2 binary64))) #s(literal -1 binary64)))))","fresh",54.079825929339066,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","done",41.380686226192545,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64))) #s(literal -1 binary64))))","fresh",53.69225584087878,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","fresh",58.25359938012903,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","done",58.26911049822248,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","fresh",58.26911049822248,"binary64"],["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (*.f64 (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -1 binary64))) #s(literal 1/2 binary64))))","fresh",58.26911049822248,"binary64"]],"compiler":[[991,212],[23,15],[50,15],[26,17],[13,10],[18,13],[21,15],[21,15],[28,16],[19,14],[25,14],[20,15],[24,17],[28,21],[19,14],[23,17],[19,14],[19,14],[23,18],[23,18],[19,14],[22,17],[19,14],[23,18],[19,14],[23,18],[31,22],[31,22],[31,22],[37,26]],"count":[[1164,29]],"kept":[{"done":[7,7],"fresh":[12,10],"new":[1140,10],"picked":[5,2]}],"memory":[[-1823632,56828208]],"min-error":[[5.8157677684328775,"binary64"]],"time":46.988037109375,"type":"prune"},{"accuracy":[10.371879458982136],"baseline":[31.865488310583263],"branch":[["a",31.86548831058327,1,"binary64"],["b_2",10.371879458982136,3,"binary64"],["c",31.865488310583284,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",15.738953614323814,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[43,3]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 #s(approx (neg (+ (* c a) (* b_2 b_2))) (*.f64 (neg.f64 a) c))) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) c))))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))))))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))) a)) (*.f64 a a))","(/.f64 #s(approx (+ (* b_2 b_2) (+ (* c a) (* b_2 b_2))) (*.f64 c a)) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 b_2 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (*.f64 a b_2) (*.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) a)) (*.f64 a a))","(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 #s(approx (+ (* c a) (* b_2 b_2)) (*.f64 c a)))))) a)","(/.f64 (-.f64 (/.f64 (*.f64 (neg.f64 b_2) b_2) (+.f64 #s(literal 0 binary64) b_2)) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) a))","(/.f64 (-.f64 (neg.f64 b_2) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) a)","(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) b_2) (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 b_2 (*.f64 #s(literal 1/2 binary64) c)))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2) #s(literal -1 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (neg.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2))))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 a #s(literal -1/2 binary64))) #s(literal -1 binary64)))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b_2 c) #s(literal -2 binary64))) #s(literal -1 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64))) #s(literal -2 binary64)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (exp.f64 (*.f64 (log.f64 (*.f64 b_2 #s(literal 2 binary64))) #s(literal -1 binary64))) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (*.f64 #s(literal -2 binary64) b_2)))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (*.f64 (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -1 binary64))) #s(literal 1/2 binary64))))","(/.f64 (-.f64 (neg.f64 b_2) (/.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64))) (/.f64 (sqrt.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (neg.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)))))) a)"]],"memory":[[209776,23993104]],"oracle":[64.0],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":43.444091796875,"times":[[9.798095703125,"a"],[9.869873046875,"b_2"],[10.39208984375,"c"],[10.322021484375,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[12.724788428182444],"baseline":[41.380686226192545],"branch":[["b_2",12.724788428182444,3,"binary64"]],"compiler":[[1,3]],"count":[[18,3]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 #s(approx (neg (+ (* c a) (* b_2 b_2))) (*.f64 (neg.f64 a) c))) b_2))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 b_2 #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) c))))","(/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2))) a)"]],"memory":[[-5218816,4216432]],"oracle":[63.42447140324464],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":6.31494140625,"times":[[5.06787109375,"b_2"]],"type":"regimes"},{"accuracy":[21.468006298878983],"baseline":[41.380686226192545],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",32.094321078866415,3,"binary64"],["b_2",21.468006298878983,2,"binary64"]],"compiler":[[13,10],[1,3]],"count":[[14,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (/.f64 #s(literal 1/2 binary64) (/.f64 b_2 c))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -1/2 binary64) (/.f64 b_2 c)))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) c) a) b_2)) a)","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"]],"memory":[[6175232,6175232]],"oracle":[62.989647486656736],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))"]],"repr":["binary64"],"time":8.677001953125,"times":[[3.6259765625,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[3.7548828125,"b_2"]],"type":"regimes"},{"accuracy":[21.542225048878983],"baseline":[41.380686226192545],"branch":[["b_2",21.542225048878983,2,"binary64"]],"compiler":[[1,3]],"count":[[5,2]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 c (/.f64 #s(literal -1/2 binary64) b_2)))"]],"memory":[[-5954384,2306864]],"oracle":[62.90262256254259],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))"]],"repr":["binary64"],"time":2.74609375,"times":[[2.14990234375,"b_2"]],"type":"regimes"},{"accuracy":[41.38068622619251],"baseline":[41.380686226192545],"branch":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",41.38068622619256,1,"binary64"],["c",41.38068622619251,1,"binary64"],["a",41.38068622619253,1,"binary64"],["b_2",41.380686226192566,1,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[3,1]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))"]],"memory":[[-1287904,7038416]],"oracle":[58.94458602234855],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))"]],"repr":["binary64"],"time":7.511962890625,"times":[[1.73095703125,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[1.60009765625,"c"],[1.72900390625,"a"],[1.629150390625,"b_2"]],"type":"regimes"},{"accuracy":[58.26911049822249],"baseline":[58.26911049822248],"branch":[["b_2",58.26911049822254,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",58.269110498222496,1,"binary64"],["a",58.26911049822249,1,"binary64"],["c",58.26911049822249,1,"binary64"]],"compiler":[[1,3],[13,10],[1,3],[1,3]],"count":[[2,1]],"inputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 c b_2) #s(literal 1/2 binary64))))"]],"link":["."],"memory":[[6606336,6606336]],"name":["quad2m (problem 3.2.1, negative)"],"oracle":[58.26911049822248],"outputs":[["#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))"]],"repr":["binary64"],"time":6.291015625,"times":[[1.31982421875,"b_2"],[1.303955078125,"(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[1.3720703125,"a"],[1.3740234375,"c"]],"type":"regimes"},{"bstep":[[13.755126953125,2.1473535620614933e+133,1.326417435585385e+137],[20.279052734375,-3.5521367600507943e-67,-8.559549914865575e-70]],"compiler":[[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[24,18],[13,11],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[13,11],[19,15],[15,13],[1,3]],"memory":[[-5021344,11606704]],"method":["binary-search","binary-search"],"mixsample":[[1.017578125,"adjust",800],[2.552490234375,"ival-div",0],[0.048583984375,"ival-mult",800],[0.18310546875,"ival-sqrt",1600],[0.18994140625,"ival-mult",400],[3.697265625,"ival-mult",0],[0.101318359375,"ival-sub",1600],[0.118408203125,"ival-assert",0],[3.0068359375,"ival-sub",0],[0.17138671875,"ival-true",0],[1.94140625,"ival-sqrt",0],[0.27783203125,"ival-sub",400],[0.37939453125,"adjust",2000],[1.361328125,"ival-neg",0],[0.433349609375,"ival-sqrt",400]],"outcomes":[[2.937255859375,1,"valid",23],[1.73876953125,0,"invalid",21],[4.694580078125,2,"valid",26],[14.052734375,0,"valid",207]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":38.306884765625,"type":"bsearch"},{"bstep":[[15.419921875,5.524741498861725e-54,3.257023097309415e-50],[1.0419921875,-3.5521367600507943e-67,-8.559549914865575e-70]],"compiler":[[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[24,18],[18,14],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[18,14],[19,15],[15,13],[1,3]],"memory":[[6120800,6120800]],"method":["binary-search","binary-search"],"mixsample":[[1.530029296875,"ival-sub",0],[1.2255859375,"ival-div",0],[0.1025390625,"ival-true",0],[1.8818359375,"ival-mult",0],[1.167724609375,"ival-sqrt",0],[0.052734375,"ival-assert",0],[0.699951171875,"ival-neg",0]],"outcomes":[[1.483642578125,0,"invalid",21],[8.8251953125,0,"valid",128]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":19.072998046875,"type":"bsearch"},{"bstep":[[20.887939453125,-1.6149658949027868e-279,-4.679542127932956e-285]],"compiler":[[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[15,13],[1,3]],"memory":[[-397696,7601552]],"method":["binary-search"],"mixsample":[[2.162353515625,"ival-sub",0],[1.4423828125,"ival-div",0],[0.126708984375,"ival-true",0],[2.800048828125,"ival-mult",0],[1.362060546875,"ival-sqrt",0],[0.103271484375,"ival-assert",0],[0.994384765625,"ival-neg",0]],"outcomes":[[4.4384765625,0,"invalid",68],[9.726806640625,0,"valid",144]],"stop":[["narrow-enough",1]],"time":25.154052734375,"type":"bsearch"},{"bstep":[[1.373046875,-1.6149658949027868e-279,-4.679542127932956e-285]],"compiler":[[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[15,13],[1,3]],"memory":[[715360,715360]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.909912109375,"type":"bsearch"},{"egraph":[[7,5473,267,0.037259659],[6,2274,267,0.034876319],[5,559,267,0.011656579],[4,314,267,0.003331473],[3,219,267,0.002333752],[2,141,267,0.001693463],[1,93,267,0.001396477],[0,60,267,0.001186584]],"inputs":[["(if (<=.f64 b_2 #s(literal -1942668892225729/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (if (<=.f64 b_2 #s(literal 2349999999999999886091180871200340651081460802722208784055707882345515516743359405520479062478911017213525193512958197352989227007082496 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -1942668892225729/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (if (<=.f64 b_2 #s(literal 336999333339383/26959946667150639794667015087019630673637144422540572481103610249216 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -1607262910779401/334846439745708537796382827831250565800439003657979252326171996365734703476542538279124493379904955664873335286735358382870982901778848138624518049209330462622955242963257218294408581408199098183686068192282702343236935664606211486223923248314908216080349889927704442739388432239144512088662677127168 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -1607262910779401/334846439745708537796382827831250565800439003657979252326171996365734703476542538279124493379904955664873335286735358382870982901778848138624518049209330462622955242963257218294408581408199098183686068192282702343236935664606211486223923248314908216080349889927704442739388432239144512088662677127168 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))"]],"memory":[[-3689456,12225168]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 #s(literal -1942668892225729/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (if (<=.f64 b_2 #s(literal 2349999999999999886091180871200340651081460802722208784055707882345515516743359405520479062478911017213525193512958197352989227007082496 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -1942668892225729/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (if (<=.f64 b_2 #s(literal 2349999999999999886091180871200340651081460802722208784055707882345515516743359405520479062478911017213525193512958197352989227007082496 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -1942668892225729/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (if (<=.f64 b_2 #s(literal 336999333339383/26959946667150639794667015087019630673637144422540572481103610249216 binary64)) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -1942668892225729/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (if (<=.f64 b_2 #s(literal 336999333339383/26959946667150639794667015087019630673637144422540572481103610249216 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","(if (<=.f64 b_2 #s(literal -1607262910779401/334846439745708537796382827831250565800439003657979252326171996365734703476542538279124493379904955664873335286735358382870982901778848138624518049209330462622955242963257218294408581408199098183686068192282702343236935664606211486223923248314908216080349889927704442739388432239144512088662677127168 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))","(if (<=.f64 b_2 #s(literal -1607262910779401/334846439745708537796382827831250565800439003657979252326171996365734703476542538279124493379904955664873335286735358382870982901778848138624518049209330462622955242963257218294408581408199098183686068192282702343236935664606211486223923248314908216080349889927704442739388432239144512088662677127168 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a))))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))"]],"stop":[["node limit",1]],"time":120.41015625,"type":"simplify"},{"compiler":[[267,61],[31,22],[0,3],[10,9],[5,6],[19,14],[5,6],[5,6],[5,6],[5,6],[10,9],[10,9],[5,6],[10,9],[5,6]],"egraph":[[0,8257,230,0.08764117],[2,1599,230,0.031219048],[1,232,230,0.006822387],[0,62,234,0.002787486],[0,38,234,0.000373846],[0,8218,2554,0.104438152],[2,5611,2679,0.029618582],[1,1657,2699,0.017103756],[0,528,2732,0.005278446],[0,8304,8539,0.089439499],[1,4873,8838,0.029200507],[0,1437,9225,0.016845133],[0,8635,209,0.088471704],[2,1640,211,0.030549718],[1,233,212,0.005757292],[0,62,216,0.001668275],[0,42,226,0.000331454]],"memory":[[-3247712,6599520]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":1143.35205078125,"type":"soundness"},{"compiler":[[267,61],[267,61],[89,26],[89,26],[13,10],[13,10]],"memory":[[4015632,37345040]],"remove-preprocessing":[[],[],[],[],[],[],[]],"time":76.85791015625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]