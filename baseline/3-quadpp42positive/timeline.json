[{"memory":[[20128,20128]],"time":0.070068359375,"type":"start"},{"compiler":[[19,16]],"memory":[[3219504,44648416]],"method":["search"],"sampling":[[12,{"invalid":0.16382229139981064,"precondition":0.0014641286106780171,"unknown":0.2467085697866196,"valid":0.5880050102028918}],[11,{"invalid":0.1404191069141234,"precondition":0.0014641286106780171,"unknown":0.29058954069728316,"valid":0.5675272237779154}],[10,{"invalid":0.13261804541889433,"precondition":0.0014641286106780171,"unknown":0.3627493595281521,"valid":0.5031684664422755}],[9,{"invalid":0.08581167644751986,"precondition":0.0014641286106780171,"unknown":0.4290583822375993,"valid":0.48366581270420284}],[8,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.48366581270420284,"valid":0.4524615667232865}],[7,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.5616764276564936,"valid":0.37445095177099574}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":173.571044921875,"type":"analyze"},{"bogosity":[{"infinite":0.06307773601095036,"invalid":0.24922682317866574,"precondition":0.0014641286106780171,"valid":0.6862313121997059}],"memory":[[18921056,450164384]],"mixsample":[[9.009521484375,"ival-sub",1200],[0.171142578125,"ival-sub",4800],[89.235107421875,"adjust",800],[137.63330078125,"ival-div",0],[9.526611328125,"ival-mult",1200],[0.041748046875,"ival-sqrt",3200],[3.3740234375,"ival-sub",1600],[5.733642578125,"ival-assert",0],[0.02197265625,"ival-sub",3600],[0.428955078125,"ival-sqrt",4800],[18.275634765625,"ival-sqrt",1200],[72.33837890625,"ival-sub",0],[5.40966796875,"ival-sub",400],[96.36181640625,"ival-sqrt",0],[101.82275390625,"ival-add",0],[6.47705078125,"ival-mult",800],[0.806396484375,"ival-sub",4400],[6.931396484375,"ival-sub",800],[0.89208984375,"ival-mult",1600],[4.05224609375,"adjust",2800],[0.014892578125,"ival-div",2000],[0.06005859375,"ival-sqrt",3600],[0.266357421875,"ival-sub",4000],[9.515380859375,"ival-sqrt",400],[6.693603515625,"ival-sqrt",2000],[0.185791015625,"ival-mult",2000],[11.783935546875,"ival-sqrt",800],[3.562744140625,"ival-sub",2000],[0.01904296875,"ival-sub",3200],[0.678466796875,"ival-sqrt",4000],[0.006103515625,"ival-sub",6800],[0.018798828125,"ival-sqrt",6800],[1.7080078125,"ival-sqrt",4400],[33.009521484375,"adjust",2000],[4.21875,"ival-sub",2400],[7.41796875,"ival-mult",400],[5.95263671875,"ival-sqrt",1600],[336.27197265625,"ival-mult",0],[0.01123046875,"ival-add",2000],[0.082763671875,"ival-div",800],[9.935791015625,"ival-true",0],[8.07275390625,"ival-sqrt",2400],[0.06005859375,"ival-add",800],[14.146484375,"exact",0],[68.65380859375,"ival-neg",0]],"outcomes":[[283.93408203125,1,"valid",1331],[373.92138671875,2,"valid",1230],[119.807861328125,0,"invalid",941],[69.091552734375,3,"valid",177],[664.003173828125,0,"valid",5518]],"time":2063.487060546875,"type":"sample"},{"compiler":[[17,14],[72,16],[72,16]],"confusion":[[106,0,15,135]],"explanations":[["/.f64","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","n/o",1,0,[["(*.f64 #s(literal 2 binary64) a)","overflow",1]],[[]]],["-.f64","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","nan-rescue",4,0,[["(*.f64 b b)","overflow",66],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",26],["(*.f64 a c)","overflow",26]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","uflow-rescue",4,0,[["(*.f64 b b)","underflow",38],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",33],["(*.f64 a c)","underflow",33],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",4]],[[1,2]]],["/.f64","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","u/n",8,0,[["(*.f64 b b)","underflow",38],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",33],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","underflow",21],["(*.f64 a c)","underflow",33],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",4]],[[]]],["+.f64","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cancellation",45,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","oflow-rescue",83,0,[["(*.f64 b b)","overflow",66],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",26],["(*.f64 a c)","overflow",26],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","overflow",83]],[[1,2]]]],"fperrors":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",10,0,false,1,[1.0326098201689969e-194,1.8888595853206402e+149,4.6192874302238583e+30]],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))",4,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))",88,0,false,1,[3.2812125950858135e-122,1.5259976382052252e-155,1.3954224672378931e-244]],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))",45,0,false,0,false],["a",0,0,false,0,false],["(*.f64 #s(literal 4 binary64) (*.f64 a c))",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["#s(literal 4 binary64)",0,0,false,0,false],["(*.f64 b b)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) a)",0,0,false,0,false],["c",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(neg.f64 b)",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[3,1],[2,22],[1,98],[0,135]],"maybe-confusion":[[106,0,0,15,0,135]],"memory":[[-21179872,87078704]],"mixsample":[[0.43212890625,"ival-sub",1200],[0.425537109375,"ival-sqrt",2000],[6.78173828125,"ival-div",0],[4.08642578125,"adjust",800],[0.18896484375,"ival-mult",1200],[0.11962890625,"ival-sub",1600],[0.1767578125,"ival-sub",2000],[0.59326171875,"ival-sqrt",800],[0.3271484375,"ival-assert",0],[0.04296875,"ival-sqrt",4000],[3.614990234375,"ival-sub",0],[0.645751953125,"ival-sqrt",1200],[0.214111328125,"ival-sub",400],[5.55419921875,"ival-sqrt",0],[0.06103515625,"ival-sqrt",4400],[1.564208984375,"adjust",2000],[0.29931640625,"ival-sub",2400],[0.02490234375,"ival-sub",4400],[0.447021484375,"ival-mult",800],[4.6689453125,"ival-add",0],[0.3544921875,"ival-sub",800],[0.245361328125,"ival-mult",400],[0.270263671875,"ival-sqrt",1600],[17.0654296875,"ival-mult",0],[0.01708984375,"ival-mult",1600],[0.12841796875,"adjust",2800],[0.819091796875,"ival-true",0],[0.405517578125,"ival-sqrt",2400],[0.02490234375,"ival-sub",4000],[0.7900390625,"exact",0],[3.22216796875,"ival-neg",0],[0.378662109375,"ival-sqrt",400]],"outcomes":[[12.7705078125,1,"valid",54],[24.0146484375,2,"valid",70],[2.493896484375,3,"valid",6],[52.30859375,0,"valid",382]],"time":239.56591796875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[17,14]],"egraph":[[0,2793,15,0.006777298],[14,2793,16,0.01570049],[13,2787,16,0.016950693],[12,2787,16,0.014781865],[11,2786,16,0.014318299],[10,2731,16,0.014974687],[9,2611,16,0.017284083],[8,2291,16,0.016294985],[7,1131,16,0.013802635],[6,657,16,0.006680598],[5,370,16,0.003429472],[4,232,16,0.001714477],[3,156,16,0.001003006],[2,74,16,0.000581878],[1,41,16,0.000318668],[0,23,17,0.00031632],[0,14,17,0.00017135],[6,7900,144,0.011061621],[5,6134,144,0.036266528],[4,3247,144,0.035467495],[3,1255,144,0.021011017],[2,421,144,0.007280844],[1,161,144,0.001323287],[0,56,158,0.00059315]],"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[2891520,10665328]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["node limit",1]],"symmetry":[[]],"time":308.6689453125,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.078125,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",25.34226188210102,"binary64"]],"compiler":[[17,14]],"memory":[[352880,352880]],"time":0.510009765625,"type":"prune"},{"egraph":[[0,2793,64,0.007491026],[14,2793,68,0.016492275],[13,2787,68,0.017315071],[12,2787,68,0.012966303],[11,2786,68,0.01298993],[10,2731,68,0.015500103],[9,2611,68,0.016333655],[8,2291,68,0.019523688],[7,1131,68,0.01606646],[6,657,68,0.007353501],[5,370,68,0.003402193],[4,232,68,0.002367635],[3,156,68,0.001103747],[2,74,68,0.000690742],[1,41,68,0.000345031],[0,23,70,0.000321613],[0,14,70,0.000178779]],"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",1]],"memory":[[-3387312,4697712]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal 4 binary64))","#s(literal 4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":189.306884765625,"type":"simplify"},{"compiler":[[72,16]],"locations":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.8085937500000001],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",2.196033275602541],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",10.413486334482704],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",20.358910206262816]],"memory":[[-1429920,16145264]],"mixsample":[[0.164794921875,"ival-sub",1200],[0.125,"ival-sqrt",2000],[2.9619140625,"ival-div",0],[1.678955078125,"adjust",800],[0.09033203125,"ival-mult",1200],[0.046875,"ival-sub",1600],[0.070068359375,"ival-sub",2000],[0.23388671875,"ival-sqrt",800],[0.11181640625,"ival-assert",0],[0.012939453125,"ival-sqrt",4000],[1.4931640625,"ival-sub",0],[0.394775390625,"ival-sqrt",1200],[0.091552734375,"ival-sub",400],[3.1728515625,"ival-sqrt",0],[0.02685546875,"ival-sqrt",4400],[0.7333984375,"adjust",2000],[0.109375,"ival-sub",2400],[0.01025390625,"ival-sub",4400],[0.14599609375,"ival-mult",800],[1.942626953125,"ival-add",0],[0.132080078125,"ival-sub",800],[0.0966796875,"ival-mult",400],[0.094970703125,"ival-sqrt",1600],[19.26171875,"ival-mult",0],[0.007080078125,"ival-mult",1600],[0.1220703125,"adjust",2800],[0.20458984375,"ival-true",0],[0.185546875,"ival-sqrt",2400],[0.0048828125,"ival-sub",4000],[0.29248046875,"exact",0],[1.471435546875,"ival-neg",0],[0.189453125,"ival-sqrt",400]],"outcomes":[[5.482177734375,1,"valid",27],[10.27978515625,2,"valid",35],[1.01806640625,3,"valid",3],[34.674072265625,0,"valid",191]],"time":71.465087890625,"type":"localize"},{"count":[[5,98]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[705648,8226592]],"outputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[2.907958984375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[4.064208984375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[1.552001953125,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[1.296875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[3.301025390625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[2.718994140625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[2.609130859375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[3.032958984375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[1.89501953125,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":25.410888671875,"type":"series"},{"count":[[98,97]],"egraph":[[0,8386,2654,0.101091165],[2,6121,2789,0.033074322],[1,1738,2817,0.023535443],[0,545,2858,0.006211149]],"inputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[2411088,51469280]],"method":["egg-herbie"],"outputs":[["(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) #s(literal -2 binary64))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal -2 binary64))) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 (neg.f64 c) (/.f64 c (pow.f64 b #s(literal 3 binary64))))) a (/.f64 (neg.f64 c) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) #s(literal -2 binary64))) a b)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a)))) a)","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))))) a)","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) #s(literal 2 binary64)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) a) b) a)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 a))) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(* -1 b)","(neg.f64 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64)) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1/2 binary64)))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))) b)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 2 binary64))))","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(neg.f64 (fma.f64 b (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (/.f64 (neg.f64 c) (*.f64 b b)) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64)))))) (/.f64 b a)))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) (*.f64 a a) (/.f64 a b)) #s(literal -2 binary64)) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -2 binary64) c) (*.f64 a (/.f64 a (pow.f64 b #s(literal 5 binary64)))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 c b)) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) (*.f64 a a) (/.f64 a b)) #s(literal -2 binary64)) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) #s(literal 2 binary64)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) c) b) c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":290.906005859375,"type":"simplify"},{"count":[[5,437]],"egraph":[[0,8189,44,0.059346792],[3,6896,48,0.037835018],[2,534,48,0.019126953],[1,77,49,0.002317941],[0,23,51,0.000863053],[0,14,51,0.000247466]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[3732112,50847888]],"outputs":[["(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))","(*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64)) (pow.f64 b #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))) (fma.f64 b (/.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (fma.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64)) (pow.f64 b #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) b))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b b))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) b))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 b b)) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b b))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 b b) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b b)))","(/.f64 (fma.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (*.f64 b b) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (*.f64 b b) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64)) (pow.f64 b #s(literal 9 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(neg.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (/.f64 (*.f64 b b) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 (/.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 #s(literal 1 binary64) b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal 1 binary64) b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (*.f64 b b) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 b (/.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 b #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b #s(literal 1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(-.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(+.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) b)","(+.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)) b)","(+.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(+.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(+.f64 b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(+.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 (/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(*.f64 (/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 b #s(literal 12 binary64)))) (fma.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 8 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))) (+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))) (+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (*.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64)))))","(/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 4 binary64) (*.f64 b b)) c) a))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 b #s(literal 12 binary64)))) (fma.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 8 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (*.f64 c #s(literal 4 binary64))) a (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 c #s(literal 4 binary64))) a (*.f64 b b))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))","(fma.f64 (*.f64 c #s(literal 4 binary64)) (neg.f64 a) (*.f64 b b))","(fma.f64 (neg.f64 c) (*.f64 a #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (*.f64 (neg.f64 a) c) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (neg.f64 a) (*.f64 c #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 a #s(literal 4 binary64)) (neg.f64 c) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal -1 binary64) (*.f64 b b))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 c (*.f64 #s(literal -4 binary64) a) (*.f64 b b))","(fma.f64 a (*.f64 #s(literal 4 binary64) (neg.f64 c)) (*.f64 b b))","(fma.f64 a (neg.f64 (*.f64 c #s(literal 4 binary64))) (*.f64 b b))","(fma.f64 a (*.f64 #s(literal -4 binary64) c) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (*.f64 (neg.f64 a) c) (*.f64 b b))","(fma.f64 (*.f64 b b) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (*.f64 b b) (/.f64 (*.f64 b b) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (*.f64 b b) #s(literal -1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 b (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 b b (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(sqrt.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(-.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(fabs.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 b b))","(hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(hypot.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 b b))","(hypot.f64 (*.f64 b b) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 1 binary64)))","(hypot.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(hypot.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(+.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 (/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(*.f64 (/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) a) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (neg.f64 a)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 a)))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal 1 binary64))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a) #s(literal -2 binary64))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) a)","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 #s(literal 2 binary64) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 a (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) a))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal -1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) a))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64)) (pow.f64 b #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a)) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)) a)","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))))","(neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) b))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) #s(literal -1 binary64)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) b))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 #s(literal 1 binary64) b)","(*.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(*.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b))","(*.f64 b #s(literal -1 binary64))","(*.f64 b #s(literal 1 binary64))","(pow.f64 b #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b b) #s(literal 0 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b))","(/.f64 (*.f64 b b) b)","(neg.f64 b)","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) #s(literal 0 binary64))","(fma.f64 b #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) b)","(-.f64 #s(literal 0 binary64) b)","(exp.f64 (*.f64 (log.f64 b) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b)","(+.f64 b #s(literal 0 binary64))","b","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (-.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 0 binary64)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) #s(literal 0 binary64)) (+.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (-.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":285.9560546875,"type":"rewrite"},{"compiler":[[18889,2134]],"memory":[[-2160320,49893312]],"time":118.008056640625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","fresh",47.96838039627345,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","fresh",25.34226188210102,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",29.170330330670232,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",25.419344549845267,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))) (*.f64 #s(literal 2 binary64) a))","next",28.34896439655665,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",43.86086600980058,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",40.13608739909212,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","next",49.46778547260319,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","next",25.167263342386594,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","next",25.20794708261815,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","fresh",40.383833356172644,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","fresh",46.063276334512786,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","next",40.31015039783014,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","fresh",46.30110899383636,"binary64"]],"compiler":[[27,16],[15,12],[25,14],[20,16],[28,20],[21,16],[23,18],[25,19],[15,12],[15,12],[29,20],[22,17],[22,17],[31,21],[27,16],[15,12],[25,14],[20,16],[28,20],[21,16],[23,18],[25,19],[15,12],[15,12],[29,20],[22,17],[22,17],[31,21]],"count":[[531,14]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[530,14],"picked":[1,0]}],"memory":[[844448,25880016]],"min-error":[[5.453614345049132,"binary64"]],"time":17.593994140625,"type":"prune"},{"egraph":[[0,8067,330,0.040049621],[9,7412,330,0.022993012],[8,6152,330,0.023763182],[7,3794,330,0.033444765],[6,1805,330,0.02500415],[5,993,330,0.011220467],[4,613,338,0.004729297],[3,397,338,0.002619586],[2,214,338,0.001738175],[1,116,338,0.000794232],[0,68,340,0.000615992],[0,43,352,0.000407894]],"inputs":[["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","#s(literal 1/2 binary64)","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","a","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","(*.f64 b b)","b","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(/.f64 a b)","a","b","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","(*.f64 b b)","b","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c)))","#s(literal -4 binary64)","a","(*.f64 b (/.f64 b c))","(/.f64 b c)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c))))","cost-diff",1],["(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","cost-diff",2],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","cost-diff",0],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","cost-diff",0],["(*.f64 (/.f64 a b) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","cost-diff",0],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","cost-diff",0],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(/.f64 (neg.f64 b) a)","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","cost-diff",0],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","cost-diff",0],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","cost-diff",0],["(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","cost-diff",0]],"memory":[[2110512,18798960]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","#s(literal 1/2 binary64)","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","a","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","(*.f64 b b)","b","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 a b))","(/.f64 a b)","a","b","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","(*.f64 b b)","b","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c))))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) b)","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c))","#s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c)))","(fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b))","#s(literal -4 binary64)","a","(*.f64 b (/.f64 b c))","(*.f64 (/.f64 b c) b)","(/.f64 b c)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":241.3798828125,"type":"simplify"},{"compiler":[[300,37]],"locations":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))) (*.f64 #s(literal 2 binary64) a))","accuracy",2.196033275602541],["(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","accuracy",4.53681385453628],["(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c))))","accuracy",10.413486334482704],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))","accuracy",20.358910206262816],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",0.8085937500000001],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","accuracy",2.1432586165386205],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","accuracy",10.413486334482704],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",20.358910206262816],["(*.f64 (/.f64 a b) #s(literal -2 binary64))","accuracy",0.01171875],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","accuracy",2.196033275602541],["(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","accuracy",4.490697044656084],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","accuracy",46.06582395352906],["(/.f64 (neg.f64 b) a)","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","accuracy",40.31015039783014],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",0.8085937500000001],["(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","accuracy",1.7912893841836919],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","accuracy",10.413486334482704],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",20.358910206262816]],"memory":[[1604864,43694304]],"mixsample":[[0.11865234375,"ival-sub",1200],[0.004150390625,"ival-sub",4800],[14.8154296875,"ival-div",0],[3.205078125,"adjust",800],[0.01220703125,"ival-add",4800],[0.044921875,"ival-sub",1600],[0.140869140625,"ival-assert",0],[0.040771484375,"ival-sqrt",4800],[3.279296875,"ival-sub",0],[0.485107421875,"ival-sqrt",1200],[22.81982421875,"ival-sqrt",0],[0.18603515625,"ival-sub",400],[0.041259765625,"ival-mult",800],[0.029052734375,"ival-sub",4400],[4.798583984375,"ival-add",0],[0.10302734375,"ival-sub",800],[0.01318359375,"ival-mult",1600],[0.111328125,"ival-add",400],[0.47705078125,"adjust",2800],[0.10595703125,"ival-add",2400],[0.011962890625,"ival-sub",4000],[0.274169921875,"ival-sqrt",400],[0.180419921875,"ival-add",1200],[0.265625,"ival-sqrt",2000],[0.012939453125,"ival-mult",2000],[0.12841796875,"ival-sub",2000],[0.42236328125,"ival-sqrt",800],[0.07080078125,"ival-sqrt",4000],[0.177001953125,"ival-sqrt",4400],[0.017333984375,"ival-add",4000],[1.533935546875,"adjust",2000],[0.07470703125,"ival-sub",2400],[22.394775390625,"ival-mult",0],[0.224853515625,"ival-sqrt",1600],[0.0419921875,"ival-mult",400],[0.069091796875,"ival-add",1600],[0.086669921875,"ival-add",2000],[0.399169921875,"ival-sqrt",2400],[0.23291015625,"ival-true",0],[0.583251953125,"exact",0],[0.1630859375,"ival-add",800],[0.052734375,"ival-add",4400],[1.383056640625,"ival-neg",0]],"outcomes":[[13.69189453125,1,"valid",27],[17.968505859375,2,"valid",27],[10.020751953125,3,"valid",11],[73.21533203125,0,"valid",191]],"time":148.921142578125,"type":"localize"},{"count":[[18,129]],"inputs":[["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 #s(literal 1/2 binary64) a)","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))) (*.f64 #s(literal 2 binary64) a))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))"]],"memory":[[-534384,16406592]],"outputs":[["(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -1/2 (/ b c))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 (/ b a))","(* -2 (/ a b))","(/ 1/2 a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1/2 (/ a b))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))"]],"series":[[4.5419921875,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (* (+ (* -4 a) (* b (/ b c))) c) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* -4 (* c a)) (* b b)) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[4.006103515625,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (* (+ (* -4 a) (* b (/ b c))) c) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* -4 (* c a)) (* b b)) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[3.43798828125,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (* (+ (* -4 a) (* b (/ b c))) c) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* -4 (* c a)) (* b b)) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[4.178955078125,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (* (+ (* -4 a) (* b (/ b c))) c) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* -4 (* c a)) (* b b)) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[6.89208984375,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (* (+ (* -4 a) (* b (/ b c))) c) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* -4 (* c a)) (* b b)) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[5.717041015625,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (* (+ (* -4 a) (* b (/ b c))) c) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* -4 (* c a)) (* b b)) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[4.30615234375,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (* (+ (* -4 a) (* b (/ b c))) c) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* -4 (* c a)) (* b b)) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[5.192138671875,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (* (+ (* -4 a) (* b (/ b c))) c) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* -4 (* c a)) (* b b)) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[8.577880859375,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (* (+ (* -4 a) (* b (/ b c))) c) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (* -4 (* c a)) (* b b)) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":51.29296875,"type":"series"},{"count":[[129,128]],"egraph":[[0,8622,3749,0.13153886],[1,2741,3919,0.036049287],[0,824,4036,0.010099193]],"inputs":[["(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -1/2 (/ b c))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 (/ b a))","(* -2 (/ a b))","(/ 1/2 a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1/2 (/ a b))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))"]],"memory":[[6200816,57877072]],"method":["egg-herbie"],"outputs":[["(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) a)) b) #s(literal -1/4 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(* -1/2 (/ b c))","(*.f64 (/.f64 b c) #s(literal -1/2 binary64))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(fma.f64 (/.f64 a b) #s(literal 1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) a (/.f64 #s(literal 1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (neg.f64 c) (*.f64 (/.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) b) (/.f64 #s(literal -1/2 binary64) b)) (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) b)) (*.f64 c c)) #s(literal -1/8 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 5 binary64))))) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) a (/.f64 #s(literal 1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) a)) b) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(* -2 (/ a b))","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(/ 1/2 a)","(/.f64 #s(literal 1/2 binary64) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(-.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) a) (/.f64 #s(literal -1/2 binary64) a))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(-.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 a c) (/.f64 a c))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) b) (*.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/2 binary64))) (sqrt.f64 #s(literal -4 binary64)))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (neg.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 b a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 b a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 b a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) (neg.f64 a))) a)))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 b c) #s(literal -1/4 binary64)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/16 binary64)) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64))) (neg.f64 a)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 b (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64)) (fma.f64 a (*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 c c)) #s(literal -1/32 binary64)) (*.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))))) a) #s(literal -1 binary64) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64))) (neg.f64 a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 a)) b) (neg.f64 a))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 4 binary64) c (/.f64 (*.f64 (neg.f64 b) b) a)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(fma.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (*.f64 #s(literal 1/2 binary64) b) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) c))) b (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64)) a) (*.f64 c c)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/2 binary64))) b (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) c))) b (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(* -1 b)","(neg.f64 b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)))) b)","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(*.f64 (neg.f64 (+.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 a (*.f64 b b)) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) c)))) b)","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(*.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) c) (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/2 binary64)) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (*.f64 (*.f64 c c) a)) #s(literal -1/8 binary64) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) c))) (neg.f64 (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 (neg.f64 a) a) (/.f64 c (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 a b) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) (/.f64 c (pow.f64 b #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) c))))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 #s(literal -4 binary64) a) b) (/.f64 c b) #s(literal 1 binary64)) (*.f64 b b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b)))))","(* -1/2 (/ a b))","(*.f64 (/.f64 a b) #s(literal -1/2 binary64))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 c b) a)) (neg.f64 b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(/.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 c b) a))) (neg.f64 b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(/.f64 (-.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -5/2 binary64))) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 a a)) (/.f64 c (*.f64 b b)) (*.f64 (neg.f64 (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64)))))) (neg.f64 b))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 2 binary64))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) c)) (*.f64 b a)) #s(literal -1/4 binary64) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/.f64 (fma.f64 (*.f64 a (/.f64 c b)) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) b)) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal 1/2 binary64)) (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) (*.f64 (/.f64 a b) #s(literal 1/2 binary64))) c (*.f64 #s(literal -1/2 binary64) b)) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) b)) a) #s(literal -1/8 binary64) (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64)))) (/.f64 (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) a)) (*.f64 b b))) (neg.f64 c) (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 1/2 binary64))) c (*.f64 #s(literal -1/2 binary64) b)) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (*.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) c)) b) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (*.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64))))) c)","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal 4 binary64))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/.f64 (-.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) c) (/.f64 #s(literal -1/2 binary64) c))) (/.f64 b #s(literal 4 binary64))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(/.f64 (-.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 b #s(literal 3 binary64)) a)) (/.f64 (*.f64 c c) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) b) (*.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (sqrt.f64 #s(literal -4 binary64)))) (pow.f64 c #s(literal 3 binary64)))) (-.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) #s(literal 1/2 binary64) (/.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 #s(literal 1/4 binary64) b)) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/16 binary64) (*.f64 (*.f64 b c) #s(literal -1/4 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/16 binary64))) (sqrt.f64 #s(literal -1 binary64)))) b (fma.f64 (*.f64 #s(literal 1/32 binary64) (pow.f64 b #s(literal 3 binary64))) (/.f64 c a) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/16 binary64))))) c) #s(literal -1 binary64) (*.f64 (*.f64 b c) #s(literal -1/4 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) (neg.f64 c)) b) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (fma.f64 #s(literal 4 binary64) a (/.f64 (*.f64 (neg.f64 b) b) c)) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":340.27197265625,"type":"simplify"},{"count":[[18,1147]],"egraph":[[0,8401,232,0.085864972],[2,1730,232,0.034346071],[1,249,232,0.006175782],[0,68,234,0.001950786],[0,43,243,0.000402242]],"inputs":[["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 #s(literal 1/2 binary64) a)","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))) (*.f64 #s(literal 2 binary64) a))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))"]],"memory":[[-3485280,79968032]],"outputs":[["(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(*.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) a)))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a)))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a))","(pow.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (*.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)) (*.f64 a #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a)) (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 a)) (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a) (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 #s(literal -1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) a) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64)) a) (/.f64 (*.f64 b #s(literal 1/2 binary64)) a))","(-.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(-.f64 (/.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) #s(literal 2 binary64)) (/.f64 (/.f64 b a) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(-.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (/.f64 a (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(*.f64 (/.f64 a (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (*.f64 a #s(literal 1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 a)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) a)","(*.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) #s(literal 1 binary64))","(*.f64 a (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 a #s(literal 1 binary64))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 a))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 a #s(literal 1 binary64)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (neg.f64 (neg.f64 a)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a))","(/.f64 (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) #s(literal -1 binary64))","(/.f64 (neg.f64 a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) #s(literal 1 binary64))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(neg.f64 (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) (fma.f64 b b (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) b))))","(/.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) #s(literal 3 binary64))) (fma.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (fma.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (fma.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 b b))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (*.f64 b (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 b b)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) b))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (neg.f64 (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) b))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))) (neg.f64 (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1 binary64))","(neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 b))","(fma.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 (neg.f64 (*.f64 b b)) (pow.f64 b #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(fma.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(fma.f64 (*.f64 b b) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(-.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) #s(literal 1 binary64)) (*.f64 b #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) #s(literal 1 binary64)) (/.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64)) (*.f64 b #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(-.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(+.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) (neg.f64 b))","(+.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (neg.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(+.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(+.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(+.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (neg.f64 b))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))) (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(*.f64 (*.f64 (neg.f64 b) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 b a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b))","(*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) a))","(*.f64 (neg.f64 b) (pow.f64 a #s(literal -1 binary64)))","(*.f64 b (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(pow.f64 (/.f64 (neg.f64 a) b) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) a) #s(literal 3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 #s(literal 0 binary64) a) (fma.f64 (/.f64 b a) (/.f64 b a) (*.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 b a)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 b a) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 b a) (/.f64 b a) (*.f64 #s(literal 0 binary64) (/.f64 b a)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 b) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 a b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a b)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 a (neg.f64 b))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a))","(/.f64 (*.f64 (neg.f64 b) #s(literal 1 binary64)) a)","(/.f64 #s(literal -1 binary64) (/.f64 a b))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (neg.f64 b) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b))","(/.f64 (neg.f64 b) (*.f64 a #s(literal 1 binary64)))","(/.f64 (neg.f64 b) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 b) a)","(/.f64 b (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 b (neg.f64 a))","(neg.f64 (/.f64 b a))","(fma.f64 #s(literal 0 binary64) (pow.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 a))) (/.f64 b a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 b a))","(-.f64 #s(literal 0 binary64) (/.f64 b a))","(exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (neg.f64 b) a))","(+.f64 #s(literal 0 binary64) (/.f64 (neg.f64 b) a))","(*.f64 (neg.f64 (*.f64 b b)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(*.f64 b #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 b b))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 b b)) b)","(/.f64 #s(literal 1 binary64) (/.f64 b (neg.f64 (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b b) (*.f64 #s(literal 0 binary64) (neg.f64 b)))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))))","(neg.f64 b)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (neg.f64 b))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 (*.f64 b b) b))","(-.f64 #s(literal 0 binary64) b)","(+.f64 #s(literal 0 binary64) (neg.f64 b))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (neg.f64 a)))","(*.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a) #s(literal 2 binary64))","(/.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64)) (*.f64 a #s(literal 1 binary64)))","(/.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","(/.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a)))","(neg.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))) #s(literal -1 binary64)))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))","(*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64)) (/.f64 c b))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b)))","(*.f64 (*.f64 a #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (neg.f64 b)))","(*.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) c)) (/.f64 a b))","(*.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) c)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (*.f64 a (*.f64 #s(literal -2 binary64) c)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 c (*.f64 #s(literal -2 binary64) a)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 c (/.f64 a b)) #s(literal -2 binary64))","(*.f64 (*.f64 a #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) b))","(*.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b)))","(*.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 a) b) (/.f64 (*.f64 #s(literal -2 binary64) c) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 c (neg.f64 b)))","(*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)","(*.f64 #s(literal -2 binary64) (*.f64 (/.f64 a b) c))","(*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c))","(*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 a b)))","(*.f64 a (*.f64 (pow.f64 b #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) c)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) c))) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) c))) b)","(/.f64 (neg.f64 (*.f64 a (*.f64 #s(literal -2 binary64) c))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 c (*.f64 #s(literal -2 binary64) a))) (neg.f64 b))","(/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) b)","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) c)) (/.f64 b a))","(/.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) c)) (neg.f64 b))","(/.f64 (*.f64 a (*.f64 #s(literal -2 binary64) c)) b)","(/.f64 (*.f64 c (*.f64 #s(literal -2 binary64) a)) b)","(/.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 b a))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 (*.f64 #s(literal -2 binary64) a) c)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b a) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) c))))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 a (*.f64 #s(literal -2 binary64) c))))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 c (*.f64 #s(literal -2 binary64) a))))","(/.f64 c (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 a #s(literal 1 binary64)))","(*.f64 (*.f64 a #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) b))","(*.f64 (*.f64 a #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) (neg.f64 b)))","(*.f64 (*.f64 #s(literal -2 binary64) (neg.f64 a)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (*.f64 a #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) b))","(*.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a)) (/.f64 #s(literal -1 binary64) b))","(*.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b))","(*.f64 (/.f64 (neg.f64 a) b) #s(literal 2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (/.f64 a b)))","(*.f64 (*.f64 #s(literal -2 binary64) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) b))","(*.f64 #s(literal -2 binary64) (/.f64 a b))","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 a) b))","(*.f64 a (/.f64 #s(literal -2 binary64) b))","(*.f64 a (*.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -2 binary64)))","(pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (neg.f64 a))) b)","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (neg.f64 a)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a)) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) (neg.f64 a))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b a) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(/.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -2 binary64) a) b)","(/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))","(/.f64 #s(literal -2 binary64) (/.f64 b a))","(/.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b) a))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 (*.f64 #s(literal 2 binary64) a) b))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(*.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) a)))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a)))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a))","(pow.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (*.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)) (*.f64 a #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 a)) (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 a)) (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a) (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 #s(literal -1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) a) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1/2 binary64)) a) (/.f64 (*.f64 b #s(literal 1/2 binary64)) a))","(-.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))))","(-.f64 (/.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) #s(literal 2 binary64)) (/.f64 (/.f64 b a) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))))","(-.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) a))","(/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (pow.f64 a #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 a))","(/.f64 #s(literal 1/2 binary64) (*.f64 a #s(literal 1 binary64)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1/2 binary64) a)","(neg.f64 (/.f64 #s(literal -1/2 binary64) a))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1/2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64))) c) (pow.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64))) c) (pow.f64 (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a)))) #s(literal -1 binary64)))","(*.f64 (*.f64 c (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64)))) (pow.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b)) #s(literal -1 binary64)))","(*.f64 (*.f64 c (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)","(*.f64 c (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 b c) b) c) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (/.f64 b c) b) c) (*.f64 (*.f64 (/.f64 b c) b) c) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 b c) b) c) (*.f64 (*.f64 #s(literal -4 binary64) a) c)))))","(/.f64 (+.f64 (pow.f64 (*.f64 c (*.f64 (/.f64 b c) b)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64))) (fma.f64 (*.f64 c (*.f64 (/.f64 b c) b)) (*.f64 c (*.f64 (/.f64 b c) b)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 c (*.f64 (/.f64 b c) b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c)))))","(/.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 b c) b) c) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (*.f64 (*.f64 (*.f64 (/.f64 b c) b) c) (*.f64 (*.f64 (/.f64 b c) b) c)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) (*.f64 (*.f64 (/.f64 b c) b) c)))))","(/.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 (*.f64 c (*.f64 (/.f64 b c) b)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (*.f64 (*.f64 c (*.f64 (/.f64 b c) b)) (*.f64 c (*.f64 (/.f64 b c) b))) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) (*.f64 c (*.f64 (/.f64 b c) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64))) c)) (neg.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64))) c)) (neg.f64 (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a))))))","(/.f64 (neg.f64 (*.f64 c (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64))))) (neg.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b))))","(/.f64 (neg.f64 (*.f64 c (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64))) c) (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b)))","(/.f64 (*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64))) c) (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a)))))","(/.f64 (*.f64 c (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64)))) (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b)))","(/.f64 (*.f64 c (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64)))) (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b)) (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64))) c)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a)))) (*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64))) c)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b)) (*.f64 c (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a)))) (*.f64 c (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64))))))","(/.f64 c (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b))))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (neg.f64 (*.f64 c a)) #s(literal 4 binary64) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (neg.f64 (*.f64 c a)) #s(literal 4 binary64) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (*.f64 (/.f64 b c) b) c (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 c a)) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 c a)) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 c (*.f64 #s(literal -4 binary64) a) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 c (*.f64 #s(literal -4 binary64) a) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 c (*.f64 (/.f64 b c) b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 c (*.f64 (/.f64 b c) b)))","(-.f64 (*.f64 (*.f64 (/.f64 b c) b) c) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(-.f64 (*.f64 c (*.f64 (/.f64 b c) b)) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(+.f64 (*.f64 (*.f64 (/.f64 b c) b) c) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(+.f64 (*.f64 c (*.f64 (/.f64 b c) b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(+.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) (*.f64 (*.f64 (/.f64 b c) b) c))","(+.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) (*.f64 c (*.f64 (/.f64 b c) b)))","(*.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(*.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))))))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 0 binary64)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 0 binary64)) (fma.f64 b b (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 0 binary64)) b))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (fma.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (*.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))","(/.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b)))) (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (fma.f64 b b (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))","(neg.f64 (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (neg.f64 b))","(fma.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 (neg.f64 (*.f64 b b)) (pow.f64 b #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(fma.f64 (*.f64 b b) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(-.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)","(+.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 0 binary64)) (neg.f64 b))","(+.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (neg.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))","(+.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))","(+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) a) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (neg.f64 a)))","(*.f64 (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64)) (*.f64 a #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))) (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))))","(/.f64 (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))))","(-.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(*.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))))","(*.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))) (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c)))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))","(/.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) b (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 c a)) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 b (neg.f64 b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b) b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(fma.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(fma.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (neg.f64 b) (neg.f64 b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 c a)) (*.f64 b b))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 b b (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 c (*.f64 #s(literal -4 binary64) a) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))","(sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) (*.f64 b (neg.f64 b)))","(-.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) (*.f64 (neg.f64 b) b))","(-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(fabs.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (neg.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(+.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(*.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":330.237060546875,"type":"rewrite"},{"compiler":[[49750,4362]],"memory":[[9434704,120152736]],"time":238.39501953125,"type":"eval"},{"alts":[["(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","fresh",27.095488631053676,"binary64"],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","fresh",47.96838039627345,"binary64"],["(/.f64 (-.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))) (*.f64 #s(literal 2 binary64) a))","fresh",43.75135019393438,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","fresh",25.314013760899215,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","next",28.34896439655665,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",40.13608739909212,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",49.46098481757248,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","done",25.167263342386594,"binary64"],["(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","next",25.17807772118479,"binary64"],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))))","fresh",46.15224805900606,"binary64"],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","fresh",46.22424017316338,"binary64"],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (/.f64 b c) #s(literal -1/2 binary64))))","fresh",46.412635319982336,"binary64"],["(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","fresh",28.442398369353377,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b))","fresh",25.216097888928996,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","done",25.20794708261815,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 #s(approx (sqrt (+ (* -4 (* c a)) (* b b))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)))) b))","fresh",40.496658400534315,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","fresh",48.00131290285018,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 #s(literal -2 binary64) b)))","fresh",40.38827539783014,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","fresh",49.47320559887526,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","next",40.383833356172644,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (neg.f64 (*.f64 b b)) b) a))","fresh",45.91849113042095,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 b (neg.f64 (*.f64 b b)))) a))","fresh",45.95659615974156,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (neg.f64 b)) a))","fresh",62.716378214000514,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","fresh",48.36287093677796,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 (*.f64 b b)) (pow.f64 b #s(literal -1 binary64))) a))","fresh",45.946498649957775,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","next",46.063276334512786,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","done",40.31015039783014,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","fresh",40.38436914782668,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","fresh",46.30110899383636,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64))))","fresh",54.31540731882923,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","next",40.52655714935129,"binary64"]],"compiler":[[19,13],[27,16],[76,23],[15,12],[27,19],[23,18],[25,19],[15,12],[18,15],[27,19],[29,20],[22,17],[31,22],[19,15],[15,12],[30,22],[24,18],[20,16],[25,19],[29,20],[26,19],[28,21],[33,23],[29,21],[28,21],[22,17],[22,17],[23,18],[31,21],[26,21],[29,21],[19,13],[27,16],[76,23],[15,12],[27,19],[23,18],[25,19],[18,15],[27,19],[29,20],[22,17],[31,22],[19,15],[30,22],[24,18],[20,16],[25,19],[29,20],[26,19],[28,21],[33,23],[29,21],[28,21],[22,17],[23,18],[31,21],[26,21],[29,21]],"count":[[1331,31]],"kept":[{"done":[0,0],"fresh":[9,5],"new":[1317,23],"picked":[5,3]}],"memory":[[-12426672,65376880]],"min-error":[[5.443513367378755,"binary64"]],"time":57.85693359375,"type":"prune"},{"egraph":[[0,8206,325,0.03597666],[10,7896,325,0.017364136],[9,7239,325,0.031594501],[8,6526,325,0.02566501],[7,5955,325,0.024325844],[6,5418,325,0.023806396],[5,4019,325,0.025248099],[4,1861,325,0.024934578],[3,697,333,0.009149166],[2,301,350,0.002675349],[1,158,356,0.00130868],[0,89,358,0.000840461],[0,57,368,0.000496833]],"inputs":[["(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","#s(literal 1/2 binary64)","(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(neg.f64 a)","a","(/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","#s(literal -1 binary64)","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(*.f64 c #s(literal -4 binary64))","c","#s(literal -4 binary64)","(*.f64 b b)","b","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","(/.f64 (neg.f64 c) b)","(neg.f64 c)","c","b","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","(neg.f64 b)","b","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","(/.f64 c (*.f64 b b))","c","(*.f64 b b)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))","(/.f64 (/.f64 c b) b)","(/.f64 c b)","c","b","(/.f64 (neg.f64 b) a)","(neg.f64 b)","a","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)","(fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b))","#s(literal -4 binary64)","a","(*.f64 (/.f64 b c) b)","(/.f64 b c)","b","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))","cost-diff",0],["(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)","cost-diff",0],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)","cost-diff",2],["(/.f64 c b)","cost-diff",0],["(/.f64 (/.f64 c b) b)","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","cost-diff",0],["(fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))","cost-diff",4],["(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","cost-diff",0],["(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","cost-diff",5],["(neg.f64 c)","cost-diff",0],["(/.f64 (neg.f64 c) b)","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","cost-diff",0],["(/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","cost-diff",0],["(neg.f64 a)","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","cost-diff",0],["(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","cost-diff",3]],"memory":[[4856688,19529312]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) b))","#s(literal 1/2 binary64)","(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) b))","(neg.f64 a)","a","(/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) b))","#s(literal -1 binary64)","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(*.f64 c #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) c)","c","#s(literal -4 binary64)","(*.f64 b b)","b","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","(/.f64 (neg.f64 c) b)","(neg.f64 c)","c","b","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (-.f64 (/.f64 c b) (/.f64 b a)))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","(-.f64 (/.f64 c b) (/.f64 b a))","(neg.f64 b)","b","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","(/.f64 c (*.f64 b b))","c","(*.f64 b b)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","(fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))","(-.f64 (/.f64 c b) (/.f64 b a))","(/.f64 (/.f64 c b) b)","(/.f64 c (*.f64 b b))","(/.f64 c b)","c","b","(/.f64 (neg.f64 b) a)","(neg.f64 b)","a","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))) b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))","#s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b))","#s(literal -4 binary64)","a","(*.f64 (/.f64 b c) b)","(/.f64 b c)","b","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":290.68798828125,"type":"simplify"},{"compiler":[[305,54]],"locations":[["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","accuracy",2.196033275602541],["(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)","accuracy",4.53681385453628],["(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)","accuracy",10.413486334482704],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))","accuracy",20.358910206262816],["(neg.f64 b)","accuracy",0.0],["(/.f64 (/.f64 c b) b)","accuracy",0.140625],["(fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))","accuracy",6.589745654575046],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","accuracy",40.33365546781241],["(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))","accuracy",0.015625],["(/.f64 c (*.f64 b b))","accuracy",6.4850552114622655],["(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","accuracy",6.695214404575046],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","accuracy",40.33365546781241],["(/.f64 (neg.f64 c) b)","accuracy",0.0],["(neg.f64 c)","accuracy",0.0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","accuracy",46.063276334512786],["(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","accuracy",0.5290464882997621],["(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","accuracy",2.3242757708582142],["(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","accuracy",10.413486334482704],["(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","accuracy",20.358910206262816]],"memory":[[-1385568,56685568]],"mixsample":[[0.134033203125,"ival-sub",1200],[0.0048828125,"ival-sub",4800],[29.337158203125,"ival-div",0],[6.0810546875,"adjust",800],[0.0390625,"ival-add",4800],[0.014892578125,"ival-div",400],[0.040283203125,"ival-sub",1600],[0.145263671875,"ival-assert",0],[0.089111328125,"ival-sqrt",4800],[9.433837890625,"ival-sub",0],[0.756103515625,"ival-sqrt",1200],[5.828125,"ival-sqrt",0],[0.076904296875,"ival-sub",400],[0.036865234375,"ival-mult",800],[0.0771484375,"ival-sub",4400],[7.84521484375,"ival-add",0],[0.1103515625,"ival-sub",800],[0.02001953125,"ival-mult",1600],[0.181884765625,"ival-add",400],[0.85498046875,"adjust",2800],[0.213623046875,"ival-add",2400],[0.013427734375,"ival-sub",4000],[0.390380859375,"ival-sqrt",400],[0.355224609375,"ival-add",1200],[0.400146484375,"ival-sqrt",2000],[0.011962890625,"ival-mult",2000],[0.066162109375,"ival-sub",2000],[0.698486328125,"ival-sqrt",800],[0.1337890625,"ival-sqrt",4000],[0.2900390625,"ival-sqrt",4400],[0.040283203125,"ival-add",4000],[3.134765625,"adjust",2000],[0.073974609375,"ival-sub",2400],[27.215576171875,"ival-mult",0],[0.269775390625,"ival-sqrt",1600],[0.116455078125,"ival-add",1600],[0.049072265625,"ival-mult",400],[0.14990234375,"ival-add",2000],[0.518798828125,"ival-sqrt",2400],[0.3056640625,"ival-true",0],[0.744873046875,"exact",0],[0.298095703125,"ival-add",800],[0.075927734375,"ival-add",4400],[3.99658203125,"ival-neg",0]],"outcomes":[[19.2646484375,1,"valid",27],[27.33349609375,2,"valid",27],[14.977783203125,3,"valid",11],[79.469482421875,0,"valid",191]],"time":215.8349609375,"type":"localize"},{"count":[[22,176]],"inputs":[["(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(neg.f64 a)","(/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","(/.f64 (neg.f64 c) b)","(neg.f64 c)","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","(neg.f64 b)","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))","(fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (/.f64 c b) b)","(/.f64 c b)","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(/.f64 c (*.f64 b b))"]],"memory":[[1352736,16849936]],"outputs":[["(* -1/2 (/ b c))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -1 a)","(* 1/2 (/ b (* a c)))","(/ (+ (* -1/2 (/ a b)) (* 1/2 (/ b c))) a)","(/ (+ (* 1/2 (/ b c)) (* a (- (* -1 (* a (+ (* -1/2 (/ c (pow b 3))) (/ c (pow b 3))))) (* 1/2 (/ 1 b))))) a)","(/ (+ (* 1/2 (/ b c)) (* a (- (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1/2 (/ c (pow b 3))) (/ c (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow c 2) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))))))) (+ (* -1/2 (/ c (pow b 3))) (/ c (pow b 3))))) (* 1/2 (/ 1 b))))) a)","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ 1 a)","(/ (+ 1 (* -1 (/ (* a c) (pow b 2)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4))))","(/ (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2))))) a)","(/ (- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2)))) (/ b (* c (pow (sqrt -4) 2)))) a)","(/ (- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow a 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3))) (/ b (* c (pow (sqrt -4) 2)))))) a)","(/ c b)","(+ (* -1 (/ b a)) (/ c b))","(* -1 (/ c (pow b 2)))","(- (/ 1 a) (/ c (pow b 2)))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c))) a))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1)))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1)))) a))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* -1 (/ b (* a (* c (pow (sqrt -4) 2))))))","(+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* b (- (* -1 (* b (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (/ 1 (* a (* c (pow (sqrt -4) 2)))))))","(+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* b (- (* b (- (* b (- (* 1/2 (/ 1 (* (pow a 2) (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (sqrt -4))))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (/ 1 (* a (* c (pow (sqrt -4) 2)))))))","(/ (+ c (* -1 (/ (pow b 2) a))) b)","(* -1 b)","(/ (- (/ (pow b 2) a) c) (pow b 2))","(/ c (pow b 2))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (- (* 1/2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b 2)))))","(* b (- (+ (* -1 (/ (+ (* -1/2 (* a c)) (* a c)) (pow b 4))) (* 1/2 (/ 1 (* a c)))) (* 1/2 (/ 1 (pow b 2)))))","(* b (- (+ (* -1 (/ (+ (* -1 (* a (* c (+ (* -1/2 (* a c)) (* a c))))) (+ (* -1 (* (pow a 2) (pow c 2))) (* 1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 2) (pow c 2)))))) (pow b 6))) (* 1/2 (/ 1 (* a c)))) (+ (* -1/2 (/ (* a c) (pow b 4))) (+ (* 1/2 (/ 1 (pow b 2))) (/ (* a c) (pow b 4))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(+ (* -1 (/ c (pow b 2))) (/ 1 a))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1/2 (/ a b))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(/ 1/2 b)","(* -1 (/ (- (* -1/2 (/ (* a c) (pow b 2))) 1/2) b))","(* -1 (/ (- (* -1 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1/2 (* 1/2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (* (pow a 3) (pow c 3))) (* 2 (* (pow a 3) (pow c 3)))) (pow b 6))) (+ 1/2 (+ (* 1/2 (/ (* a c) (pow b 2))) (/ (* (pow a 2) (pow c 2)) (pow b 4))))) b))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(/ (+ (* -1/2 (/ c b)) (* 1/2 (/ b a))) c)","(/ (+ (* 1/2 (/ b a)) (* c (- (* -1 (* c (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3))))) (* 1/2 (/ 1 b))))) c)","(/ (+ (* 1/2 (/ b a)) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow a 2) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (pow a 2))))))) (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3))))) (* 1/2 (/ 1 b))))) c)","(* -1 c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(/ (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ b (* a (pow (sqrt -4) 2))))) c)","(/ (- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow c 2)))) (/ b (* a (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (/ (* (pow b 3) (pow c 2)) (* (pow a 2) (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow c 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3))) (/ b (* a (pow (sqrt -4) 2)))))) c)","(* c (+ (* -1 (/ b (* a c))) (/ 1 b)))","(* c (- (/ 1 (* a c)) (/ 1 (pow b 2))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (/ b a))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* b c) a))) c)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* (pow b 3) c) (pow a 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))) c)) (* -1/4 (/ (* b c) a))) c)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1)))) c))","(* -1 (* c (- (/ b (* a c)) (/ 1 b))))","(* -1 (* c (- (/ 1 (pow b 2)) (/ 1 (* a c)))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[5.2080078125,"((* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b))) (/ 1/2 (* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)))) (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg c) b) (neg c) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (neg b) (- (/ 1 a) (/ c (* b b))) (+ (* (/ (/ c b) b) b) (/ (neg b) a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ c b) b) (/ c b) (* (+ (* -4 a) (* (/ b c) b)) c) (/ (- (sqrt (- (* b b) (* 4 (* a c)))) b) (* 2 a)) (- (sqrt (- (* b b) (* 4 (* a c)))) b) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (+ (* (* c -4) a) (* b b))) (- (sqrt (+ (* (* c -4) a) (* b b))) b) (/ c (* b b)))","c","-inf"],[4.9189453125,"((* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b))) (/ 1/2 (* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)))) (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg c) b) (neg c) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (neg b) (- (/ 1 a) (/ c (* b b))) (+ (* (/ (/ c b) b) b) (/ (neg b) a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ c b) b) (/ c b) (* (+ (* -4 a) (* (/ b c) b)) c) (/ (- (sqrt (- (* b b) (* 4 (* a c)))) b) (* 2 a)) (- (sqrt (- (* b b) (* 4 (* a c)))) b) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (+ (* (* c -4) a) (* b b))) (- (sqrt (+ (* (* c -4) a) (* b b))) b) (/ c (* b b)))","c","inf"],[3.85205078125,"((* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b))) (/ 1/2 (* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)))) (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg c) b) (neg c) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (neg b) (- (/ 1 a) (/ c (* b b))) (+ (* (/ (/ c b) b) b) (/ (neg b) a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ c b) b) (/ c b) (* (+ (* -4 a) (* (/ b c) b)) c) (/ (- (sqrt (- (* b b) (* 4 (* a c)))) b) (* 2 a)) (- (sqrt (- (* b b) (* 4 (* a c)))) b) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (+ (* (* c -4) a) (* b b))) (- (sqrt (+ (* (* c -4) a) (* b b))) b) (/ c (* b b)))","c","0"],[3.232177734375,"((* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b))) (/ 1/2 (* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)))) (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg c) b) (neg c) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (neg b) (- (/ 1 a) (/ c (* b b))) (+ (* (/ (/ c b) b) b) (/ (neg b) a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ c b) b) (/ c b) (* (+ (* -4 a) (* (/ b c) b)) c) (/ (- (sqrt (- (* b b) (* 4 (* a c)))) b) (* 2 a)) (- (sqrt (- (* b b) (* 4 (* a c)))) b) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (+ (* (* c -4) a) (* b b))) (- (sqrt (+ (* (* c -4) a) (* b b))) b) (/ c (* b b)))","b","-inf"],[6.705078125,"((* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b))) (/ 1/2 (* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)))) (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg c) b) (neg c) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (neg b) (- (/ 1 a) (/ c (* b b))) (+ (* (/ (/ c b) b) b) (/ (neg b) a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ c b) b) (/ c b) (* (+ (* -4 a) (* (/ b c) b)) c) (/ (- (sqrt (- (* b b) (* 4 (* a c)))) b) (* 2 a)) (- (sqrt (- (* b b) (* 4 (* a c)))) b) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (+ (* (* c -4) a) (* b b))) (- (sqrt (+ (* (* c -4) a) (* b b))) b) (/ c (* b b)))","b","inf"],[7.736083984375,"((* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b))) (/ 1/2 (* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)))) (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg c) b) (neg c) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (neg b) (- (/ 1 a) (/ c (* b b))) (+ (* (/ (/ c b) b) b) (/ (neg b) a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ c b) b) (/ c b) (* (+ (* -4 a) (* (/ b c) b)) c) (/ (- (sqrt (- (* b b) (* 4 (* a c)))) b) (* 2 a)) (- (sqrt (- (* b b) (* 4 (* a c)))) b) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (+ (* (* c -4) a) (* b b))) (- (sqrt (+ (* (* c -4) a) (* b b))) b) (/ c (* b b)))","b","0"],[4.56396484375,"((* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b))) (/ 1/2 (* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)))) (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg c) b) (neg c) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (neg b) (- (/ 1 a) (/ c (* b b))) (+ (* (/ (/ c b) b) b) (/ (neg b) a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ c b) b) (/ c b) (* (+ (* -4 a) (* (/ b c) b)) c) (/ (- (sqrt (- (* b b) (* 4 (* a c)))) b) (* 2 a)) (- (sqrt (- (* b b) (* 4 (* a c)))) b) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (+ (* (* c -4) a) (* b b))) (- (sqrt (+ (* (* c -4) a) (* b b))) b) (/ c (* b b)))","a","-inf"],[10.876220703125,"((* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b))) (/ 1/2 (* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)))) (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg c) b) (neg c) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (neg b) (- (/ 1 a) (/ c (* b b))) (+ (* (/ (/ c b) b) b) (/ (neg b) a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ c b) b) (/ c b) (* (+ (* -4 a) (* (/ b c) b)) c) (/ (- (sqrt (- (* b b) (* 4 (* a c)))) b) (* 2 a)) (- (sqrt (- (* b b) (* 4 (* a c)))) b) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (+ (* (* c -4) a) (* b b))) (- (sqrt (+ (* (* c -4) a) (* b b))) b) (/ c (* b b)))","a","inf"],[3.386962890625,"((* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b))) (/ 1/2 (* (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)))) (neg a) (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg c) b) (neg c) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (neg b) (- (/ 1 a) (/ c (* b b))) (+ (* (/ (/ c b) b) b) (/ (neg b) a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (/ c b) b) (/ c b) (* (+ (* -4 a) (* (/ b c) b)) c) (/ (- (sqrt (- (* b b) (* 4 (* a c)))) b) (* 2 a)) (- (sqrt (- (* b b) (* 4 (* a c)))) b) (sqrt (- (* b b) (* 4 (* a c)))) (sqrt (+ (* (* c -4) a) (* b b))) (- (sqrt (+ (* (* c -4) a) (* b b))) b) (/ c (* b b)))","a","0"]],"time":57.052001953125,"type":"series"},{"count":[[176,175]],"egraph":[[0,8385,4996,0.124824011],[1,3615,5201,0.035145596],[0,1075,5435,0.014051896]],"inputs":[["(* -1/2 (/ b c))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -1 a)","(* 1/2 (/ b (* a c)))","(/ (+ (* -1/2 (/ a b)) (* 1/2 (/ b c))) a)","(/ (+ (* 1/2 (/ b c)) (* a (- (* -1 (* a (+ (* -1/2 (/ c (pow b 3))) (/ c (pow b 3))))) (* 1/2 (/ 1 b))))) a)","(/ (+ (* 1/2 (/ b c)) (* a (- (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1/2 (/ c (pow b 3))) (/ c (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow c 2) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))))))) (+ (* -1/2 (/ c (pow b 3))) (/ c (pow b 3))))) (* 1/2 (/ 1 b))))) a)","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ 1 a)","(/ (+ 1 (* -1 (/ (* a c) (pow b 2)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4))))","(/ (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2))))) a)","(/ (- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2)))) (/ b (* c (pow (sqrt -4) 2)))) a)","(/ (- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow a 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3))) (/ b (* c (pow (sqrt -4) 2)))))) a)","(/ c b)","(+ (* -1 (/ b a)) (/ c b))","(* -1 (/ c (pow b 2)))","(- (/ 1 a) (/ c (pow b 2)))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c))) a))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1)))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1)))) a))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* -1 (/ b (* a (* c (pow (sqrt -4) 2))))))","(+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* b (- (* -1 (* b (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (/ 1 (* a (* c (pow (sqrt -4) 2)))))))","(+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* b (- (* b (- (* b (- (* 1/2 (/ 1 (* (pow a 2) (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (sqrt -4))))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (/ 1 (* a (* c (pow (sqrt -4) 2)))))))","(/ (+ c (* -1 (/ (pow b 2) a))) b)","(* -1 b)","(/ (- (/ (pow b 2) a) c) (pow b 2))","(/ c (pow b 2))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (- (* 1/2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b 2)))))","(* b (- (+ (* -1 (/ (+ (* -1/2 (* a c)) (* a c)) (pow b 4))) (* 1/2 (/ 1 (* a c)))) (* 1/2 (/ 1 (pow b 2)))))","(* b (- (+ (* -1 (/ (+ (* -1 (* a (* c (+ (* -1/2 (* a c)) (* a c))))) (+ (* -1 (* (pow a 2) (pow c 2))) (* 1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 2) (pow c 2)))))) (pow b 6))) (* 1/2 (/ 1 (* a c)))) (+ (* -1/2 (/ (* a c) (pow b 4))) (+ (* 1/2 (/ 1 (pow b 2))) (/ (* a c) (pow b 4))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(+ (* -1 (/ c (pow b 2))) (/ 1 a))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1/2 (/ a b))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(/ 1/2 b)","(* -1 (/ (- (* -1/2 (/ (* a c) (pow b 2))) 1/2) b))","(* -1 (/ (- (* -1 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1/2 (* 1/2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (* (pow a 3) (pow c 3))) (* 2 (* (pow a 3) (pow c 3)))) (pow b 6))) (+ 1/2 (+ (* 1/2 (/ (* a c) (pow b 2))) (/ (* (pow a 2) (pow c 2)) (pow b 4))))) b))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(/ (+ (* -1/2 (/ c b)) (* 1/2 (/ b a))) c)","(/ (+ (* 1/2 (/ b a)) (* c (- (* -1 (* c (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3))))) (* 1/2 (/ 1 b))))) c)","(/ (+ (* 1/2 (/ b a)) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow a 2) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (pow a 2))))))) (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3))))) (* 1/2 (/ 1 b))))) c)","(* -1 c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(/ (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ b (* a (pow (sqrt -4) 2))))) c)","(/ (- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow c 2)))) (/ b (* a (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (/ (* (pow b 3) (pow c 2)) (* (pow a 2) (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow c 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3))) (/ b (* a (pow (sqrt -4) 2)))))) c)","(* c (+ (* -1 (/ b (* a c))) (/ 1 b)))","(* c (- (/ 1 (* a c)) (/ 1 (pow b 2))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (/ b a))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* b c) a))) c)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* (pow b 3) c) (pow a 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))) c)) (* -1/4 (/ (* b c) a))) c)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1)))) c))","(* -1 (* c (- (/ b (* a c)) (/ 1 b))))","(* -1 (* c (- (/ 1 (pow b 2)) (/ 1 (* a c)))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[6214544,54947104]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ b c))","(*.f64 (/.f64 b c) #s(literal -1/2 binary64))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(fma.f64 (/.f64 a b) #s(literal 1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) a (/.f64 #s(literal 1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (neg.f64 c) (*.f64 (/.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) b) (/.f64 #s(literal -1/2 binary64) b)) (fma.f64 (/.f64 #s(literal -1/8 binary64) c) (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) c) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 5 binary64))))) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) a (/.f64 #s(literal 1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) #s(literal -2 binary64) (/.f64 (neg.f64 (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b)) #s(literal -1/4 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (neg.f64 (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(* -1 a)","(neg.f64 a)","(* 1/2 (/ b (* a c)))","(*.f64 (/.f64 b (*.f64 c a)) #s(literal 1/2 binary64))","(/ (+ (* -1/2 (/ a b)) (* 1/2 (/ b c))) a)","(/.f64 (fma.f64 (/.f64 a b) #s(literal -1/2 binary64) (*.f64 (/.f64 b c) #s(literal 1/2 binary64))) a)","(/ (+ (* 1/2 (/ b c)) (* a (- (* -1 (* a (+ (* -1/2 (/ c (pow b 3))) (/ c (pow b 3))))) (* 1/2 (/ 1 b))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) a (/.f64 #s(literal -1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal 1/2 binary64))) a)","(/ (+ (* 1/2 (/ b c)) (* a (- (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1/2 (/ c (pow b 3))) (/ c (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow c 2) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))))))) (+ (* -1/2 (/ c (pow b 3))) (/ c (pow b 3))))) (* 1/2 (/ 1 b))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 c) (*.f64 (/.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) b) (/.f64 #s(literal 1/2 binary64) b)) (fma.f64 (/.f64 #s(literal 1/8 binary64) c) (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) c) (/.f64 (neg.f64 (*.f64 c c)) (pow.f64 b #s(literal 5 binary64))))) (neg.f64 a) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) a (/.f64 #s(literal -1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal 1/2 binary64))) a)","(* -1 (/ b a))","(/.f64 b (neg.f64 a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (-.f64 (*.f64 a (/.f64 c b)) b) a)","(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* -1 (/ (* a c) (pow b 2)))) a)","(/.f64 (fma.f64 (neg.f64 a) (/.f64 c (*.f64 b b)) #s(literal 1 binary64)) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(-.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) a) (/.f64 #s(literal -1/2 binary64) a))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(-.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (fma.f64 (*.f64 b (/.f64 (*.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))) (*.f64 (/.f64 (*.f64 a a) c) (/.f64 (pow.f64 b #s(literal 3 binary64)) c)))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (neg.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))))))","(* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4))))","(/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))","(/ (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2))))) a)","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b c)) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) a)","(/ (- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2)))) (/ b (* c (pow (sqrt -4) 2)))) a)","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) a) (/.f64 #s(literal 1/2 binary64) a) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c))) a)","(/ (- (+ (* -1 (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow a 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3))) (/ b (* c (pow (sqrt -4) 2)))))) a)","(/.f64 (-.f64 (-.f64 (/.f64 (fma.f64 (*.f64 b (/.f64 (*.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 c c)) (/.f64 (*.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))))) (neg.f64 (pow.f64 a #s(literal 3 binary64)))) (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (/.f64 (/.f64 b c) #s(literal -4 binary64)))) a)","(/ c b)","(/.f64 c b)","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(* -1 (/ c (pow b 2)))","(/.f64 (neg.f64 c) (*.f64 b b))","(- (/ 1 a) (/ c (pow b 2)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))","(* -4 (* a c))","(*.f64 (*.f64 #s(literal -4 binary64) c) a)","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 a))) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 a)))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 a))))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))))) a)","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -1/2 binary64))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -1/2 binary64) (*.f64 #s(literal -1/4 binary64) (/.f64 b c)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/16 binary64) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64))) (neg.f64 a)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/32 binary64) c) (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) a) c) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64)))) a) #s(literal -1 binary64) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64))) (neg.f64 a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 a))) a)))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) #s(literal 1/2 binary64))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c))) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -1/2 binary64) (*.f64 #s(literal -1/4 binary64) (/.f64 b c))) (neg.f64 a))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1)))) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/16 binary64) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64))) (neg.f64 a))) (neg.f64 a))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1)))) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/32 binary64) c) (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) a) c) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64)))) a) #s(literal -1 binary64) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64))) (neg.f64 a))) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (fma.f64 #s(literal 4 binary64) c (/.f64 (*.f64 b b) (neg.f64 a))) (neg.f64 a))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))) #s(literal -2 binary64))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64) (/.f64 b a)) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) (neg.f64 a))) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) (neg.f64 a)) b) (neg.f64 a))) (neg.f64 a))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64))) (neg.f64 a))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64)))) (neg.f64 a))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/512 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64))))) (neg.f64 a))","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/2 binary64)) b (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) c))) b (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 c c) a) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/2 binary64))) b (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) c))) b (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/4 binary64) (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64)))","(+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* -1 (/ b (* a (* c (pow (sqrt -4) 2))))))","(-.f64 (*.f64 (/.f64 b (*.f64 c a)) #s(literal 1/4 binary64)) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* b (- (* -1 (* b (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (/ 1 (* a (* c (pow (sqrt -4) 2)))))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/2 binary64)) b (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -4 binary64) c) a))) b (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (neg.f64 (sqrt.f64 #s(literal -4 binary64)))))","(+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* b (- (* b (- (* b (- (* 1/2 (/ 1 (* (pow a 2) (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (sqrt -4))))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (/ 1 (* a (* c (pow (sqrt -4) 2)))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64)) (*.f64 c c)) (*.f64 a a))) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)))) b (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/2 binary64))) b (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -4 binary64) c) a))) b (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (neg.f64 (sqrt.f64 #s(literal -4 binary64)))))","(/ (+ c (* -1 (/ (pow b 2) a))) b)","(/.f64 (-.f64 c (/.f64 (*.f64 b b) a)) b)","(* -1 b)","(neg.f64 b)","(/ (- (/ (pow b 2) a) c) (pow b 2))","(/.f64 (-.f64 (/.f64 (*.f64 b b) a) c) (*.f64 b b))","(/ c (pow b 2))","(/.f64 c (*.f64 b b))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) #s(literal 1/2 binary64) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(*.f64 (neg.f64 (+.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 a (*.f64 b b)) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) c)))) b)","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(*.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/2 binary64)) c)) a (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (*.f64 c c)) (/.f64 #s(literal 20 binary64) a)) #s(literal -1/8 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 c c)))) (neg.f64 (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (neg.f64 (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 a b) (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 4 binary64)))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) c))))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (+.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) a)) #s(literal -1/4 binary64)))) b)","(* b (- (* 1/2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b 2)))))","(*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 c a)) (/.f64 #s(literal 1/2 binary64) (*.f64 b b))) b)","(* b (- (+ (* -1 (/ (+ (* -1/2 (* a c)) (* a c)) (pow b 4))) (* 1/2 (/ 1 (* a c)))) (* 1/2 (/ 1 (pow b 2)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 c a)) (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 c a)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 b b))) b)","(* b (- (+ (* -1 (/ (+ (* -1 (* a (* c (+ (* -1/2 (* a c)) (* a c))))) (+ (* -1 (* (pow a 2) (pow c 2))) (* 1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 2) (pow c 2)))))) (pow b 6))) (* 1/2 (/ 1 (* a c)))) (+ (* -1/2 (/ (* a c) (pow b 4))) (+ (* 1/2 (/ 1 (pow b 2))) (/ (* a c) (pow b 4))))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 c a)) (/.f64 (fma.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 c a)) c)) a (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (*.f64 a a)) (/.f64 #s(literal 20 binary64) (*.f64 c c))) #s(literal 1/8 binary64) (*.f64 (neg.f64 (*.f64 c c)) (*.f64 a a)))) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 a (/.f64 c (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/2 binary64) (fma.f64 a (/.f64 c (pow.f64 b #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 b b))))) b)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b)","(+ (* -1 (/ c (pow b 2))) (/ 1 a))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 #s(literal -4 binary64) a) b) (/.f64 c b) #s(literal 1 binary64)) (*.f64 b b))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 c b) (/.f64 a b))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 c b) (/.f64 a b))))) b b)","(* -1/2 (/ a b))","(*.f64 (/.f64 a b) #s(literal -1/2 binary64))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 c b) a)) (neg.f64 b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(/.f64 (fma.f64 #s(literal 1/2 binary64) a (fma.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) b) (/.f64 c b)))) (neg.f64 b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(/.f64 (-.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) #s(literal -5/2 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (neg.f64 (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 a a) c) b)))) (neg.f64 b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -2 binary64) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b)))))","(/ 1/2 b)","(/.f64 #s(literal 1/2 binary64) b)","(* -1 (/ (- (* -1/2 (/ (* a c) (pow b 2))) 1/2) b))","(/.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -1/2 binary64)) (/.f64 c b) #s(literal -1/2 binary64)) (neg.f64 b))","(* -1 (/ (- (* -1 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1/2 (* 1/2 (/ (* a c) (pow b 2))))) b))","(/.f64 (neg.f64 (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1/2 binary64)))) (neg.f64 b))","(* -1 (/ (- (* -1 (/ (+ (* 1/2 (* (pow a 3) (pow c 3))) (* 2 (* (pow a 3) (pow c 3)))) (pow b 6))) (+ 1/2 (+ (* 1/2 (/ (* a c) (pow b 2))) (/ (* (pow a 2) (pow c 2)) (pow b 4))))) b))","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) #s(literal 5/2 binary64)) (neg.f64 (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (/.f64 c b) (/.f64 a b) #s(literal 1 binary64)) #s(literal 1/2 binary64) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 b))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 c b) (/.f64 a b))) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (+.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 c b) (/.f64 a b))) #s(literal 2 binary64)) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 c b) (/.f64 a b))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(neg.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 c b) (/.f64 a b))))) b b))","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/.f64 (fma.f64 (*.f64 a (/.f64 c b)) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) b)) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64))) c (*.f64 (/.f64 a b) #s(literal 1/2 binary64))) c (*.f64 #s(literal -1/2 binary64) b)) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (/.f64 (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 b b)) (fma.f64 (*.f64 b (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) a)) #s(literal -1/8 binary64) (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))))) (neg.f64 c) (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 1/2 binary64))) c (*.f64 #s(literal -1/2 binary64) b)) c)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal -2 binary64) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) c) a) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(/ (+ (* -1/2 (/ c b)) (* 1/2 (/ b a))) c)","(/.f64 (fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 (/.f64 c b) #s(literal -1/2 binary64))) c)","(/ (+ (* 1/2 (/ b a)) (* c (- (* -1 (* c (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3))))) (* 1/2 (/ 1 b))))) c)","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) c (/.f64 #s(literal -1/2 binary64) b)) c (*.f64 (/.f64 b a) #s(literal 1/2 binary64))) c)","(/ (+ (* 1/2 (/ b a)) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow a 2) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (pow a 2))))))) (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3))))) (* 1/2 (/ 1 b))))) c)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) b)) (fma.f64 (/.f64 #s(literal 1/8 binary64) a) (*.f64 b (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) a)) (/.f64 (neg.f64 (*.f64 a a)) (pow.f64 b #s(literal 5 binary64))))) (neg.f64 c) (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) c (/.f64 #s(literal -1/2 binary64) b)) c (*.f64 (/.f64 b a) #s(literal 1/2 binary64))) c)","(* -1 c)","(neg.f64 c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal -4 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 #s(literal -2 binary64) (/.f64 a b))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 #s(literal -2 binary64) (/.f64 a b))) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal -4 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 #s(literal -2 binary64) (/.f64 a b))) c b)","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal 4 binary64))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/.f64 (-.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) c) (/.f64 #s(literal -1/2 binary64) c))) (/.f64 b #s(literal 4 binary64))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(/.f64 (-.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (fma.f64 (*.f64 b (/.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 (*.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (*.f64 (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64)) a)) #s(literal 1/2 binary64))) (pow.f64 c #s(literal 3 binary64)))) (-.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) #s(literal 1/2 binary64) (/.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 b (*.f64 c a)) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) c) (/.f64 b a) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) c) (/.f64 b a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/16 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64))))) c)","(/ (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ b (* a (pow (sqrt -4) 2))))) c)","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b a)) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) c)","(/ (- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow c 2)))) (/ b (* a (pow (sqrt -4) 2)))) c)","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) c) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) (*.f64 #s(literal 1/4 binary64) (/.f64 b a))) c)","(/ (- (+ (* -1 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1/2 (/ (* (pow b 3) (pow c 2)) (* (pow a 2) (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow c 3)))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3))) (/ b (* a (pow (sqrt -4) 2)))))) c)","(/.f64 (-.f64 (-.f64 (/.f64 (fma.f64 (*.f64 b (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))))) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))) (*.f64 (/.f64 (*.f64 c c) a) (/.f64 (pow.f64 b #s(literal 3 binary64)) a)))) (neg.f64 (pow.f64 c #s(literal 3 binary64)))) (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) (/.f64 (/.f64 b a) #s(literal -4 binary64)))) c)","(* c (+ (* -1 (/ b (* a c))) (/ 1 b)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 b (*.f64 c a))) c)","(* c (- (/ 1 (* a c)) (/ 1 (pow b 2))))","(*.f64 (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c) (/.f64 #s(literal 1 binary64) (*.f64 b b))) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 a c)) (/.f64 (neg.f64 b) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 a c)) (/.f64 (neg.f64 b) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 a c)) (/.f64 (neg.f64 b) c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 a c)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 a c))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 a c)))))) c)","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/4 binary64) b)) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 b c) #s(literal -1/4 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) c) a) #s(literal 1/32 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/16 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))))) c) #s(literal -1 binary64) (*.f64 (*.f64 b c) #s(literal -1/4 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (/ (+ (* -1/2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (/ b a))) c))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/4 binary64))) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* b c) a))) c)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/16 binary64) (*.f64 (*.f64 b (/.f64 c a)) #s(literal 1/4 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* (pow b 3) c) (pow a 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))) c)) (* -1/4 (/ (* b c) a))) c)) (* -1/2 (* (sqrt (/ c a)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/32 binary64) a) (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) c) a) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal 1/16 binary64))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal -1/16 binary64)))) c) #s(literal -1 binary64) (*.f64 (*.f64 b (/.f64 c a)) #s(literal 1/4 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (- (/ b (* a c)) (/ 1 b))))","(*.f64 (-.f64 (/.f64 b (*.f64 c a)) (/.f64 #s(literal 1 binary64) b)) (neg.f64 c))","(* -1 (* c (- (/ 1 (pow b 2)) (/ 1 (* a c)))))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 b b)) (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (fma.f64 #s(literal 4 binary64) a (/.f64 (*.f64 b b) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) (neg.f64 c)) b) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/512 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64))))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":436.56298828125,"type":"simplify"},{"count":[[22,995]],"egraph":[[0,8465,261,0.104390235],[2,2769,261,0.052083014],[1,370,269,0.015137762],[0,89,275,0.004046717],[0,57,283,0.000848747]],"inputs":[["(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(neg.f64 a)","(/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","(/.f64 (neg.f64 c) b)","(neg.f64 c)","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","(neg.f64 b)","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))","(fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (/.f64 c b) b)","(/.f64 c b)","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(/.f64 c (*.f64 b b))"]],"memory":[[407280,65680080]],"outputs":[["(*.f64 (/.f64 (neg.f64 a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) a) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (/.f64 (neg.f64 (neg.f64 a)) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(*.f64 (/.f64 (neg.f64 (neg.f64 a)) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (/.f64 (neg.f64 (neg.f64 a)) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(*.f64 (/.f64 (neg.f64 (neg.f64 a)) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (/.f64 (neg.f64 a) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (/.f64 (neg.f64 a) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 (neg.f64 a) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 (neg.f64 a) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(*.f64 (/.f64 a (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal -1 binary64))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(*.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) #s(literal -1 binary64)) a)","(*.f64 (neg.f64 (neg.f64 a)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) a)","(*.f64 (/.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (/.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (neg.f64 a))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 a (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(*.f64 a (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (neg.f64 (neg.f64 a))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (neg.f64 a)))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) #s(literal 1 binary64))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 a))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 a))) (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 a))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (*.f64 (neg.f64 a) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 a) #s(literal 1 binary64)) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (neg.f64 (neg.f64 a)) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 a)) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (neg.f64 a)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (neg.f64 (neg.f64 a))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (neg.f64 (neg.f64 a)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a)))","(/.f64 (neg.f64 a) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (neg.f64 a) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(neg.f64 (/.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))) (/.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (/.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)))) (/.f64 (/.f64 #s(literal -1 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))) (/.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (/.f64 (/.f64 #s(literal -1 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (/.f64 (/.f64 #s(literal -1 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) a) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) a) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64)) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) a) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal -1 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (neg.f64 a)))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (/.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) a) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) a) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) a)","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (/.f64 #s(literal -1/2 binary64) a)) (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal 1/2 binary64)) a)","(/.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (/.f64 #s(literal -1/2 binary64) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (/.f64 #s(literal -1/2 binary64) a))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(neg.f64 (/.f64 #s(literal -1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) a)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 2 binary64)) a) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))))","(-.f64 (/.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) a) #s(literal 2 binary64)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))))","(-.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(*.f64 #s(literal -1 binary64) a)","(*.f64 a #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 a a))) (neg.f64 (+.f64 #s(literal 0 binary64) a)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 a a (*.f64 #s(literal 0 binary64) a)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 a a)) (+.f64 #s(literal 0 binary64) a))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 a #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 a a (*.f64 #s(literal 0 binary64) a))))","(neg.f64 a)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) a)) (/.f64 (*.f64 a a) (+.f64 #s(literal 0 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 a a (*.f64 #s(literal 0 binary64) a)))) (/.f64 (pow.f64 a #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 a a (*.f64 #s(literal 0 binary64) a)))))","(-.f64 #s(literal 0 binary64) a)","(+.f64 #s(literal 0 binary64) (neg.f64 a))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal -1 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 c #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c #s(literal 1 binary64)))","(*.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) c) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 c #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (neg.f64 c))","(*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 c) b))","(*.f64 (neg.f64 c) (pow.f64 b #s(literal -1 binary64)))","(*.f64 c (neg.f64 (pow.f64 b #s(literal -1 binary64))))","(*.f64 c (/.f64 #s(literal -1 binary64) b))","(*.f64 #s(literal -1 binary64) (/.f64 c b))","(pow.f64 (/.f64 (/.f64 b c) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 b) c) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 c #s(literal -1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c #s(literal 1 binary64))) b)","(/.f64 (/.f64 c #s(literal -1 binary64)) b)","(/.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64)) b)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b c) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c))","(/.f64 (neg.f64 c) b)","(/.f64 c (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b c) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (/.f64 b c))","(neg.f64 (/.f64 c b))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 c b))","(-.f64 #s(literal 0 binary64) (/.f64 c b))","(exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64)))","(*.f64 c #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) c)","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c))) (neg.f64 (+.f64 #s(literal 0 binary64) c)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c))))","(neg.f64 c)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) c)) (/.f64 (*.f64 c c) (+.f64 #s(literal 0 binary64) c)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c)))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c)))))","(-.f64 #s(literal 0 binary64) c)","(+.f64 #s(literal 0 binary64) (neg.f64 c))","(*.f64 (/.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) (*.f64 a b)) (/.f64 (neg.f64 b) b))","(*.f64 (/.f64 (neg.f64 b) (*.f64 a b)) (/.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) b))","(*.f64 (/.f64 (neg.f64 b) (*.f64 b b)) (/.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) a))","(*.f64 (/.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) (*.f64 b b)) (/.f64 (neg.f64 b) a))","(*.f64 (/.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) a) (/.f64 (neg.f64 b) (*.f64 b b)))","(*.f64 (*.f64 (fma.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)) b)","(*.f64 (/.f64 (neg.f64 b) a) (/.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) (*.f64 b b)))","(*.f64 (fma.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64))) (neg.f64 b))","(*.f64 (neg.f64 b) (fma.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64))))","(*.f64 b (neg.f64 (fma.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64))) b))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64))) (neg.f64 b))) (neg.f64 (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64))) (neg.f64 b))) (neg.f64 (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) (neg.f64 b))) (neg.f64 (*.f64 (*.f64 b b) a)))","(/.f64 (neg.f64 (*.f64 (neg.f64 b) (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64))))) (neg.f64 (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 b) (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64))))) (neg.f64 (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 b) (fma.f64 b b (*.f64 (neg.f64 c) a)))) (neg.f64 (*.f64 (*.f64 b b) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64))) (neg.f64 b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64))) (neg.f64 b)) (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64))))","(/.f64 (*.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) (neg.f64 b)) (*.f64 (*.f64 b b) a))","(/.f64 (*.f64 (neg.f64 b) (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64)))) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 b) (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64)))) (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64))))","(/.f64 (*.f64 (neg.f64 b) (fma.f64 b b (*.f64 (neg.f64 c) a))) (*.f64 (*.f64 b b) a))","(neg.f64 (*.f64 (fma.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64))) b))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 1 binary64)) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 1 binary64)) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 (*.f64 (neg.f64 b) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (*.f64 (neg.f64 b) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 (/.f64 b a) #s(literal -1 binary64) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (/.f64 b a) #s(literal -1 binary64) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 (/.f64 (neg.f64 b) a) #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (/.f64 (neg.f64 b) a) #s(literal 1 binary64) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -1 binary64)) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -1 binary64)) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) a) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) a) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 (neg.f64 b) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 (neg.f64 b) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 b (/.f64 #s(literal -1 binary64) a) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 b (/.f64 #s(literal -1 binary64) a) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(fma.f64 #s(literal -1 binary64) (/.f64 b a) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(fma.f64 #s(literal -1 binary64) (/.f64 b a) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64))) b))","(+.f64 (/.f64 (neg.f64 b) a) (*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b)))","(+.f64 (/.f64 (neg.f64 b) a) (*.f64 (neg.f64 b) (/.f64 (/.f64 (neg.f64 c) b) b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (fma.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64))) (neg.f64 b)))","(*.f64 b #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) b)","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))))","(/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))","(/.f64 (*.f64 b b) (neg.f64 (+.f64 #s(literal 0 binary64) b)))","(neg.f64 b)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) b)) (/.f64 (*.f64 b b) (+.f64 #s(literal 0 binary64) b)))","(-.f64 #s(literal 0 binary64) b)","(+.f64 #s(literal 0 binary64) (neg.f64 b))","(*.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64))) (pow.f64 (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64))) (pow.f64 (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) (pow.f64 (*.f64 (*.f64 b b) a) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64))) (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 b b) a) (fma.f64 b b (*.f64 (neg.f64 c) a))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) a)) (*.f64 (neg.f64 b) b))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)))) (neg.f64 (neg.f64 (*.f64 (*.f64 b b) a))))","(/.f64 (neg.f64 (-.f64 b (*.f64 a (/.f64 c b)))) (neg.f64 (*.f64 a b)))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 b c) b) a)) (neg.f64 (*.f64 a (*.f64 (/.f64 b c) b))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b)) (*.f64 a (/.f64 (neg.f64 c) b)))) (neg.f64 (*.f64 a (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 b) b)) (*.f64 a (neg.f64 c)))) (neg.f64 (*.f64 a (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b) (*.f64 (neg.f64 a) (/.f64 c b)))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 b c) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) (*.f64 (/.f64 b c) b))))","(/.f64 (neg.f64 (-.f64 b (*.f64 (neg.f64 a) (/.f64 (neg.f64 c) b)))) (neg.f64 (*.f64 (neg.f64 a) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (*.f64 (neg.f64 a) (neg.f64 c)))) (neg.f64 (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b) b) (*.f64 (neg.f64 a) c))) (neg.f64 (*.f64 (neg.f64 a) (*.f64 b b))))","(/.f64 (/.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) a) (*.f64 b b))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64)))) (neg.f64 (-.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64)))) (neg.f64 (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 b b (*.f64 (neg.f64 c) a))) (neg.f64 (*.f64 (*.f64 b b) a)))","(/.f64 (-.f64 b (*.f64 a (/.f64 c b))) (*.f64 a b))","(/.f64 (-.f64 (*.f64 (/.f64 b c) b) a) (*.f64 a (*.f64 (/.f64 b c) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b)) (*.f64 a (/.f64 (neg.f64 c) b))) (*.f64 a (neg.f64 b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 b) b)) (*.f64 a (neg.f64 c))) (*.f64 a (*.f64 (neg.f64 b) b)))","(/.f64 (-.f64 (neg.f64 b) (*.f64 (neg.f64 a) (/.f64 c b))) (*.f64 (neg.f64 a) b))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 b c) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 b c) b)))","(/.f64 (-.f64 b (*.f64 (neg.f64 a) (/.f64 (neg.f64 c) b))) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (-.f64 (*.f64 b b) (*.f64 (neg.f64 a) (neg.f64 c))) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) b) (*.f64 (neg.f64 a) c)) (*.f64 (neg.f64 a) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64))) (-.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b)))","(/.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64))) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64))) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b)))))","(/.f64 (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64))) (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64))))","(/.f64 (fma.f64 b b (*.f64 (neg.f64 c) a)) (*.f64 (*.f64 b b) a))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64))) (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 b b) a) (fma.f64 b b (*.f64 (neg.f64 c) a))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64))) (-.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 b b) a) (fma.f64 b b (*.f64 (neg.f64 c) a)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)) (/.f64 (neg.f64 c) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (neg.f64 c) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 c b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) b) b) (/.f64 c #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 c b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) b) (neg.f64 b)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c #s(literal -1 binary64)) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 b b)) (/.f64 c #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (/.f64 c b) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) b) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 b #s(literal -2 binary64))) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 b b)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (/.f64 c b) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 c) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 c #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c b) (/.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c b) (neg.f64 (pow.f64 b #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c b) (/.f64 #s(literal -1 binary64) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 c (*.f64 b b)) #s(literal -1 binary64) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 c) b) b))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 c) b) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b))","(fma.f64 (/.f64 (neg.f64 c) b) (/.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (/.f64 (neg.f64 c) b) (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 c (neg.f64 (pow.f64 b #s(literal -2 binary64))) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a) (/.f64 (/.f64 (neg.f64 c) b) b))","(fma.f64 #s(literal -1 binary64) (/.f64 c (*.f64 b b)) (pow.f64 a #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b))) (/.f64 (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64)) (-.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b))))","(-.f64 (/.f64 b (*.f64 a b)) (/.f64 (*.f64 a (/.f64 c b)) (*.f64 a b)))","(-.f64 (/.f64 (*.f64 (/.f64 b c) b) (*.f64 a (*.f64 (/.f64 b c) b))) (/.f64 a (*.f64 a (*.f64 (/.f64 b c) b))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b)) (*.f64 a (neg.f64 b))) (/.f64 (*.f64 a (/.f64 (neg.f64 c) b)) (*.f64 a (neg.f64 b))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 b) b)) (*.f64 a (*.f64 (neg.f64 b) b))) (/.f64 (*.f64 a (neg.f64 c)) (*.f64 a (*.f64 (neg.f64 b) b))))","(-.f64 (/.f64 (neg.f64 b) (*.f64 (neg.f64 a) b)) (/.f64 (*.f64 (neg.f64 a) (/.f64 c b)) (*.f64 (neg.f64 a) b)))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 b c) b)) (*.f64 (neg.f64 a) (*.f64 (/.f64 b c) b))) (/.f64 (*.f64 (neg.f64 a) #s(literal 1 binary64)) (*.f64 (neg.f64 a) (*.f64 (/.f64 b c) b))))","(-.f64 (/.f64 b (*.f64 (neg.f64 a) (neg.f64 b))) (/.f64 (*.f64 (neg.f64 a) (/.f64 (neg.f64 c) b)) (*.f64 (neg.f64 a) (neg.f64 b))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) b))) (/.f64 (*.f64 (neg.f64 a) (neg.f64 c)) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) b))))","(-.f64 (/.f64 (*.f64 (neg.f64 b) b) (*.f64 (neg.f64 a) (*.f64 b b))) (/.f64 (*.f64 (neg.f64 a) c) (*.f64 (neg.f64 a) (*.f64 b b))))","(-.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64)))) (/.f64 (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -2 binary64)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 a #s(literal -3 binary64)) (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64)))) (/.f64 (pow.f64 (*.f64 (/.f64 b c) b) #s(literal -3 binary64)) (fma.f64 (/.f64 c (*.f64 b b)) (fma.f64 (pow.f64 b #s(literal -2 binary64)) c (pow.f64 a #s(literal -1 binary64))) (pow.f64 a #s(literal -2 binary64)))))","(-.f64 (*.f64 (/.f64 b (*.f64 b b)) (/.f64 b a)) (*.f64 (/.f64 c (*.f64 a b)) (/.f64 a b)))","(-.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 c (*.f64 b b)))","(+.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (pow.f64 a #s(literal -1 binary64)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b))","(*.f64 (-.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (pow.f64 (/.f64 b a) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 c b) (/.f64 b a)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 b c) #s(literal -3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a))) (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (/.f64 c b) (/.f64 b a)) (-.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (pow.f64 (/.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a))) (pow.f64 (/.f64 b c) #s(literal -2 binary64))) (+.f64 (pow.f64 (/.f64 b c) #s(literal -3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (neg.f64 (-.f64 (/.f64 (neg.f64 b) a) (/.f64 c b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (pow.f64 (/.f64 b a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 c b) (/.f64 b a)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 b c) #s(literal -3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a))) (pow.f64 (/.f64 b c) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a) (*.f64 b b))) (neg.f64 (*.f64 b (neg.f64 a))))","(/.f64 (neg.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (/.f64 (neg.f64 a) b) (*.f64 b #s(literal 1 binary64)))) (neg.f64 (*.f64 b (/.f64 (neg.f64 a) b))))","(/.f64 (neg.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) a (*.f64 (neg.f64 b) b))) (neg.f64 (*.f64 b a)))","(/.f64 (neg.f64 (fma.f64 b b (*.f64 (neg.f64 a) (*.f64 c #s(literal 1 binary64))))) (neg.f64 (*.f64 (neg.f64 a) b)))","(/.f64 (neg.f64 (+.f64 b (*.f64 (/.f64 (neg.f64 a) b) (*.f64 c #s(literal 1 binary64))))) (neg.f64 (*.f64 (/.f64 (neg.f64 a) b) b)))","(/.f64 (neg.f64 (fma.f64 (neg.f64 b) b (*.f64 a (*.f64 c #s(literal 1 binary64))))) (neg.f64 (*.f64 a b)))","(/.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (pow.f64 (/.f64 b c) #s(literal -2 binary64))) (-.f64 (/.f64 (neg.f64 b) a) (/.f64 c b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (pow.f64 (/.f64 b a) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 c b) (/.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 b c) #s(literal -3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 b c) #s(literal -3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a))) (pow.f64 (/.f64 b c) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a) (*.f64 b b)) (*.f64 b (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) (/.f64 (neg.f64 a) b) (*.f64 b #s(literal 1 binary64))) (*.f64 b (/.f64 (neg.f64 a) b)))","(/.f64 (fma.f64 (*.f64 c #s(literal 1 binary64)) a (*.f64 (neg.f64 b) b)) (*.f64 b a))","(/.f64 (fma.f64 b b (*.f64 (neg.f64 a) (*.f64 c #s(literal 1 binary64)))) (*.f64 (neg.f64 a) b))","(/.f64 (+.f64 b (*.f64 (/.f64 (neg.f64 a) b) (*.f64 c #s(literal 1 binary64)))) (*.f64 (/.f64 (neg.f64 a) b) b))","(/.f64 (fma.f64 (neg.f64 b) b (*.f64 a (*.f64 c #s(literal 1 binary64)))) (*.f64 a b))","(/.f64 (-.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (pow.f64 (/.f64 b a) #s(literal 2 binary64))) (+.f64 (/.f64 c b) (/.f64 b a)))","(/.f64 (+.f64 (pow.f64 (/.f64 b c) #s(literal -3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a)))))","(/.f64 (+.f64 (pow.f64 (/.f64 b c) #s(literal -3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64))) (+.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a))) (pow.f64 (/.f64 b c) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 c b) (/.f64 b a)) (-.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (pow.f64 (/.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a))) (pow.f64 (/.f64 b c) #s(literal -2 binary64))) (+.f64 (pow.f64 (/.f64 b c) #s(literal -3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (/.f64 c b) (/.f64 b a)) (-.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (pow.f64 (/.f64 b a) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 a))) (pow.f64 (/.f64 b c) #s(literal -2 binary64))) (+.f64 (pow.f64 (/.f64 b c) #s(literal -3 binary64)) (pow.f64 (/.f64 b a) #s(literal 3 binary64))))))","(fma.f64 (/.f64 b (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 c b) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b (/.f64 b #s(literal 1 binary64))) (/.f64 c b) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b (*.f64 b b)) (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal -1 binary64))) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b (*.f64 b b)) (/.f64 c #s(literal 1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 #s(literal -1 binary64) (/.f64 b #s(literal 1 binary64))) (/.f64 (neg.f64 b) (/.f64 b c)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 c (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 b b) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b (neg.f64 b)) (/.f64 (neg.f64 c) b) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b (/.f64 (neg.f64 b) c)) (/.f64 #s(literal -1 binary64) b) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 (/.f64 c b) #s(literal -1 binary64)) (/.f64 b (neg.f64 b)) (/.f64 (neg.f64 b) a))","(fma.f64 (pow.f64 (/.f64 #s(literal -1 binary64) c) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) b) (/.f64 (neg.f64 b) a))","(fma.f64 (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b b) (/.f64 (/.f64 c b) #s(literal 1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b b) (/.f64 c b) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 b (*.f64 (neg.f64 b) b)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) b) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 (/.f64 c b) #s(literal 1 binary64)) (/.f64 b b) (/.f64 (neg.f64 b) a))","(fma.f64 (*.f64 b c) (pow.f64 b #s(literal -2 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 b b)) (/.f64 (neg.f64 b) (pow.f64 c #s(literal -1 binary64))) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 1 binary64)) (/.f64 c b))","(fma.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (neg.f64 b) (/.f64 b c)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 #s(literal -1 binary64) b) (pow.f64 (/.f64 #s(literal -1 binary64) c) #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 #s(literal -1 binary64) b) (neg.f64 c) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) a) (/.f64 c b))","(fma.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 c (*.f64 b b)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 b (*.f64 b b)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 c #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)) (/.f64 c b))","(fma.f64 (*.f64 (neg.f64 b) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)) (/.f64 c b))","(fma.f64 (*.f64 c #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 b a) #s(literal -1 binary64) (/.f64 c b))","(fma.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (/.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) (*.f64 c #s(literal 1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) c (/.f64 (neg.f64 b) a))","(fma.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 b (pow.f64 c #s(literal -1 binary64))) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 (neg.f64 b) a) #s(literal 1 binary64) (/.f64 c b))","(fma.f64 (/.f64 c b) (/.f64 b b) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 c b) #s(literal 1 binary64) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 c (*.f64 b b)) (/.f64 b #s(literal 1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 c (*.f64 b b)) b (/.f64 (neg.f64 b) a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)) (/.f64 c b))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -1 binary64)) (/.f64 c b))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b) (/.f64 c b))","(fma.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) a) (/.f64 c b))","(fma.f64 #s(literal 1 binary64) (/.f64 c b) (/.f64 (neg.f64 b) a))","(fma.f64 (neg.f64 b) (pow.f64 a #s(literal -1 binary64)) (/.f64 c b))","(fma.f64 (/.f64 (neg.f64 c) b) (/.f64 b (neg.f64 b)) (/.f64 (neg.f64 b) a))","(fma.f64 (/.f64 (neg.f64 c) b) (/.f64 (neg.f64 b) b) (/.f64 (neg.f64 b) a))","(fma.f64 (neg.f64 c) (/.f64 #s(literal -1 binary64) b) (/.f64 (neg.f64 b) a))","(fma.f64 b (/.f64 #s(literal -1 binary64) a) (/.f64 c b))","(fma.f64 b (/.f64 c (*.f64 b b)) (/.f64 (neg.f64 b) a))","(fma.f64 c (pow.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 #s(literal -1 binary64) (/.f64 b a) (/.f64 c b))","(fma.f64 #s(literal -1 binary64) (/.f64 (neg.f64 c) b) (/.f64 (neg.f64 b) a))","(-.f64 (/.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (-.f64 (/.f64 (neg.f64 b) a) (/.f64 c b))) (/.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (-.f64 (/.f64 (neg.f64 b) a) (/.f64 c b))))","(-.f64 (/.f64 (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (+.f64 (/.f64 c b) (/.f64 b a))) (/.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (+.f64 (/.f64 c b) (/.f64 b a))))","(-.f64 (/.f64 c b) (/.f64 b a))","(+.f64 (/.f64 (neg.f64 b) a) (/.f64 c b))","(+.f64 (/.f64 c b) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) b) #s(literal 1 binary64)) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 c b))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)) (/.f64 c b))","(*.f64 (/.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 c b))","(*.f64 (/.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 c (*.f64 (neg.f64 b) #s(literal -1 binary64))) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) c)) (*.f64 #s(literal -1 binary64) (pow.f64 b #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 c b) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) b) b))","(*.f64 (/.f64 c #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 b #s(literal -2 binary64))))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 b b)))","(*.f64 (/.f64 (/.f64 c b) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 b b)) (/.f64 c #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) c)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (/.f64 c b) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) b) (neg.f64 b)))","(*.f64 (/.f64 c #s(literal 1 binary64)) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (/.f64 c b) #s(literal 1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 c b))","(*.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 c #s(literal 1 binary64)))","(*.f64 (pow.f64 b #s(literal -2 binary64)) c)","(*.f64 (/.f64 c b) (/.f64 (neg.f64 (pow.f64 b #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 c b) (/.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)))","(*.f64 (/.f64 c b) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 c (*.f64 b b)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 c (*.f64 b b)))","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 #s(literal -1 binary64) b))","(*.f64 (neg.f64 c) (*.f64 #s(literal -1 binary64) (pow.f64 b #s(literal -2 binary64))))","(*.f64 (neg.f64 c) (/.f64 #s(literal -1 binary64) (*.f64 b b)))","(*.f64 c (pow.f64 b #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 b) c)))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (neg.f64 c) b) b))","(pow.f64 (*.f64 (neg.f64 b) (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 b c) b) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b c) b) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 c b) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 b b))","(/.f64 (/.f64 (/.f64 c b) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (pow.f64 b #s(literal -1 binary64))) (/.f64 (neg.f64 b) c))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (*.f64 (neg.f64 b) b))","(/.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64)) (*.f64 (neg.f64 b) b))","(/.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 b b))","(/.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 b c))","(/.f64 (/.f64 c b) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 b c) b))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 b) (/.f64 (neg.f64 b) c)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 b c) b) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b c) b))","(/.f64 (/.f64 (neg.f64 c) b) (neg.f64 b))","(/.f64 (neg.f64 c) (*.f64 (neg.f64 b) b))","(/.f64 c (*.f64 b b))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 b) (/.f64 (neg.f64 b) c))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 b c) b) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b c) b)))","(neg.f64 (/.f64 (/.f64 (neg.f64 c) b) b))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) b) (neg.f64 b)) (/.f64 (/.f64 (neg.f64 c) b) b))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) b) b) (/.f64 (/.f64 (neg.f64 c) b) b))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) (/.f64 (/.f64 (neg.f64 c) b) b))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 (/.f64 (neg.f64 c) b) b))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b c) b)) #s(literal -1 binary64)))","(*.f64 (/.f64 b (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 c b))","(*.f64 (/.f64 b (/.f64 b #s(literal 1 binary64))) (/.f64 c b))","(*.f64 (/.f64 b (*.f64 b b)) (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal -1 binary64))))","(*.f64 (/.f64 b (*.f64 b b)) (/.f64 c #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 b #s(literal 1 binary64))) (/.f64 (neg.f64 b) (/.f64 b c)))","(*.f64 (/.f64 c (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 b b))","(*.f64 (/.f64 b (neg.f64 b)) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 b (/.f64 (neg.f64 b) c)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (/.f64 (/.f64 c b) #s(literal -1 binary64)) (/.f64 b (neg.f64 b)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) c) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 b b) (/.f64 (/.f64 c b) #s(literal 1 binary64)))","(*.f64 (/.f64 b b) (/.f64 c b))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 b (*.f64 (neg.f64 b) b)))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (/.f64 (/.f64 c b) #s(literal 1 binary64)) (/.f64 b b))","(*.f64 (*.f64 b c) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 b b)) (/.f64 (neg.f64 b) (pow.f64 c #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (neg.f64 b) (/.f64 b c)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (pow.f64 (/.f64 #s(literal -1 binary64) c) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (neg.f64 c))","(*.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 c (*.f64 b b)))","(*.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 b (*.f64 b b)))","(*.f64 (/.f64 c #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 c) b) b))","(*.f64 (*.f64 c #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (neg.f64 c) b) b) (/.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (*.f64 c #s(literal 1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) c)","(*.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 b (pow.f64 c #s(literal -1 binary64))))","(*.f64 (/.f64 c b) (/.f64 b b))","(*.f64 (/.f64 c b) #s(literal 1 binary64))","(*.f64 (/.f64 c (*.f64 b b)) (/.f64 b #s(literal 1 binary64)))","(*.f64 (/.f64 c (*.f64 b b)) b)","(*.f64 #s(literal 1 binary64) (/.f64 c b))","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 b (neg.f64 b)))","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 (neg.f64 b) b))","(*.f64 (neg.f64 c) (/.f64 #s(literal -1 binary64) b))","(*.f64 b (/.f64 c (*.f64 b b)))","(*.f64 c (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 c) b))","(pow.f64 (/.f64 (/.f64 b c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b c) #s(literal -1 binary64))","(pow.f64 (/.f64 c b) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 (neg.f64 c) b) b)) b)","(/.f64 (neg.f64 (*.f64 b (/.f64 (neg.f64 c) b))) b)","(/.f64 (neg.f64 (*.f64 b (neg.f64 c))) (*.f64 b b))","(/.f64 (neg.f64 (*.f64 b c)) (*.f64 (neg.f64 b) b))","(/.f64 (neg.f64 (neg.f64 (*.f64 c #s(literal 1 binary64)))) b)","(/.f64 (neg.f64 (/.f64 c #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 b #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 b c) b)))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) b)) (*.f64 b b))","(/.f64 (neg.f64 (*.f64 c b)) (*.f64 (neg.f64 b) b))","(/.f64 (*.f64 (/.f64 (neg.f64 c) b) b) (neg.f64 b))","(/.f64 (*.f64 (neg.f64 c) b) (*.f64 (neg.f64 b) b))","(/.f64 (*.f64 c b) (*.f64 b b))","(/.f64 (*.f64 b (/.f64 (neg.f64 c) b)) (neg.f64 b))","(/.f64 (*.f64 b (neg.f64 c)) (*.f64 (neg.f64 b) b))","(/.f64 (*.f64 b c) (*.f64 b b))","(/.f64 (neg.f64 (pow.f64 b #s(literal -1 binary64))) (neg.f64 (pow.f64 c #s(literal -1 binary64))))","(/.f64 (/.f64 c #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 (/.f64 b c) b))","(/.f64 (*.f64 c #s(literal 1 binary64)) b)","(/.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 c #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b c))","(/.f64 (neg.f64 b) (neg.f64 (*.f64 (/.f64 b c) b)))","(/.f64 (neg.f64 c) (neg.f64 b))","(/.f64 b (*.f64 (/.f64 b c) b))","(/.f64 c b)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b c) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 b) c))","(neg.f64 (/.f64 (neg.f64 c) b))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (/.f64 b c) b)) (/.f64 (neg.f64 b) (*.f64 (/.f64 b c) b)))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 (neg.f64 c) b))","(exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)","(*.f64 c (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64))) c)) (neg.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64))) c)) (neg.f64 (fma.f64 #s(literal 16 binary64) (*.f64 a a) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a))))))","(/.f64 (neg.f64 (*.f64 c (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64))))) (neg.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b))))","(/.f64 (neg.f64 (*.f64 c (fma.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64))))) (neg.f64 (fma.f64 #s(literal 16 binary64) (*.f64 a a) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64))) c) (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b)))","(/.f64 (*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64))) c) (fma.f64 #s(literal 16 binary64) (*.f64 a a) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a)))))","(/.f64 (*.f64 c (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 2 binary64)))) (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 (neg.f64 b) c) b)))","(/.f64 (*.f64 c (fma.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b c) b) #s(literal 3 binary64)))) (fma.f64 #s(literal 16 binary64) (*.f64 a a) (*.f64 (*.f64 (/.f64 b c) b) (-.f64 (*.f64 (/.f64 b c) b) (*.f64 #s(literal -4 binary64) a)))))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (neg.f64 (*.f64 c a)) #s(literal 4 binary64) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (neg.f64 (*.f64 c a)) #s(literal 4 binary64) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (*.f64 (/.f64 b c) b) c (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 c a)) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 c a)) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 c (*.f64 #s(literal -4 binary64) a) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 c (*.f64 #s(literal -4 binary64) a) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 c (*.f64 (/.f64 b c) b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 c (*.f64 (/.f64 b c) b)))","(fma.f64 a (*.f64 #s(literal -4 binary64) c) (*.f64 (*.f64 (/.f64 b c) b) c))","(fma.f64 a (*.f64 #s(literal -4 binary64) c) (*.f64 c (*.f64 (/.f64 b c) b)))","(+.f64 (*.f64 (*.f64 (/.f64 b c) b) c) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(+.f64 (*.f64 c (*.f64 (/.f64 b c) b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c))","(+.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) (*.f64 (*.f64 (/.f64 b c) b) c))","(+.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) (*.f64 c (*.f64 (/.f64 b c) b)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(*.f64 (/.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (neg.f64 a)))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a))","(pow.f64 (*.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal 2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a))))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))))","(neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) a)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) a) (neg.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a))))","(fma.f64 (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a))))","(fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal 2 binary64) a)))) (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))) (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))","(-.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))) #s(literal -1 binary64)))","(+.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b))) (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(/.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b)))","(/.f64 (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (-.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (neg.f64 b))","(fma.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(-.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)","(+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (neg.f64 b))","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(*.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)))))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) a) c))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (neg.f64 b)))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (neg.f64 b))","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) a) c) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (neg.f64 b))) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (neg.f64 b))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))))","(-.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b)))))","(-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) b)","(+.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))) (neg.f64 b))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) b) #s(literal 1 binary64)) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 c b))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)) (/.f64 c b))","(*.f64 (/.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 c b))","(*.f64 (/.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 c (*.f64 (neg.f64 b) #s(literal -1 binary64))) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) c)) (*.f64 #s(literal -1 binary64) (pow.f64 b #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 c b) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) b) b))","(*.f64 (/.f64 c #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 b #s(literal -2 binary64))))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 b b)))","(*.f64 (/.f64 (/.f64 c b) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 b b)) (/.f64 c #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) c)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (/.f64 c b) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) b) (neg.f64 b)))","(*.f64 (/.f64 c #s(literal 1 binary64)) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (/.f64 c b) #s(literal 1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 c b))","(*.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 c #s(literal 1 binary64)))","(*.f64 (pow.f64 b #s(literal -2 binary64)) c)","(*.f64 (/.f64 c b) (/.f64 (neg.f64 (pow.f64 b #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 c b) (/.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)))","(*.f64 (/.f64 c b) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 c (*.f64 b b)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 c (*.f64 b b)))","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 #s(literal -1 binary64) b))","(*.f64 (neg.f64 c) (*.f64 #s(literal -1 binary64) (pow.f64 b #s(literal -2 binary64))))","(*.f64 (neg.f64 c) (/.f64 #s(literal -1 binary64) (*.f64 b b)))","(*.f64 c (pow.f64 b #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 b) c)))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (neg.f64 c) b) b))","(pow.f64 (*.f64 (neg.f64 b) (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 b c) b) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b c) b) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 c b) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64))) (*.f64 b b))","(/.f64 (/.f64 (/.f64 c b) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (pow.f64 b #s(literal -1 binary64))) (/.f64 (neg.f64 b) c))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (*.f64 (neg.f64 b) b))","(/.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64)) (*.f64 (neg.f64 b) b))","(/.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 b b))","(/.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 b c))","(/.f64 (/.f64 c b) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 b c) b))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 b) (/.f64 (neg.f64 b) c)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 b c) b) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b c) b))","(/.f64 (/.f64 (neg.f64 c) b) (neg.f64 b))","(/.f64 (neg.f64 c) (*.f64 (neg.f64 b) b))","(/.f64 c (*.f64 b b))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 b) (/.f64 (neg.f64 b) c))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 b c) b) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b c) b)))","(neg.f64 (/.f64 (/.f64 (neg.f64 c) b) b))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) b) (neg.f64 b)) (/.f64 (/.f64 (neg.f64 c) b) b))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) b) b) (/.f64 (/.f64 (neg.f64 c) b) b))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) (/.f64 (/.f64 (neg.f64 c) b) b))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 (/.f64 (neg.f64 c) b) b))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b c) b)) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":391.360107421875,"type":"rewrite"},{"compiler":[[41080,4505]],"memory":[[5422592,109042112]],"time":251.535888671875,"type":"eval"},{"alts":[["(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","fresh",27.095488631053676,"binary64"],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","fresh",47.96838039627345,"binary64"],["(/.f64 (-.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))) (*.f64 #s(literal 2 binary64) a))","fresh",43.75135019393438,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","fresh",25.314013760899215,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","done",28.34896439655665,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) #s(approx (* (+ (* -4 a) (* (/ b c) b)) c) (*.f64 (*.f64 #s(literal -4 binary64) c) a)))) b) (*.f64 #s(literal 2 binary64) a))","fresh",40.13608739909212,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","next",49.46098481757248,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","done",25.167263342386594,"binary64"],["(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","done",25.17807772118479,"binary64"],["(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) #s(approx (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 c a)) (/.f64 #s(literal 1/2 binary64) (*.f64 b b))) b))))","fresh",49.56569779453854,"binary64"],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))))","fresh",46.15224805900606,"binary64"],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","next",46.22424017316338,"binary64"],["(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","fresh",28.442398369353377,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b))","next",25.216097888928996,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","done",25.20794708261815,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","fresh",48.00131290285018,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","fresh",49.47320559887526,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 b (/.f64 #s(literal -1 binary64) a) (/.f64 c b)))","fresh",40.411965251943606,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c)) b))","fresh",49.89028425605331,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (neg.f64 (*.f64 b b)) b) a))","fresh",45.91849113042095,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 b (neg.f64 (*.f64 b b)))) a))","fresh",45.95659615974156,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (neg.f64 b)) a))","fresh",62.716378214000514,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","next",48.36287093677796,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 (*.f64 b b)) (pow.f64 b #s(literal -1 binary64))) a))","fresh",45.946498649957775,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","done",46.063276334512786,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","done",40.31015039783014,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","fresh",46.412635319982336,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","fresh",40.38436914782668,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",40.33384025576077,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) c) #s(literal -1 binary64))))","fresh",46.13034635404967,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 c (/.f64 #s(literal -1 binary64) b)))","fresh",46.114057584512786,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","fresh",46.30110899383636,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64))))","fresh",54.31540731882923,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) #s(approx (- (/ 1 a) (/ c (* b b))) (/.f64 #s(literal 1 binary64) a))))","fresh",40.38827539783014,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 (-.f64 (*.f64 a (/.f64 c b)) b) a)))","fresh",40.365263987591874,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","next",56.283687333757754,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 b (*.f64 c a))) c)))","fresh",45.23794536723894,"binary64"]],"compiler":[[19,13],[27,16],[76,23],[15,12],[27,19],[34,24],[25,19],[15,12],[18,15],[33,23],[27,19],[29,20],[31,22],[19,15],[15,12],[24,18],[25,19],[26,19],[29,21],[26,19],[28,21],[33,23],[29,21],[28,21],[22,17],[22,17],[23,18],[23,18],[25,18],[27,20],[23,18],[31,21],[26,21],[33,23],[39,25],[33,22],[41,27],[19,13],[27,16],[76,23],[15,12],[34,24],[25,19],[33,23],[27,19],[29,20],[31,22],[19,15],[24,18],[25,19],[26,19],[29,21],[26,19],[28,21],[33,23],[29,21],[28,21],[23,18],[23,18],[25,18],[27,20],[23,18],[31,21],[26,21],[33,23],[39,25],[33,22],[41,27]],"count":[[1147,37]],"kept":[{"done":[3,3],"fresh":[23,19],"new":[1116,12],"picked":[5,3]}],"memory":[[-11228128,59275552]],"min-error":[[5.44351336720755,"binary64"]],"time":64.77197265625,"type":"prune"},{"egraph":[[0,8122,319,0.06714345],[6,7528,320,0.017968203],[5,3905,320,0.032418498],[4,1359,323,0.018317582],[3,697,337,0.007979546],[2,314,341,0.002789623],[1,160,347,0.001339236],[0,89,350,0.000927808],[0,61,367,0.000482072]],"inputs":[["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(*.f64 c #s(literal -4 binary64))","c","#s(literal -4 binary64)","(*.f64 b b)","b","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))","(/.f64 c b)","c","b","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a))","(-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b))","(*.f64 #s(literal 0 binary64) a)","#s(literal 0 binary64)","a","(*.f64 a b)","b","(*.f64 a a)","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c))","(*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)","(*.f64 a (/.f64 #s(literal -2 binary64) b))","a","(/.f64 #s(literal -2 binary64) b)","#s(literal -2 binary64)","b","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","#s(literal 1/2 binary64)","#s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))","(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","(fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 a (*.f64 b b))","a","(*.f64 b b)","b","(/.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","c"]],"locations":[["(fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c))","cost-diff",0],["#s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","cost-diff",0],["(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","cost-diff",3],["(*.f64 a (/.f64 #s(literal -2 binary64) b))","cost-diff",0],["(*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)","cost-diff",0],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c))","cost-diff",0],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","cost-diff",0],["(-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b))","cost-diff",1],["(*.f64 #s(literal 0 binary64) a)","cost-diff",2],["(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a))","cost-diff",4],["(/.f64 c b)","cost-diff",0],["#s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))","cost-diff",0],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b)","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b))","cost-diff",1]],"memory":[[4197280,26175696]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b))","(/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) a)","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b)","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) b)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(*.f64 c #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) c)","c","#s(literal -4 binary64)","(*.f64 b b)","b","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))","(/.f64 c b)","c","b","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a))","(/.f64 (neg.f64 b) a)","(-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b))","(*.f64 (neg.f64 b) a)","(*.f64 #s(literal 0 binary64) a)","#s(literal 0 binary64)","#s(literal 0 binary64)","a","(*.f64 a b)","(*.f64 b a)","b","(*.f64 a a)","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))","(*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)","(*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)","(*.f64 a (/.f64 #s(literal -2 binary64) b))","(*.f64 (/.f64 #s(literal -2 binary64) b) a)","a","(/.f64 #s(literal -2 binary64) b)","#s(literal -2 binary64)","b","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(literal 1/2 binary64) (-.f64 (/.f64 a b) (/.f64 b c)))))","#s(literal 1/2 binary64)","#s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))","#s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(literal 1/2 binary64) (-.f64 (/.f64 a b) (/.f64 b c))))","(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","(*.f64 #s(literal 1/2 binary64) (-.f64 (/.f64 a b) (/.f64 b c)))","(fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c))","(/.f64 a (*.f64 b b))","a","(*.f64 b b)","b","(/.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","c"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":234.64697265625,"type":"simplify"},{"compiler":[[302,56]],"locations":[["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","accuracy",0.5290464882997621],["(/.f64 a (*.f64 b b))","accuracy",5.7366230377076],["(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","accuracy",6.070736757140174],["#s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))","accuracy",45.98637643678543],["(*.f64 a (/.f64 #s(literal -2 binary64) b))","accuracy",0.203125],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","accuracy",2.196033275602541],["(*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)","accuracy",4.490697044656084],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c))","accuracy",46.06582395352906],["(*.f64 a a)","accuracy",0.0],["(*.f64 #s(literal 0 binary64) a)","accuracy",0.0],["(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a))","accuracy",22.004109526496517],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","accuracy",40.31015039783014],["(/.f64 c b)","accuracy",0.0],["#s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))","accuracy",38.374027222123864],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","accuracy",40.33365546781241],["(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","accuracy",0.42986780094143484],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b))","accuracy",2.1432586165386205],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b)","accuracy",10.413486334482704],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","accuracy",20.30924009730325]],"memory":[[-2172528,56761344]],"mixsample":[[0.13671875,"ival-sub",1200],[0.00390625,"ival-sub",4800],[28.71923828125,"ival-div",0],[6.23095703125,"adjust",800],[0.02001953125,"ival-add",4800],[0.253662109375,"ival-div",400],[0.0458984375,"ival-sub",1600],[0.19384765625,"ival-div",1600],[0.144287109375,"ival-assert",0],[0.0830078125,"ival-sqrt",4800],[8.931396484375,"ival-sub",0],[0.84033203125,"ival-sqrt",1200],[6.275634765625,"ival-sqrt",0],[0.072998046875,"ival-sub",400],[0.033203125,"ival-div",4800],[0.040283203125,"ival-mult",800],[0.035888671875,"ival-sub",4400],[6.608154296875,"ival-add",0],[0.115478515625,"ival-sub",800],[0.01220703125,"ival-mult",1600],[0.249267578125,"ival-add",400],[0.909423828125,"adjust",2800],[0.284423828125,"ival-div",2000],[0.09619140625,"ival-div",4000],[0.247802734375,"ival-add",2400],[0.01513671875,"ival-sub",4000],[0.516357421875,"ival-div",2400],[0.390380859375,"ival-sqrt",400],[0.369384765625,"ival-add",1200],[0.49365234375,"ival-sqrt",2000],[0.01708984375,"ival-mult",2000],[0.070068359375,"ival-sub",2000],[0.6728515625,"ival-sqrt",800],[0.119873046875,"ival-sqrt",4000],[0.250244140625,"ival-div",4400],[0.298828125,"ival-sqrt",4400],[0.044677734375,"ival-add",4000],[3.336181640625,"adjust",2000],[0.087158203125,"ival-sub",2400],[0.572998046875,"ival-div",1200],[55.114990234375,"ival-mult",0],[0.258544921875,"ival-sqrt",1600],[0.05419921875,"ival-mult",400],[0.12158203125,"ival-add",1600],[0.1748046875,"ival-add",2000],[0.532470703125,"ival-div",800],[0.622314453125,"ival-sqrt",2400],[0.285400390625,"ival-true",0],[0.3466796875,"ival-add",800],[1.0712890625,"exact",0],[0.0849609375,"ival-add",4400],[1.25537109375,"ival-neg",0]],"outcomes":[[20.58837890625,1,"valid",27],[29.337890625,2,"valid",27],[15.759765625,3,"valid",11],[102.88720703125,0,"valid",191]],"time":217.0390625,"type":"localize"},{"count":[[23,194]],"inputs":[["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))","(/.f64 c b)","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a))","(*.f64 #s(literal 0 binary64) a)","(-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c))","(*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)","(*.f64 a (/.f64 #s(literal -2 binary64) b))","(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","#s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))","(fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(*.f64 a a)","(/.f64 a (*.f64 b b))"]],"memory":[[-3386224,22486992]],"outputs":[["(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(/ 1/2 a)","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","0","(* -1 (* a b))","(* -2 (/ a b))","(* -1/2 (/ b c))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(/ -1/2 c)","(- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))","(/ 1 b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(/ 1 (pow b 2))","(+ (* 4 (/ (* a c) (pow b 4))) (/ 1 (pow b 2)))","(+ (* a (- (* 16 (/ (* a (pow c 2)) (pow b 6))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(+ (* a (- (* a (- (* 64 (/ (* a (pow c 3)) (pow b 8))) (* -16 (/ (pow c 2) (pow b 6))))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(pow a 2)","(/ a (pow b 2))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(/ c b)","(+ (* -1 (/ b a)) (/ c b))","(* 1/2 (/ a b))","(* a (+ (* -1/2 (/ b (* a c))) (* 1/2 (/ 1 b))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(* 1/2 (/ a (pow b 2)))","(* a (- (* 1/2 (/ 1 (pow b 2))) (* 1/2 (/ 1 (* a c)))))","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(/ -1/4 (* a c))","(/ (- (* -1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c)))) a)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (- (* 1/2 (/ b (* a c))) (* 1/2 (/ 1 b)))))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(* -1 (* a (- (* 1/2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b 2))))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* a (pow c 3)))) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* a (pow c 4)))) (* -1/64 (/ (pow b 4) (pow c 3)))) a)) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ c (* -1 (/ (pow b 2) a))) b)","(/ (+ (* -1/2 (/ (pow b 2) c)) (* 1/2 a)) b)","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(/ (+ (* -1/2 (/ (pow b 2) c)) (* 1/2 a)) (pow b 2))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(- (* -1/16 (/ (pow b 2) (* (pow a 2) (pow c 2)))) (* 1/4 (/ 1 (* a c))))","(- (* (pow b 2) (- (* -1/64 (/ (pow b 2) (* (pow a 3) (pow c 3)))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/256 (/ (pow b 2) (* (pow a 4) (pow c 4)))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(/ (+ 1 (* 4 (/ (* a c) (pow b 2)))) (pow b 2))","(/ (- (+ 1 (* 16 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -4 (/ (* a c) (pow b 2)))) (pow b 2))","(/ (- (+ 1 (* 64 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -16 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -4 (/ (* a c) (pow b 2))))) (pow b 2))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* -1/2 (/ a b))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(/ -1 b)","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (- (* 1/2 (/ (* a c) (pow b 2))) 1/2) c)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(+ (* c (- (* 16 (/ (* (pow a 2) c) (pow b 6))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(+ (* c (- (* c (- (* 64 (/ (* (pow a 3) c) (pow b 8))) (* -16 (/ (pow a 2) (pow b 6))))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -1 (/ b (* a c))) (/ 1 b)))","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(/ (- (* -1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a)))) c)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 4) (pow c 3)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))))) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (- (/ b (* a c)) (/ 1 b))))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) c))) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* (pow a 4) c))) (* -1/64 (/ (pow b 4) (pow a 3)))) c)) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))"]],"series":[[5.515869140625,"((* (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b)) (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ c b) (/ (- (* 0 a) (* a b)) (* a a)) (* 0 a) (- (* 0 a) (* a b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* a (/ -2 b)) c) (* a (/ -2 b)) (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (sqrt (/ 1 (+ (* (* c -4) a) (* b b)))) (/ 1 (+ (* (* c -4) a) (* b b))) (* a a) (/ a (* b b)))","c","-inf"],[5.6318359375,"((* (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b)) (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ c b) (/ (- (* 0 a) (* a b)) (* a a)) (* 0 a) (- (* 0 a) (* a b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* a (/ -2 b)) c) (* a (/ -2 b)) (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (sqrt (/ 1 (+ (* (* c -4) a) (* b b)))) (/ 1 (+ (* (* c -4) a) (* b b))) (* a a) (/ a (* b b)))","c","inf"],[3.923095703125,"((* (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b)) (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ c b) (/ (- (* 0 a) (* a b)) (* a a)) (* 0 a) (- (* 0 a) (* a b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* a (/ -2 b)) c) (* a (/ -2 b)) (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (sqrt (/ 1 (+ (* (* c -4) a) (* b b)))) (/ 1 (+ (* (* c -4) a) (* b b))) (* a a) (/ a (* b b)))","c","0"],[4.618896484375,"((* (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b)) (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ c b) (/ (- (* 0 a) (* a b)) (* a a)) (* 0 a) (- (* 0 a) (* a b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* a (/ -2 b)) c) (* a (/ -2 b)) (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (sqrt (/ 1 (+ (* (* c -4) a) (* b b)))) (/ 1 (+ (* (* c -4) a) (* b b))) (* a a) (/ a (* b b)))","b","-inf"],[5.014892578125,"((* (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b)) (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ c b) (/ (- (* 0 a) (* a b)) (* a a)) (* 0 a) (- (* 0 a) (* a b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* a (/ -2 b)) c) (* a (/ -2 b)) (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (sqrt (/ 1 (+ (* (* c -4) a) (* b b)))) (/ 1 (+ (* (* c -4) a) (* b b))) (* a a) (/ a (* b b)))","b","inf"],[6.7890625,"((* (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b)) (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ c b) (/ (- (* 0 a) (* a b)) (* a a)) (* 0 a) (- (* 0 a) (* a b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* a (/ -2 b)) c) (* a (/ -2 b)) (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (sqrt (/ 1 (+ (* (* c -4) a) (* b b)))) (/ 1 (+ (* (* c -4) a) (* b b))) (* a a) (/ a (* b b)))","b","0"],[8.470947265625,"((* (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b)) (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ c b) (/ (- (* 0 a) (* a b)) (* a a)) (* 0 a) (- (* 0 a) (* a b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* a (/ -2 b)) c) (* a (/ -2 b)) (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (sqrt (/ 1 (+ (* (* c -4) a) (* b b)))) (/ 1 (+ (* (* c -4) a) (* b b))) (* a a) (/ a (* b b)))","a","-inf"],[8.553955078125,"((* (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b)) (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ c b) (/ (- (* 0 a) (* a b)) (* a a)) (* 0 a) (- (* 0 a) (* a b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* a (/ -2 b)) c) (* a (/ -2 b)) (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (sqrt (/ 1 (+ (* (* c -4) a) (* b b)))) (/ 1 (+ (* (* c -4) a) (* b b))) (* a a) (/ a (* b b)))","a","inf"],[9.13623046875,"((* (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b)) (/ 1/2 a) (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/ c b) (/ (- (* 0 a) (* a b)) (* a a)) (* 0 a) (- (* 0 a) (* a b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* a (/ -2 b)) c) (* a (/ -2 b)) (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (sqrt (/ 1 (+ (* (* c -4) a) (* b b)))) (/ 1 (+ (* (* c -4) a) (* b b))) (* a a) (/ a (* b b)))","a","0"]],"time":64.47412109375,"type":"series"},{"count":[[194,193]],"egraph":[[0,8100,5614,0.100202006],[1,3907,5852,0.031059206],[0,1188,6011,0.015393918]],"inputs":[["(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(/ 1/2 a)","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","0","(* -1 (* a b))","(* -2 (/ a b))","(* -1/2 (/ b c))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(/ -1/2 c)","(- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))","(/ 1 b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(/ 1 (pow b 2))","(+ (* 4 (/ (* a c) (pow b 4))) (/ 1 (pow b 2)))","(+ (* a (- (* 16 (/ (* a (pow c 2)) (pow b 6))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(+ (* a (- (* a (- (* 64 (/ (* a (pow c 3)) (pow b 8))) (* -16 (/ (pow c 2) (pow b 6))))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(pow a 2)","(/ a (pow b 2))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(/ c b)","(+ (* -1 (/ b a)) (/ c b))","(* 1/2 (/ a b))","(* a (+ (* -1/2 (/ b (* a c))) (* 1/2 (/ 1 b))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(* 1/2 (/ a (pow b 2)))","(* a (- (* 1/2 (/ 1 (pow b 2))) (* 1/2 (/ 1 (* a c)))))","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(/ -1/4 (* a c))","(/ (- (* -1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c)))) a)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (- (* 1/2 (/ b (* a c))) (* 1/2 (/ 1 b)))))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(* -1 (* a (- (* 1/2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b 2))))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* a (pow c 3)))) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* a (pow c 4)))) (* -1/64 (/ (pow b 4) (pow c 3)))) a)) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ c (* -1 (/ (pow b 2) a))) b)","(/ (+ (* -1/2 (/ (pow b 2) c)) (* 1/2 a)) b)","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(/ (+ (* -1/2 (/ (pow b 2) c)) (* 1/2 a)) (pow b 2))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(- (* -1/16 (/ (pow b 2) (* (pow a 2) (pow c 2)))) (* 1/4 (/ 1 (* a c))))","(- (* (pow b 2) (- (* -1/64 (/ (pow b 2) (* (pow a 3) (pow c 3)))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/256 (/ (pow b 2) (* (pow a 4) (pow c 4)))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(/ (+ 1 (* 4 (/ (* a c) (pow b 2)))) (pow b 2))","(/ (- (+ 1 (* 16 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -4 (/ (* a c) (pow b 2)))) (pow b 2))","(/ (- (+ 1 (* 64 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -16 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -4 (/ (* a c) (pow b 2))))) (pow b 2))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* -1/2 (/ a b))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(/ -1 b)","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (- (* 1/2 (/ (* a c) (pow b 2))) 1/2) c)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(+ (* c (- (* 16 (/ (* (pow a 2) c) (pow b 6))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(+ (* c (- (* c (- (* 64 (/ (* (pow a 3) c) (pow b 8))) (* -16 (/ (pow a 2) (pow b 6))))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -1 (/ b (* a c))) (/ 1 b)))","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(/ (- (* -1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a)))) c)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 4) (pow c 3)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))))) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (- (/ b (* a c)) (/ 1 b))))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) c))) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* (pow a 4) c))) (* -1/64 (/ (pow b 4) (pow a 3)))) c)) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))"]],"memory":[[9941152,54534192]],"method":["egg-herbie"],"outputs":[["(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) #s(literal -2 binary64) (/.f64 (neg.f64 (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b)) #s(literal -1/4 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (neg.f64 (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(/ 1/2 a)","(/.f64 #s(literal 1/2 binary64) a)","(* -2 (/ (* a c) b))","(*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 a (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b)) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (-.f64 (*.f64 a (/.f64 c b)) b) a)","0","#s(literal 0 binary64)","(* -1 (* a b))","(*.f64 (neg.f64 a) b)","(* -2 (/ a b))","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(* -1/2 (/ b c))","(*.f64 (/.f64 b c) #s(literal -1/2 binary64))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(fma.f64 (/.f64 b c) #s(literal -1/2 binary64) (*.f64 (/.f64 a b) #s(literal 1/2 binary64)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) a (/.f64 #s(literal 1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (neg.f64 c) (*.f64 (/.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) b) (/.f64 #s(literal -1/2 binary64) b)) (fma.f64 (/.f64 #s(literal -1/8 binary64) c) (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) c) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 5 binary64))))) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) a (/.f64 #s(literal 1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(/ -1/2 c)","(/.f64 #s(literal -1/2 binary64) c)","(- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))","(-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/2 binary64) c))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(fma.f64 (*.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64) (/.f64 #s(literal 1 binary64) b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 (*.f64 b a) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64))) #s(literal -1/2 binary64) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (/.f64 #s(literal 1 binary64) b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 b a) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) c) b) (/.f64 (*.f64 #s(literal -64 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 8 binary64)))) (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) b))) a (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (/.f64 #s(literal 1 binary64) b))","(/ 1 (pow b 2))","(/.f64 #s(literal 1 binary64) (*.f64 b b))","(+ (* 4 (/ (* a c) (pow b 4))) (/ 1 (pow b 2)))","(fma.f64 (*.f64 a (/.f64 c (pow.f64 b #s(literal 4 binary64)))) #s(literal 4 binary64) (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(+ (* a (- (* 16 (/ (* a (pow c 2)) (pow b 6))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 6 binary64))) #s(literal 16 binary64) (*.f64 (/.f64 c (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) a (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(+ (* a (- (* a (- (* 64 (/ (* a (pow c 3)) (pow b 8))) (* -16 (/ (pow c 2) (pow b 6))))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 8 binary64))) #s(literal 64 binary64) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal 16 binary64))) a (*.f64 (/.f64 c (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) a (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(pow a 2)","(*.f64 a a)","(/ a (pow b 2))","(/.f64 a (*.f64 b b))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64)))))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(/ c b)","(/.f64 c b)","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(* 1/2 (/ a b))","(*.f64 (/.f64 a b) #s(literal 1/2 binary64))","(* a (+ (* -1/2 (/ b (* a c))) (* 1/2 (/ 1 b))))","(*.f64 (fma.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) b)) a)","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(-.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) a) (/.f64 #s(literal -1/2 binary64) a))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(-.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (fma.f64 (*.f64 b (/.f64 (*.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 c c)) (/.f64 (*.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (neg.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))))","(* 1/2 (/ a (pow b 2)))","(*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))","(* a (- (* 1/2 (/ 1 (pow b 2))) (* 1/2 (/ 1 (* a c)))))","(*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) (*.f64 c a))) a)","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 7 binary64))))) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) a) (pow.f64 c #s(literal 3 binary64))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 c #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))))))","(/ -1/4 (* a c))","(/.f64 #s(literal -1/4 binary64) (*.f64 c a))","(/ (- (* -1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a)) (/.f64 #s(literal 1/4 binary64) c)) a)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c)))) a)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/64 binary64) (*.f64 a a)) (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a))) (/.f64 #s(literal 1/4 binary64) c)) a)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))))) a)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/256 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 (*.f64 #s(literal -1/64 binary64) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a) (/.f64 #s(literal 1/4 binary64) c))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) b) (/.f64 (fma.f64 (*.f64 #s(literal 1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) a)) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))) #s(literal -2 binary64))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64)) (/.f64 (neg.f64 (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) a) b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/512 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64))))))","(* -1 (* a (- (* 1/2 (/ b (* a c))) (* 1/2 (/ 1 b)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/2 binary64) b)))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -1/2 binary64))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/4 binary64)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -1/2 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/16 binary64) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64))) a))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/32 binary64) c) (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) a) c) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64)))) a) #s(literal -1 binary64) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64)))) a))","(* -1 (* a (- (* 1/2 (/ 1 (* a c))) (* 1/2 (/ 1 (pow b 2))))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 c a)) (/.f64 #s(literal 1/2 binary64) (*.f64 b b))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) #s(literal 1/2 binary64))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/64 binary64))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(-.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 5 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) a) (pow.f64 c #s(literal 3 binary64))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 c #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (pow.f64 a #s(literal 3 binary64))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a) (/.f64 #s(literal 1/4 binary64) c))) a)","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* a (pow c 3)))) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) c) (/.f64 (fma.f64 (/.f64 #s(literal -1/64 binary64) a) (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) (*.f64 (*.f64 (/.f64 b c) (/.f64 b c)) #s(literal -1/16 binary64))) a))) a)","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* a (pow c 4)))) (* -1/64 (/ (pow b 4) (pow c 3)))) a)) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) c) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/256 binary64) (pow.f64 c #s(literal 4 binary64))) (/.f64 (pow.f64 b #s(literal 6 binary64)) a) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) #s(literal 1/64 binary64))) a) #s(literal -1 binary64) (*.f64 (*.f64 (/.f64 b c) (/.f64 b c)) #s(literal -1/16 binary64))) a))) a)","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/4 binary64) (neg.f64 (/.f64 #s(literal 1/2 binary64) a))) b (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (neg.f64 (/.f64 #s(literal 1/2 binary64) a))) b (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64)))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) #s(literal 1/2 binary64) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(/ (+ c (* -1 (/ (pow b 2) a))) b)","(/.f64 (-.f64 c (/.f64 (*.f64 b b) a)) b)","(/ (+ (* -1/2 (/ (pow b 2) c)) (* 1/2 a)) b)","(/.f64 (fma.f64 (/.f64 (*.f64 b b) c) #s(literal -1/2 binary64) (*.f64 #s(literal 1/2 binary64) a)) b)","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/2 binary64)) b (/.f64 (/.f64 #s(literal 1 binary64) c) #s(literal -4 binary64))) b (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 c c) a) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/2 binary64))) b (/.f64 (/.f64 #s(literal 1 binary64) c) #s(literal -4 binary64))) b (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(/ (+ (* -1/2 (/ (pow b 2) c)) (* 1/2 a)) (pow b 2))","(/.f64 (fma.f64 (/.f64 (*.f64 b b) c) #s(literal -1/2 binary64) (*.f64 #s(literal 1/2 binary64) a)) (*.f64 b b))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (*.f64 c a))) (*.f64 (*.f64 b b) (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 #s(literal -1/4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1/4 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) #s(literal -1/32 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (*.f64 c a))) (fma.f64 (*.f64 b b) (/.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 #s(literal -1/4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (*.f64 (*.f64 #s(literal -1/4 binary64) c) a)) #s(literal 1/32 binary64) (/.f64 #s(literal 1/256 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1/4 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 #s(literal -1/4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1/4 binary64))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) #s(literal -1/32 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))))","(- (* -1/16 (/ (pow b 2) (* (pow a 2) (pow c 2)))) (* 1/4 (/ 1 (* a c))))","(-.f64 (*.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 a a)) (*.f64 (/.f64 b c) (/.f64 b c))) (/.f64 #s(literal 1/4 binary64) (*.f64 c a)))","(- (* (pow b 2) (- (* -1/64 (/ (pow b 2) (* (pow a 3) (pow c 3)))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(fma.f64 (-.f64 (/.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 b b)) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 a a) (*.f64 c c)))) (*.f64 b b) (neg.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 c a))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/256 (/ (pow b 2) (* (pow a 4) (pow c 4)))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(fma.f64 (-.f64 (*.f64 (-.f64 (/.f64 (*.f64 #s(literal -1/256 binary64) (*.f64 b b)) (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64)))) (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) (*.f64 b b)) (/.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 a a) (*.f64 c c)))) (*.f64 b b) (neg.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 c a))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (+.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) a)) #s(literal -1/4 binary64)))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 (*.f64 a a) b) (*.f64 c a))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 (*.f64 a a) b) (*.f64 c a)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 (*.f64 a a) b) (*.f64 c a)) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))))) b b)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(*.f64 (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/2 binary64) c)) b)","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(*.f64 (neg.f64 (+.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 a (*.f64 b b)) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) c)))) b)","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(*.f64 (neg.f64 (+.f64 (/.f64 (fma.f64 (neg.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/2 binary64)) c)) a (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (*.f64 c c)) (/.f64 #s(literal 20 binary64) a)) #s(literal -1/8 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 c c)))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (neg.f64 (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 a b) (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 4 binary64)))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) c)))))) b)","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/.f64 (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)))) #s(literal 1 binary64)) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(/.f64 (+.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) c) (*.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)))) #s(literal 1 binary64)) b)","(/ (+ 1 (* 4 (/ (* a c) (pow b 2)))) (pow b 2))","(/.f64 (fma.f64 (/.f64 #s(literal 4 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)) (*.f64 b b))","(/ (- (+ 1 (* 16 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -4 (/ (* a c) (pow b 2)))) (pow b 2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64))) #s(literal 16 binary64) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -4 binary64) b) (*.f64 a (/.f64 c b)))) (*.f64 b b))","(/ (- (+ 1 (* 64 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -16 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -4 (/ (* a c) (pow b 2))))) (pow b 2))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 64 binary64) #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal -4 binary64) b) (*.f64 a (/.f64 c b)) (/.f64 (*.f64 (*.f64 #s(literal -16 binary64) (*.f64 a a)) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 b b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -2 binary64) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b)))))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (+.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))))) #s(literal 2 binary64)))","(* -1 b)","(neg.f64 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(neg.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))))) b b))","(* -1 (* b (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(*.f64 (neg.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) c))) b)","(* -1/2 (/ a b))","(*.f64 (/.f64 a b) #s(literal -1/2 binary64))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 c b) a))) b)","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) a (fma.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) b) (/.f64 c b))))) b)","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(/.f64 (neg.f64 (-.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) #s(literal -5/2 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (neg.f64 (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 a a) c) b))))) b)","(/ -1 b)","(/.f64 #s(literal -1 binary64) b)","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) b)","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(/.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)))) #s(literal -1 binary64) #s(literal -1 binary64)) b)","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) c) (*.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)))) #s(literal -1 binary64) #s(literal -1 binary64)) b)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal -2 binary64) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (neg.f64 (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) c) a) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (neg.f64 (/.f64 #s(literal 1 binary64) b))) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b #s(literal 5 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b)) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b #s(literal 5 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/.f64 (fma.f64 #s(literal -1/2 binary64) b (*.f64 (*.f64 a (/.f64 c b)) #s(literal 1/2 binary64))) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64))) c (*.f64 (/.f64 a b) #s(literal 1/2 binary64))) c (*.f64 #s(literal -1/2 binary64) b)) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (/.f64 (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 b b)) (fma.f64 (*.f64 b (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) a)) #s(literal -1/8 binary64) (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))))) (neg.f64 c) (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 1/2 binary64))) c (*.f64 #s(literal -1/2 binary64) b)) c)","(/ (- (* 1/2 (/ (* a c) (pow b 2))) 1/2) c)","(/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal -1/2 binary64)) c)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 (*.f64 b c) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64))) #s(literal -1/2 binary64) (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (/.f64 #s(literal 1 binary64) b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (fma.f64 (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) a) b) (/.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 8 binary64)))) c (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)))) c (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (/.f64 #s(literal 1 binary64) b))","(+ (* c (- (* 16 (/ (* (pow a 2) c) (pow b 6))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 6 binary64)))) #s(literal 16 binary64) (*.f64 (/.f64 a (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) c (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(+ (* c (- (* c (- (* 64 (/ (* (pow a 3) c) (pow b 8))) (* -16 (/ (pow a 2) (pow b 6))))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b #s(literal 8 binary64)))) #s(literal 64 binary64) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal 16 binary64))) c (*.f64 (/.f64 a (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) c (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 b c) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 b c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/16 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -1 (/ b (* a c))) (/ 1 b)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 (/.f64 b a) c)) c)","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/.f64 (+.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/.f64 (+.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) c) (/.f64 #s(literal -1/2 binary64) c))) (/.f64 b #s(literal -4 binary64))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(/.f64 (-.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (fma.f64 (*.f64 b (/.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 c c)) (*.f64 (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64)) a)) #s(literal 1/2 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 #s(literal -1 binary64) (fma.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64)) (/.f64 b #s(literal -4 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) #s(literal 1/2 binary64)))) c)","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 7 binary64))))) (/.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 c (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 a #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))))))","(/ (- (* -1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 b b) c)) (/.f64 #s(literal 1/4 binary64) a)) c)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a)))) c)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/64 binary64) (*.f64 c c)) (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 a #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 b b) c))) (/.f64 #s(literal 1/4 binary64) a)) c)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 4) (pow c 3)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))))) c)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/256 binary64) (pow.f64 c #s(literal 3 binary64))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 (*.f64 #s(literal -1/64 binary64) (pow.f64 b #s(literal 4 binary64))) (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 c c)))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 b b) c) (/.f64 #s(literal 1/4 binary64) a))) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 b c) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (/.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) c)) c)) (neg.f64 c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64)) (/.f64 (neg.f64 (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) c) b)) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/512 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))))) (neg.f64 c))","(* -1 (* c (- (/ b (* a c)) (/ 1 b))))","(*.f64 (-.f64 (/.f64 (/.f64 b a) c) (/.f64 #s(literal 1 binary64) b)) (neg.f64 c))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (neg.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/4 binary64) b))) c)","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))) #s(literal 1/2 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 b c) #s(literal -1/4 binary64))) c))) c)","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) c) a) #s(literal 1/32 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/16 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))))) c) #s(literal -1 binary64) (*.f64 (*.f64 b c) #s(literal -1/4 binary64)))) c))) c)","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(-.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 5 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 c (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 a #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) (pow.f64 c #s(literal 3 binary64))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c))","(/.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 b b) c) (/.f64 #s(literal 1/4 binary64) a))) c)","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) c))) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/64 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 b #s(literal 4 binary64)) c) (*.f64 (*.f64 (/.f64 b a) (/.f64 b a)) #s(literal -1/16 binary64))) c))) c)","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* (pow a 4) c))) (* -1/64 (/ (pow b 4) (pow a 3)))) c)) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/256 binary64) (pow.f64 a #s(literal 4 binary64))) (/.f64 (pow.f64 b #s(literal 6 binary64)) c) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 a #s(literal 3 binary64))) #s(literal 1/64 binary64))) c) #s(literal -1 binary64) (*.f64 (*.f64 (/.f64 b a) (/.f64 b a)) #s(literal -1/16 binary64))) c))) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":282.2119140625,"type":"simplify"},{"count":[[23,878]],"egraph":[[0,8381,281,0.082163797],[2,2844,281,0.039675897],[1,377,284,0.009011702],[0,89,300,0.00241238],[0,61,317,0.00043592]],"inputs":[["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))","(/.f64 c b)","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a))","(*.f64 #s(literal 0 binary64) a)","(-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c))","(*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)","(*.f64 a (/.f64 #s(literal -2 binary64) b))","(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","#s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))","(fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(*.f64 a a)","(/.f64 a (*.f64 b b))"]],"memory":[[-6089456,60163552]],"outputs":[["(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal -1 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 b #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a)))","(/.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(neg.f64 (/.f64 #s(literal -1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(-.f64 (/.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) a) (/.f64 (/.f64 b #s(literal 2 binary64)) a))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 2 binary64)) (/.f64 (/.f64 b a) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 a))","(/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1/2 binary64) a)","(neg.f64 (/.f64 #s(literal -1/2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b)))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 b b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64) (neg.f64 b))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(-.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(+.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b)))))","(/.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -4 binary64) c) a))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))) (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) c)","(*.f64 (neg.f64 c) (pow.f64 (neg.f64 b) #s(literal -1 binary64)))","(*.f64 c (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 c b))","(pow.f64 (/.f64 (/.f64 b c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b c) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 c #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (/.f64 c #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 c #s(literal 1 binary64)) b)","(/.f64 (neg.f64 c) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b c) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b c)))","(/.f64 c b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b c))","(neg.f64 (/.f64 (neg.f64 c) b))","(neg.f64 (/.f64 c (neg.f64 b)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b)) (/.f64 c (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (*.f64 (*.f64 b a) a)) (/.f64 (pow.f64 a #s(literal -2 binary64)) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (*.f64 (*.f64 b a) b)) (/.f64 (pow.f64 a #s(literal -2 binary64)) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (*.f64 a a)) (/.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 b b)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (*.f64 b a)) (/.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 b a)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 a a)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) b) (/.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 a (*.f64 b a))))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) b) (/.f64 (pow.f64 a #s(literal -2 binary64)) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (neg.f64 a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 b a)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (*.f64 a a)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a) (/.f64 (pow.f64 a #s(literal -2 binary64)) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a) (/.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a) (/.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (neg.f64 a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (*.f64 a a)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) a) (/.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 b (*.f64 b a))))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) a) (/.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) a) (/.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (neg.f64 a) a) (/.f64 b (neg.f64 a)))","(*.f64 (/.f64 (neg.f64 a) a) (/.f64 b a))","(*.f64 (/.f64 b (neg.f64 a)) (/.f64 (neg.f64 a) a))","(*.f64 (/.f64 b (neg.f64 a)) (/.f64 a a))","(*.f64 (/.f64 (neg.f64 b) a) (/.f64 a (neg.f64 a)))","(*.f64 (/.f64 (neg.f64 b) a) (/.f64 a a))","(*.f64 (/.f64 a (neg.f64 a)) (/.f64 (neg.f64 b) a))","(*.f64 (/.f64 a (neg.f64 a)) (/.f64 b a))","(*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 a) (*.f64 a a)))","(*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 a (*.f64 a a)))","(*.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 b) (*.f64 a a)))","(*.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 b (*.f64 a a)))","(*.f64 (pow.f64 (/.f64 (*.f64 a a) (pow.f64 (*.f64 b a) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 a a) (pow.f64 (*.f64 b a) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (*.f64 b a) a))","(*.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 a (*.f64 a a)))","(*.f64 (/.f64 a a) (/.f64 b (neg.f64 a)))","(*.f64 (/.f64 a a) (/.f64 (neg.f64 b) a))","(*.f64 (/.f64 a a) (/.f64 b a))","(*.f64 (/.f64 b a) (/.f64 (neg.f64 a) a))","(*.f64 (/.f64 b a) (/.f64 a (neg.f64 a)))","(*.f64 (/.f64 b a) (/.f64 a a))","(*.f64 (/.f64 (*.f64 b a) a) (/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 b a) a) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 b a))","(*.f64 (*.f64 b a) (pow.f64 (*.f64 (neg.f64 a) a) #s(literal -1 binary64)))","(*.f64 (*.f64 b a) (pow.f64 a #s(literal -2 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (*.f64 b a) a))","(*.f64 b (/.f64 a (*.f64 a a)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 a a) (/.f64 b a)))","(*.f64 a (/.f64 b (*.f64 a a)))","(pow.f64 (/.f64 a (/.f64 (*.f64 b a) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 a a) (/.f64 a b)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a a) (/.f64 a b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (*.f64 b a))","(/.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (pow.f64 a #s(literal -2 binary64)))) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))","(/.f64 (neg.f64 (*.f64 (*.f64 b a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) a))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 2 binary64)))) (*.f64 (/.f64 a a) (/.f64 b a)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (pow.f64 a #s(literal -6 binary64))))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 a a) (/.f64 b a)))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 b a) a))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (*.f64 (*.f64 b a) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 a a)) (*.f64 (*.f64 a a) (*.f64 b a)))) (neg.f64 (pow.f64 a #s(literal 4 binary64))))","(/.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) (*.f64 b a))","(/.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))","(/.f64 (*.f64 (*.f64 b a) #s(literal 1 binary64)) (*.f64 a a))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 2 binary64))) (*.f64 (/.f64 a a) (/.f64 b a)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (pow.f64 a #s(literal -6 binary64)))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 a a) (/.f64 b a))))))","(/.f64 (neg.f64 (/.f64 (*.f64 b a) a)) (neg.f64 a))","(/.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 b a) (*.f64 a a)))","(/.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (*.f64 b a) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 a a)) (*.f64 (*.f64 a a) (*.f64 b a))) (pow.f64 a #s(literal 4 binary64)))","(/.f64 (/.f64 (*.f64 b a) a) a)","(/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (neg.f64 (*.f64 (*.f64 a a) (*.f64 b a))))","(/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (*.f64 a a) (*.f64 b a)))","(/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (neg.f64 (pow.f64 (*.f64 a (*.f64 b a)) #s(literal 2 binary64))))","(/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (pow.f64 (*.f64 a (*.f64 b a)) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (/.f64 (*.f64 b a) a))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 a a) (/.f64 a b)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a a) (/.f64 a b))))","(/.f64 (*.f64 b a) (neg.f64 (neg.f64 (*.f64 (neg.f64 a) a))))","(/.f64 (*.f64 b a) (neg.f64 (*.f64 (neg.f64 a) a)))","(/.f64 (*.f64 b a) (*.f64 (neg.f64 a) a))","(/.f64 (*.f64 b a) (*.f64 a a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 a a) (/.f64 a b)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (/.f64 (*.f64 b a) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 a a) (/.f64 a b)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a a) (/.f64 a b)))","(neg.f64 (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (/.f64 a a) (/.f64 b a))) (/.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 (/.f64 a a) (/.f64 b a))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 a a) (/.f64 b a)))))) (/.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (pow.f64 a #s(literal -6 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 a a) (/.f64 b a)))))))","(-.f64 (/.f64 (*.f64 #s(literal 0 binary64) (*.f64 a a)) (pow.f64 a #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 a a) (*.f64 b a)) (pow.f64 a #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 a a) (*.f64 b a))) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 a (*.f64 b a)) #s(literal 2 binary64))) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (*.f64 b a)) (neg.f64 (*.f64 (neg.f64 a) a))) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b a) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 a) a))) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (neg.f64 a) a))) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (*.f64 b a)) (*.f64 a a)) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b a) #s(literal 2 binary64))) (*.f64 a a)) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (*.f64 b a)) (*.f64 (neg.f64 a) a)) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b a) #s(literal 2 binary64))) (*.f64 (neg.f64 a) a)) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 #s(literal 0 binary64) (*.f64 (/.f64 a a) (/.f64 b a)))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 a a) (/.f64 a b))) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 a a) (/.f64 b a)))","#s(literal 0 binary64)","(*.f64 (/.f64 (*.f64 (*.f64 b a) a) #s(literal -1 binary64)) (/.f64 b (*.f64 b a)))","(*.f64 (/.f64 (*.f64 (*.f64 b a) a) b) (/.f64 b a))","(*.f64 (/.f64 (*.f64 (*.f64 b a) a) a) (/.f64 b b))","(*.f64 (/.f64 (*.f64 (*.f64 b a) b) #s(literal -1 binary64)) (/.f64 a (*.f64 b a)))","(*.f64 (/.f64 (*.f64 (*.f64 b a) b) b) (/.f64 a a))","(*.f64 (/.f64 (*.f64 (*.f64 b a) b) a) (/.f64 a b))","(*.f64 (/.f64 (*.f64 a a) #s(literal -1 binary64)) (/.f64 (*.f64 b b) (*.f64 b a)))","(*.f64 (/.f64 (*.f64 b a) #s(literal -1 binary64)) (/.f64 (*.f64 b a) (*.f64 b a)))","(*.f64 (/.f64 (*.f64 b b) #s(literal -1 binary64)) (*.f64 (/.f64 a a) (/.f64 a b)))","(*.f64 (/.f64 (*.f64 a a) a) (/.f64 (*.f64 b b) b))","(*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 b b) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 (*.f64 b a) a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 (*.f64 b a) b)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b a)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 a a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b b)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b b)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 a a)))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) b) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 a (*.f64 b a))))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) a) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b (*.f64 b a))))","(*.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (*.f64 b a) a)) (/.f64 (pow.f64 b #s(literal 3 binary64)) b))","(*.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (*.f64 b a) b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (*.f64 b a) a)) (/.f64 (*.f64 b a) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (*.f64 b a) b)) (/.f64 (*.f64 b a) a))","(*.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) b) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a (*.f64 b a))))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 b a) a)) (/.f64 (pow.f64 a #s(literal 3 binary64)) b))","(*.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) a) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b (*.f64 b a))))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 b a) b)) (/.f64 (pow.f64 a #s(literal 3 binary64)) a))","(*.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a a)))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a a)) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b b)))","(*.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b a)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b a)))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b a)) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b a)))","(*.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 a a)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b)))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 a a)))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) b) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 a (*.f64 b a))))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) a) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b (*.f64 b a))))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) b) (/.f64 (*.f64 b a) (*.f64 a (*.f64 b a))))","(*.f64 (/.f64 (*.f64 b a) (*.f64 (*.f64 b a) a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) b))","(*.f64 (/.f64 (*.f64 b a) (*.f64 (*.f64 b a) b)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b b)) (*.f64 (/.f64 a a) (/.f64 b a)))","(*.f64 (/.f64 (*.f64 b a) (*.f64 b a)) (*.f64 b a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 a a)) (/.f64 (*.f64 b a) (*.f64 b b)))","(*.f64 (/.f64 (*.f64 b a) (*.f64 b b)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 a a)))","(*.f64 (/.f64 (*.f64 b a) b) (/.f64 (*.f64 b a) a))","(*.f64 (/.f64 b b) (/.f64 (*.f64 a (*.f64 b a)) a))","(*.f64 (/.f64 (*.f64 b b) b) (/.f64 (*.f64 a a) a))","(*.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a) (/.f64 (*.f64 b a) (*.f64 b (*.f64 b a))))","(*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 (*.f64 a (*.f64 b a)) (*.f64 b a)))","(*.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 (*.f64 b (*.f64 b a)) (*.f64 b a)))","(*.f64 (/.f64 a a) (/.f64 (*.f64 b (*.f64 b a)) b))","(*.f64 (/.f64 b a) (/.f64 (*.f64 a (*.f64 b a)) b))","(*.f64 (/.f64 (*.f64 b a) a) (/.f64 (*.f64 b a) b))","(*.f64 (/.f64 (*.f64 b a) a) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b (*.f64 b a))))","(*.f64 (/.f64 a b) (/.f64 (*.f64 b (*.f64 b a)) a))","(*.f64 (/.f64 (*.f64 b b) a) (/.f64 (*.f64 a a) b))","(*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))","(*.f64 (*.f64 (/.f64 a a) (/.f64 b a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b b)))","(*.f64 (neg.f64 a) b)","(*.f64 #s(literal -1 binary64) (*.f64 b a))","(*.f64 (*.f64 b a) (/.f64 (*.f64 b a) (*.f64 b a)))","(*.f64 (neg.f64 b) a)","(*.f64 b (neg.f64 a))","(*.f64 b a)","(*.f64 a (neg.f64 b))","(*.f64 a b)","(pow.f64 (/.f64 (*.f64 b a) (pow.f64 (*.f64 b a) #s(literal 2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (pow.f64 (*.f64 b a) #s(literal 3 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 b a) #s(literal 1 binary64))","(/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b a))","(/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (neg.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) #s(literal 0 binary64)))))","(/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b a) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (pow.f64 (*.f64 b a) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b a) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (pow.f64 (*.f64 b a) #s(literal 3 binary64))))","(neg.f64 (*.f64 b a))","(fma.f64 (/.f64 (*.f64 (*.f64 b a) a) #s(literal -1 binary64)) (/.f64 b (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 b a) a) b) (/.f64 b a) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 b a) a) a) (/.f64 b b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 b a) b) #s(literal -1 binary64)) (/.f64 a (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 b a) b) b) (/.f64 a a) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 b a) b) a) (/.f64 a b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 a a) #s(literal -1 binary64)) (/.f64 (*.f64 b b) (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b a) #s(literal -1 binary64)) (/.f64 (*.f64 b a) (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b b) #s(literal -1 binary64)) (*.f64 (/.f64 a a) (/.f64 a b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 a a) a) (/.f64 (*.f64 b b) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 b b) a) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 (*.f64 b a) a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 (*.f64 b a) b)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) a) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 a a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b b)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 a a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) b) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 a (*.f64 b a))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) a) (/.f64 (pow.f64 (*.f64 b a) #s(literal 3/2 binary64)) (*.f64 b (*.f64 b a))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (*.f64 b a) a)) (/.f64 (pow.f64 b #s(literal 3 binary64)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 (*.f64 b a) b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) a) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (*.f64 b a) a)) (/.f64 (*.f64 b a) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (*.f64 b a) b)) (/.f64 (*.f64 b a) a) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) b) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a (*.f64 b a))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 b a) a)) (/.f64 (pow.f64 a #s(literal 3 binary64)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) a) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b (*.f64 b a))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 b a) b)) (/.f64 (pow.f64 a #s(literal 3 binary64)) a) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a a)) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b a)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b a)) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 a a)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 a a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) b) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 a (*.f64 b a))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) a) (/.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b (*.f64 b a))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) b) (/.f64 (*.f64 b a) (*.f64 a (*.f64 b a))) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b a) (*.f64 (*.f64 b a) a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b a) (*.f64 (*.f64 b a) b)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b b)) (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b a) (*.f64 b a)) (*.f64 b a) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 a a)) (/.f64 (*.f64 b a) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b a) (*.f64 b b)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 a a)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b a) b) (/.f64 (*.f64 b a) a) #s(literal 0 binary64))","(fma.f64 (/.f64 b b) (/.f64 (*.f64 a (*.f64 b a)) a) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b b) b) (/.f64 (*.f64 a a) a) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a) (/.f64 (*.f64 b a) (*.f64 b (*.f64 b a))) #s(literal 0 binary64))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 (*.f64 a (*.f64 b a)) (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 (*.f64 b (*.f64 b a)) (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (/.f64 a a) (/.f64 (*.f64 b (*.f64 b a)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 b a) (/.f64 (*.f64 a (*.f64 b a)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b a) a) (/.f64 (*.f64 b a) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b a) a) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b (*.f64 b a))) #s(literal 0 binary64))","(fma.f64 (/.f64 a b) (/.f64 (*.f64 b (*.f64 b a)) a) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b b) a) (/.f64 (*.f64 a a) b) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 b a) #s(literal 3 binary64)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (/.f64 a a) (/.f64 b a)) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (neg.f64 a) b #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 b a) #s(literal 0 binary64))","(fma.f64 (*.f64 b a) (/.f64 (*.f64 b a) (*.f64 b a)) #s(literal 0 binary64))","(fma.f64 (neg.f64 b) a #s(literal 0 binary64))","(fma.f64 b (neg.f64 a) #s(literal 0 binary64))","(fma.f64 b a #s(literal 0 binary64))","(fma.f64 a (neg.f64 b) #s(literal 0 binary64))","(fma.f64 a b #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b a)) (*.f64 b a))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b a) #s(literal 2 binary64))) (*.f64 b a))","(-.f64 #s(literal 0 binary64) (*.f64 b a))","(+.f64 (*.f64 b a) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 b a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (/.f64 a a) (/.f64 b a)))","(*.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) a) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) #s(literal -2 binary64)))","(*.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) (neg.f64 a)))","(*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) a))","(pow.f64 (*.f64 (/.f64 a #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) a) #s(literal 2 binary64))","(/.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) #s(literal 1/2 binary64)) a)","(/.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))))","(neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) a)))","(neg.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)) (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)))) #s(literal -1 binary64)))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c))","(*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) c) a)","(*.f64 (*.f64 (/.f64 #s(literal -2 binary64) b) a) c)","(*.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 c a))","(*.f64 (*.f64 c a) (/.f64 #s(literal -2 binary64) b))","(*.f64 c (*.f64 (/.f64 #s(literal -2 binary64) b) a))","(*.f64 a (*.f64 (/.f64 #s(literal -2 binary64) b) c))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 c (*.f64 #s(literal -2 binary64) a))) (neg.f64 b))","(/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) b)","(/.f64 (*.f64 c (*.f64 #s(literal -2 binary64) a)) b)","(*.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) b))","(*.f64 (/.f64 #s(literal 2 binary64) b) (/.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 a #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) b) a)","(*.f64 #s(literal -2 binary64) (*.f64 (pow.f64 b #s(literal -1 binary64)) a))","(*.f64 #s(literal -2 binary64) (/.f64 a b))","(*.f64 a (/.f64 #s(literal -2 binary64) b))","(pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) a)) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 b #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a)) (neg.f64 b))","(/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 #s(literal -2 binary64) a) b)","(/.f64 (neg.f64 a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a))))","(/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(/.f64 a (*.f64 b #s(literal -1/2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 (*.f64 #s(literal 2 binary64) a) b))","(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","(*.f64 b (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64))) b)) (neg.f64 (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64))) b)) (neg.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64))))))","(/.f64 (neg.f64 (*.f64 b (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c))))","(/.f64 (neg.f64 (*.f64 b (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64))) b) (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c)))","(/.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64))) b) (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64)))))","(/.f64 (*.f64 b (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)))) (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c)))","(/.f64 (*.f64 b (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64)))))","(fma.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) b (*.f64 (/.f64 #s(literal -1/2 binary64) c) b))","(fma.f64 (/.f64 #s(literal -1/2 binary64) c) b (*.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) b))","(fma.f64 b (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 b (/.f64 #s(literal -1/2 binary64) c)))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) c) (*.f64 b (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) b) (*.f64 (/.f64 #s(literal -1/2 binary64) c) b))","(+.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) c) b) (*.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) b))","(+.f64 (*.f64 b (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))) (*.f64 b (/.f64 #s(literal -1/2 binary64) c)))","(+.f64 (*.f64 b (/.f64 #s(literal -1/2 binary64) c)) (*.f64 b (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))))","(*.f64 (pow.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))))","(*.f64 #s(literal 1/2 binary64) (pow.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal 2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal 2 binary64))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (neg.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","(neg.f64 (/.f64 #s(literal -1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)) #s(literal 2 binary64))) #s(literal -1 binary64)))","#s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c)) (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64)))) (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 a #s(literal 1/2 binary64)) c (*.f64 (*.f64 b b) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (*.f64 b b) c)))","(/.f64 (neg.f64 (fma.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 c #s(literal -2 binary64)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 b b) (*.f64 c #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 a #s(literal 1/2 binary64)) (neg.f64 c) (*.f64 (*.f64 b b) #s(literal 1/2 binary64)))) (neg.f64 (*.f64 (*.f64 b b) (neg.f64 c))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 b b) (*.f64 c (*.f64 a #s(literal 1/2 binary64))))) (neg.f64 (*.f64 c (*.f64 b b))))","(/.f64 (neg.f64 (fma.f64 b b (*.f64 (*.f64 c #s(literal -2 binary64)) (*.f64 a #s(literal 1/2 binary64))))) (neg.f64 (*.f64 (*.f64 c #s(literal -2 binary64)) (*.f64 b b))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 b b) (*.f64 (neg.f64 c) (*.f64 a #s(literal 1/2 binary64))))) (neg.f64 (*.f64 (neg.f64 c) (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 c #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64))))))","(/.f64 (fma.f64 (*.f64 a #s(literal 1/2 binary64)) c (*.f64 (*.f64 b b) #s(literal -1/2 binary64))) (*.f64 (*.f64 b b) c))","(/.f64 (fma.f64 (*.f64 a #s(literal 1/2 binary64)) (*.f64 c #s(literal -2 binary64)) (*.f64 b b)) (*.f64 (*.f64 b b) (*.f64 c #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 a #s(literal 1/2 binary64)) (neg.f64 c) (*.f64 (*.f64 b b) #s(literal 1/2 binary64))) (*.f64 (*.f64 b b) (neg.f64 c)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 b b) (*.f64 c (*.f64 a #s(literal 1/2 binary64)))) (*.f64 c (*.f64 b b)))","(/.f64 (fma.f64 b b (*.f64 (*.f64 c #s(literal -2 binary64)) (*.f64 a #s(literal 1/2 binary64)))) (*.f64 (*.f64 c #s(literal -2 binary64)) (*.f64 b b)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 b b) (*.f64 (neg.f64 c) (*.f64 a #s(literal 1/2 binary64)))) (*.f64 (neg.f64 c) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64))) (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64))) (fma.f64 (pow.f64 c #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64))) (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c)) (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64)))) (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c)) (-.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 a (*.f64 b b)) c) #s(literal -1/4 binary64)))) (fma.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal -6 binary64)) (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (neg.f64 a) b) (/.f64 #s(literal 1/2 binary64) (neg.f64 b)) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 a (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) b) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 a (*.f64 #s(literal 1 binary64) b)) (/.f64 #s(literal 1/2 binary64) b) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (/.f64 a b) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1 binary64) b)) (/.f64 a b) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (neg.f64 b)) (/.f64 (neg.f64 a) b) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (neg.f64 b)) (/.f64 a (neg.f64 b)) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 a (neg.f64 b)) (/.f64 #s(literal 1/2 binary64) (neg.f64 b)) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 b) b)) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 b b)) a (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 a b) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 a b) (/.f64 #s(literal 1/2 binary64) b) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (*.f64 a #s(literal 1/2 binary64)) (pow.f64 b #s(literal -2 binary64)) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1/2 binary64) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 a (*.f64 (neg.f64 b) b)) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 c #s(literal -1 binary64)) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)))","(fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)))","(fma.f64 a (/.f64 #s(literal 1/2 binary64) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 a (*.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 (neg.f64 c) #s(literal -1 binary64)) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 a (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) c))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c))) (/.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) c) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c))))","(+.f64 (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/2 binary64) c))","(+.f64 (/.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b)))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(fabs.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)))","(*.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) c) a) b) b))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(neg.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)))","(sqrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))))","(exp.f64 (neg.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (neg.f64 a) (neg.f64 a))","(*.f64 (*.f64 a a) #s(literal 1 binary64))","(*.f64 a a)","(pow.f64 (neg.f64 a) #s(literal 2 binary64))","(pow.f64 (*.f64 a a) #s(literal 1 binary64))","(pow.f64 a #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 a) #s(literal 2 binary64)))","(*.f64 (/.f64 a (*.f64 (neg.f64 b) #s(literal -1 binary64))) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 a (*.f64 #s(literal 1 binary64) b)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 a (neg.f64 b)))","(*.f64 (/.f64 a (neg.f64 b)) (pow.f64 (neg.f64 b) #s(literal -1 binary64)))","(*.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 b b)))","(*.f64 (/.f64 a b) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -2 binary64)) a)","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 a b))","(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (*.f64 b b)))","(*.f64 (/.f64 a (*.f64 b b)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 a (*.f64 b b)))","(*.f64 a (pow.f64 b #s(literal -2 binary64)))","(pow.f64 (/.f64 b (/.f64 a b)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 b b) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b b) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (/.f64 a b))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 a))) (*.f64 (neg.f64 b) b))","(/.f64 (neg.f64 (/.f64 a b)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 a)) (*.f64 b b))","(/.f64 (/.f64 a b) b)","(/.f64 (neg.f64 a) (*.f64 (neg.f64 b) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (/.f64 a b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 b b) a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b b) a)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 b b) a))))","(/.f64 #s(literal 1 binary64) (/.f64 b (/.f64 a b)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 b b) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) a))","(/.f64 a (*.f64 b b))","(neg.f64 (/.f64 a (*.f64 (neg.f64 b) b)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 b) b)) (/.f64 a (*.f64 (neg.f64 b) b)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 b b) a)) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":315.970947265625,"type":"rewrite"},{"compiler":[[37766,4547]],"memory":[[4800480,100571744]],"time":205.52197265625,"type":"eval"},{"alts":[["(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","fresh",27.095488631053676,"binary64"],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","fresh",47.96838039627345,"binary64"],["(/.f64 (-.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))) (*.f64 #s(literal 2 binary64) a))","fresh",43.75135019393438,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","fresh",25.314013760899215,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","done",28.34896439655665,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) #s(approx (* (+ (* -4 a) (* (/ b c) b)) c) (*.f64 (*.f64 #s(literal -4 binary64) c) a)))) b) (*.f64 #s(literal 2 binary64) a))","fresh",40.13608739909212,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","done",49.46098481757248,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","done",25.167263342386594,"binary64"],["(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","done",25.17807772118479,"binary64"],["(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) #s(approx (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 c a)) (/.f64 #s(literal 1/2 binary64) (*.f64 b b))) b))))","fresh",49.56569779453854,"binary64"],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))))","fresh",46.15224805900606,"binary64"],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (/.f64 #s(literal -1/2 binary64) c)) b)))","fresh",46.43283033951922,"binary64"],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))) b)))","fresh",62.473582302156544,"binary64"],["(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) #s(approx (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (*.f64 (/.f64 a b) #s(literal 1/2 binary64)))))","fresh",62.33407162473293,"binary64"],["(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","fresh",28.442398369353377,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (/ 1 (+ (* (* c -4) a) (* b b))) (/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a)) (/.f64 #s(literal 1/4 binary64) c)) a)))) b))","fresh",48.01863608352485,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (/ 1 (+ (* (* c -4) a) (* b b))) (/.f64 #s(literal -1/4 binary64) (*.f64 c a))))) b))","fresh",40.63014906702801,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","done",25.20794708261815,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","fresh",48.00131290285018,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 b (/.f64 #s(literal -1 binary64) a) (/.f64 c b)))","fresh",40.411965251943606,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c)) b))","fresh",49.89028425605331,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 b a) a) a))","fresh",62.49261646234085,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (neg.f64 (*.f64 b b)) b) a))","fresh",45.91849113042095,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 b (neg.f64 (*.f64 b b)))) a))","fresh",45.95659615974156,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 (*.f64 b b)) (pow.f64 b #s(literal -1 binary64))) a))","fresh",45.946498649957775,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 b) a) (*.f64 a a)))","fresh",48.36287093677796,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b a) (*.f64 a a)))","fresh",62.44923456280922,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","done",46.063276334512786,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","done",40.31015039783014,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","fresh",46.412635319982336,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","fresh",40.38436914782668,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",40.33384025576077,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) c) #s(literal -1 binary64))))","fresh",46.13034635404967,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 a (*.f64 a a))))","fresh",45.86744942462963,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 c (/.f64 #s(literal -1 binary64) b)))","fresh",46.114057584512786,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 a (*.f64 a a))))","fresh",60.70249870892008,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","fresh",46.30110899383636,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64))))","fresh",54.31540731882923,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 a a) (/.f64 a b))) #s(literal -1 binary64))))","fresh",61.53862620428459,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) #s(approx (- (/ 1 a) (/ c (* b b))) (/.f64 #s(literal 1 binary64) a))))","fresh",40.38827539783014,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 (-.f64 (*.f64 a (/.f64 c b)) b) a)))","fresh",40.365263987591874,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","done",56.283687333757754,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 #s(literal 1 binary64) (/.f64 b c))))","fresh",56.271970592662015,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c #s(literal -1 binary64)))))","fresh",56.283687333757754,"binary64"],["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64)))))","fresh",60.50392226308187,"binary64"]],"compiler":[[1796,345],[19,13],[27,16],[76,23],[15,12],[27,19],[34,24],[25,19],[15,12],[18,15],[33,23],[27,19],[34,24],[38,25],[36,24],[31,22],[38,28],[26,21],[15,12],[28,21],[26,19],[29,21],[25,18],[26,19],[28,21],[28,21],[26,19],[25,18],[22,17],[22,17],[23,18],[23,18],[25,18],[27,20],[27,20],[23,18],[25,18],[31,21],[26,21],[29,22],[33,23],[39,25],[33,22],[35,24],[37,25],[37,26]],"count":[[1107,45]],"kept":[{"done":[6,6],"fresh":[26,22],"new":[1070,15],"picked":[5,2]}],"memory":[[3480496,63525136]],"min-error":[[5.307136145294067,"binary64"]],"time":63.5400390625,"type":"prune"},{"accuracy":[8.445666309044105],"baseline":[25.167263342386594],"branch":[["a",23.051678879413785,3,"binary64"],["b",8.445666309044105,3,"binary64"],["c",25.16726334238658,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",13.037511932364403,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[65,3]],"inputs":[["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 c (/.f64 #s(literal -1 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) #s(approx (- (/ 1 a) (/ c (* b b))) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 a (*.f64 a a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b a) (*.f64 a a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 #s(literal 1 binary64) (/.f64 b c))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 b) a) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c #s(literal -1 binary64)))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 b a) a) a))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) #s(approx (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (*.f64 (/.f64 a b) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (/.f64 #s(literal -1/2 binary64) c)) b)))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (/.f64 b c) #s(literal -1/2 binary64))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 b (/.f64 #s(literal -1 binary64) a) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (neg.f64 (*.f64 b b)) b) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 (-.f64 (*.f64 a (/.f64 c b)) b) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 a (*.f64 a a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c)) b))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 b (*.f64 c a))) c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))) b)))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) #s(approx (* (+ (* -4 a) (* (/ b c) b)) c) (*.f64 (*.f64 #s(literal -4 binary64) c) a)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 b (neg.f64 (*.f64 b b)))) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (neg.f64 b)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (/ 1 (+ (* (* c -4) a) (* b b))) (/.f64 #s(literal -1/4 binary64) (*.f64 c a))))) b))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) #s(approx (/ -1 (- (sqrt (+ (* (* c -4) a) (* b b))) b)) (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 c a)) (/.f64 #s(literal 1/2 binary64) (*.f64 b b))) b))))","(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 #s(approx (sqrt (+ (* -4 (* c a)) (* b b))) (*.f64 (neg.f64 b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)))) b))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b))","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (+.f64 (neg.f64 b) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (/ 1 (+ (* (* c -4) a) (* b b))) (/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a)) (/.f64 #s(literal 1/4 binary64) c)) a)))) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 (*.f64 b b)) (pow.f64 b #s(literal -1 binary64))) a))","(/.f64 (-.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c)) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 (/.f64 b c) b)) c))) b))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64)))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) c) #s(literal -1 binary64))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 a a) (/.f64 a b))) #s(literal -1 binary64))))"]],"memory":[[-7206624,32816944]],"oracle":[64.0],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":76.781982421875,"times":[[15.992919921875,"a"],[17.487060546875,"b"],[21.502197265625,"c"],[16.839111328125,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"accuracy":[8.470725049275664],"baseline":[25.20794708261815],"branch":[["b",8.470725049275664,3,"binary64"]],"compiler":[[1,3]],"count":[[45,3]],"inputs":[["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 c (/.f64 #s(literal -1 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) #s(approx (- (/ 1 a) (/ c (* b b))) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 a (*.f64 a a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b a) (*.f64 a a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 #s(literal 1 binary64) (/.f64 b c))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 b) a) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c #s(literal -1 binary64)))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 b a) a) a))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) #s(approx (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (*.f64 (/.f64 a b) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (/.f64 #s(literal -1/2 binary64) c)) b)))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (/.f64 b c) #s(literal -1/2 binary64))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 b (/.f64 #s(literal -1 binary64) a) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (neg.f64 (*.f64 b b)) b) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 (-.f64 (*.f64 a (/.f64 c b)) b) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 a (*.f64 a a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c)) b))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 b (*.f64 c a))) c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))) b)))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) #s(approx (* (+ (* -4 a) (* (/ b c) b)) c) (*.f64 (*.f64 #s(literal -4 binary64) c) a)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 b (neg.f64 (*.f64 b b)))) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (neg.f64 b)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b)))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[535536,8078112]],"oracle":[63.65130622086298],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":17.858154296875,"times":[[14.1240234375,"b"]],"type":"regimes"},{"accuracy":[13.697198836216899],"baseline":[40.13608739909212],"branch":[["b",13.697198836216899,3,"binary64"]],"compiler":[[1,3]],"count":[[39,3]],"inputs":[["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 c (/.f64 #s(literal -1 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) #s(approx (- (/ 1 a) (/ c (* b b))) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 a (*.f64 a a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b a) (*.f64 a a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 #s(literal 1 binary64) (/.f64 b c))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 b) a) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c #s(literal -1 binary64)))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 b a) a) a))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) #s(approx (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (*.f64 (/.f64 a b) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (/.f64 #s(literal -1/2 binary64) c)) b)))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (/.f64 b c) #s(literal -1/2 binary64))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 b (/.f64 #s(literal -1 binary64) a) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (neg.f64 (*.f64 b b)) b) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 (-.f64 (*.f64 a (/.f64 c b)) b) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 a (*.f64 a a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c)) b))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 b (*.f64 c a))) c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))) b)))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) #s(approx (* (+ (* -4 a) (* (/ b c) b)) c) (*.f64 (*.f64 #s(literal -4 binary64) c) a)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 b (neg.f64 (*.f64 b b)))) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (neg.f64 b)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))))"]],"memory":[[-3618400,7533632]],"oracle":[63.63770728151705],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) #s(approx (* (+ (* -4 a) (* (/ b c) b)) c) (*.f64 (*.f64 #s(literal -4 binary64) c) a)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":12.97998046875,"times":[[10.128173828125,"b"]],"type":"regimes"},{"accuracy":[23.87372037129852],"baseline":[40.31015039783014],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",31.99052743043743,3,"binary64"],["b",23.87372037129852,2,"binary64"]],"compiler":[[17,14],[1,3]],"count":[[33,2]],"inputs":[["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 c (/.f64 #s(literal -1 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) #s(approx (- (/ 1 a) (/ c (* b b))) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 a (*.f64 a a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b a) (*.f64 a a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 #s(literal 1 binary64) (/.f64 b c))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 b) a) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c #s(literal -1 binary64)))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 b a) a) a))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) #s(approx (* (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) b) (*.f64 (/.f64 a b) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (/.f64 #s(literal -1/2 binary64) c)) b)))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 (/.f64 b c) #s(literal -1/2 binary64))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 b (/.f64 #s(literal -1 binary64) a) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (neg.f64 (*.f64 b b)) b) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 (-.f64 (*.f64 a (/.f64 c b)) b) a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 a (*.f64 a a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c)) b))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 b (*.f64 c a))) c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (/ 1 (sqrt (/ 1 (+ (* (* c -4) a) (* b b))))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(literal 1/2 binary64) #s(approx (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (*.f64 #s(approx (+ (* (/ a (* b b)) 1/2) (/ -1/2 c)) (*.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64))) b)))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 a (/.f64 #s(literal -2 binary64) b)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[2584800,10699488]],"oracle":[63.43518902290546],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":19.39404296875,"times":[[8.5439453125,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[8.26513671875,"b"]],"type":"regimes"},{"accuracy":[24.00575138729095],"baseline":[40.31015039783014],"branch":[["b",24.00575138729095,2,"binary64"]],"compiler":[[1,3]],"count":[[12,2]],"inputs":[["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 c (/.f64 #s(literal -1 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (*.f64 (neg.f64 b) #s(approx (- (/ 1 a) (/ c (* b b))) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 a (*.f64 a a))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 b a) (*.f64 a a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 #s(literal 1 binary64) (/.f64 b c))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (*.f64 (neg.f64 b) a) (*.f64 a a)))"]],"memory":[[-4984400,3305584]],"oracle":[63.34954275182502],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":6.583984375,"times":[[5.3310546875,"b"]],"type":"regimes"},{"accuracy":[34.791017860536016],"baseline":[40.31015039783014],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",40.31015039783014,1,"binary64"],["c",40.31015039783014,1,"binary64"],["a",40.31015039783014,1,"binary64"],["b",34.791017860536016,2,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[2,2]],"inputs":[["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"memory":[[6599200,6599200]],"oracle":[61.94904948915652],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))"]],"repr":["binary64"],"time":10.429931640625,"times":[[2.69287109375,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[2.5029296875,"c"],[2.1181640625,"a"],[1.85400390625,"b"]],"type":"regimes"},{"accuracy":[56.28368733375775],"baseline":[56.283687333757754],"branch":[["a",56.283687333757754,1,"binary64"],["c",56.283687333757754,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",56.283687333757754,1,"binary64"],["b",56.28368733375775,1,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[1,1]],"inputs":[["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))"]],"link":["."],"memory":[[-2069984,6280976]],"name":["quadp (p42, positive)"],"oracle":[56.283687333757754],"outputs":[["#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))"]],"repr":["binary64"],"time":6.507080078125,"times":[[1.160888671875,"a"],[1.132080078125,"c"],[1.900146484375,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[1.343994140625,"b"]],"type":"regimes"},{"bstep":[[32.470947265625,2.0776542924062333e-83,2.5018656684195218e-70],[17.303955078125,-2.1056100639378164e+73,-4.612738563063418e+70]],"compiler":[[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[15,13],[25,19],[15,13],[25,19],[15,13],[25,19],[15,13],[25,19],[15,13],[25,19],[15,13],[25,19],[15,13],[25,19],[15,13],[25,19],[19,17],[1,3]],"memory":[[-771232,15957536]],"method":["binary-search","binary-search"],"mixsample":[[3.091552734375,"ival-div",0],[1.466796875,"adjust",800],[0.080078125,"ival-sub",1600],[0.174560546875,"ival-assert",0],[1.853271484375,"ival-sub",0],[2.512939453125,"ival-sqrt",0],[0.390869140625,"ival-sub",400],[0.407958984375,"adjust",2000],[2.798583984375,"ival-add",0],[0.02685546875,"ival-mult",800],[8.559814453125,"ival-mult",0],[0.155029296875,"ival-sqrt",1600],[0.333740234375,"ival-mult",400],[0.24658203125,"ival-true",0],[0.351806640625,"exact",0],[1.833984375,"ival-neg",0],[0.71435546875,"ival-sqrt",400]],"outcomes":[[6.146484375,1,"valid",38],[3.44970703125,0,"invalid",35],[6.1796875,2,"valid",23],[19.819091796875,0,"valid",227]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":56.698974609375,"type":"bsearch"},{"bstep":[[2.195068359375,2.0776542924062333e-83,2.5018656684195218e-70],[6.85498046875,-4.484266880283166e+61,-3.8379779162658704e+61]],"compiler":[[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[15,13],[25,19],[15,13],[25,19],[15,13],[25,19],[19,17],[1,3]],"memory":[[3145536,3145536]],"method":["binary-search","binary-search"],"mixsample":[[0.428466796875,"ival-div",0],[0.252197265625,"ival-add",0],[1.26416015625,"ival-mult",0],[0.020263671875,"ival-assert",0],[0.26171875,"ival-sub",0],[0.0419921875,"ival-true",0],[0.372314453125,"ival-sqrt",0],[0.05322265625,"exact",0],[0.316162109375,"ival-neg",0]],"outcomes":[[0.196044921875,0,"invalid",2],[4.212158203125,0,"valid",48]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":11.1318359375,"type":"bsearch"},{"bstep":[[1.244873046875,2.0776542924062333e-83,2.5018656684195218e-70],[16.203857421875,-4.381287496138232e-35,-1.728518964785181e-35]],"compiler":[[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[34,25],[22,18],[19,17],[1,3]],"memory":[[-2438544,5431536]],"method":["binary-search","binary-search"],"mixsample":[[0.81103515625,"ival-div",0],[0.559814453125,"ival-add",0],[3.120361328125,"ival-mult",0],[0.0517578125,"ival-assert",0],[0.592529296875,"ival-sub",0],[0.103759765625,"ival-true",0],[0.852294921875,"ival-sqrt",0],[0.12646484375,"exact",0],[0.6357421875,"ival-neg",0]],"outcomes":[[2.219970703125,0,"invalid",21],[8.263427734375,0,"valid",80]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":20.26318359375,"type":"bsearch"},{"bstep":[[31.997802734375,-1.2832619072759726e-287,5.197786960749508e-307]],"compiler":[[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[19,17],[1,3]],"memory":[[2693008,10693376]],"method":["binary-search"],"mixsample":[[2.11767578125,"ival-div",0],[1.275634765625,"ival-add",0],[6.685546875,"ival-mult",0],[0.118408203125,"ival-assert",0],[2.04833984375,"ival-sub",0],[0.179443359375,"ival-true",0],[1.92138671875,"ival-sqrt",0],[0.265869140625,"exact",0],[1.348876953125,"ival-neg",0]],"outcomes":[[6.22314453125,0,"invalid",68],[17.124755859375,0,"valid",176]],"stop":[["narrow-enough",1]],"time":36.94091796875,"type":"bsearch"},{"bstep":[[24.835205078125,2.074222003948874e-267,3.588447051857495e-263]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[19,17],[1,3]],"memory":[[-2075696,7571120]],"method":["binary-search"],"mixsample":[[0.0498046875,"adjust",800],[1.398193359375,"ival-div",0],[0.986083984375,"ival-add",0],[6.178466796875,"ival-mult",0],[0.083740234375,"ival-assert",0],[1.013671875,"ival-sub",0],[0.13330078125,"ival-true",0],[1.555908203125,"ival-sqrt",0],[0.202392578125,"exact",0],[0.980224609375,"ival-neg",0]],"outcomes":[[0.26904296875,1,"valid",1],[4.48095703125,0,"invalid",46],[13.46240234375,0,"valid",127]],"stop":[["narrow-enough",1]],"time":28.27587890625,"type":"bsearch"},{"bstep":[[33.114990234375,1329052.2145681167,8.581503436487701e+25]],"compiler":[[33,23],[22,18],[33,23],[22,18],[33,23],[22,18],[33,23],[22,18],[33,23],[22,18],[33,23],[22,18],[33,23],[22,18],[33,23],[22,18],[33,23],[22,18],[33,23],[22,18],[33,23],[22,18],[19,17],[1,3]],"memory":[[2873312,10898112]],"method":["binary-search"],"mixsample":[[2.17236328125,"adjust",800],[2.536376953125,"ival-div",0],[0.198974609375,"ival-sub",1600],[0.089599609375,"ival-assert",0],[0.016845703125,"ival-sub",3600],[0.936279296875,"ival-sub",0],[0.544921875,"ival-sub",400],[1.382080078125,"ival-sqrt",0],[0.705078125,"adjust",2000],[1.6826171875,"ival-add",0],[0.04296875,"ival-mult",800],[5.22802734375,"ival-mult",0],[0.4345703125,"ival-sqrt",1600],[0.49658203125,"ival-mult",400],[0.095947265625,"adjust",2800],[0.131591796875,"ival-true",0],[0.034912109375,"ival-sqrt",3600],[0.181884765625,"exact",0],[0.90380859375,"ival-sqrt",400],[0.9609375,"ival-neg",0]],"outcomes":[[8.330078125,1,"valid",58],[1.14892578125,0,"invalid",12],[9.42724609375,2,"valid",43],[0.583984375,3,"valid",2],[6.3447265625,0,"valid",73]],"stop":[["narrow-enough",1]],"time":40.340087890625,"type":"bsearch"},{"egraph":[[6,6777,394,0.042651886],[5,3343,394,0.060243123],[4,1038,394,0.024655593],[3,503,404,0.005023188],[2,233,406,0.003246887],[1,133,406,0.0018591],[0,85,417,0.001515992]],"inputs":[["(if (<=.f64 b #s(literal -17000000000000000810065649207011672237788585470505538565037574920469479424 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))) (if (<=.f64 b #s(literal 3978585891278293/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056 binary64)) (/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -44000000000000000627529338483176592262972319383580315981185024 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))) (if (<=.f64 b #s(literal 3978585891278293/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -3928516401145467/93536104789177786765035829293842113257979682750464 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) (if (<=.f64 b #s(literal 3978585891278293/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) #s(approx (* (+ (* -4 a) (* (/ b c) b)) c) (*.f64 (*.f64 #s(literal -4 binary64) c) a)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -101201126653655/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))","(if (<=.f64 b #s(literal 2439637115471363/1161731959748268017810986326679609812602547032546401921137321765090578638406565916832162745700122148898280252961088260195667644723081957584211586391486245801392945969099578026517723757683045106929874371704962060317240428677248343818872733547147389127353160238636049931893566678761472 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))","(if (<=.f64 b #s(literal 45000000000000000 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))"]],"memory":[[-2685344,13071520]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b #s(literal -17000000000000000810065649207011672237788585470505538565037574920469479424 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))) (if (<=.f64 b #s(literal 3978585891278293/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056 binary64)) (/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -44000000000000000627529338483176592262972319383580315981185024 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))) (if (<=.f64 b #s(literal 3978585891278293/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -3928516401145467/93536104789177786765035829293842113257979682750464 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) (if (<=.f64 b #s(literal 3978585891278293/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) #s(approx (* (+ (* -4 a) (* (/ b c) b)) c) (*.f64 (*.f64 #s(literal -4 binary64) c) a)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -101201126653655/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))","(if (<=.f64 b #s(literal 2439637115471363/1161731959748268017810986326679609812602547032546401921137321765090578638406565916832162745700122148898280252961088260195667644723081957584211586391486245801392945969099578026517723757683045106929874371704962060317240428677248343818872733547147389127353160238636049931893566678761472 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))","(if (<=.f64 b #s(literal 45000000000000000 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))))","#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))"]],"stop":[["node limit",1]],"time":165.429931640625,"type":"simplify"},{"compiler":[[417,88],[0,3],[12,10],[50,20],[0,3],[12,10],[50,20],[4,5],[4,5],[4,5],[4,5],[29,20],[11,8],[4,5],[0,3],[55,22],[18,14],[4,5],[4,5],[50,19],[29,20],[11,8],[4,5],[50,20],[29,20],[11,8]],"egraph":[[0,8385,4996,0.094652392],[1,3615,5201,0.02854396],[0,1075,5435,0.012511021],[0,8622,3749,0.107028132],[1,2741,3919,0.027343184],[0,824,4036,0.008823671],[0,8465,261,0.079335688],[2,2769,261,0.036998143],[1,370,269,0.008966677],[0,89,275,0.002489532],[0,57,283,0.000514488],[0,8401,232,0.087571883],[2,1730,232,0.037990843],[1,249,232,0.00595916],[0,68,234,0.002025494],[0,43,243,0.000394003],[0,8386,2654,0.105310206],[2,6121,2789,0.029929839],[1,1738,2817,0.023905302],[0,545,2858,0.006011043],[0,8189,44,0.060908669],[3,6896,48,0.036985378],[2,534,48,0.02137379],[1,77,49,0.002972809],[0,23,51,0.000893581],[0,14,51,0.000175489]],"memory":[[-6415200,12804256]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":1855.72119140625,"type":"soundness"},{"compiler":[[417,88],[417,88],[105,28],[105,28],[17,14],[17,14]],"memory":[[8895264,41175248]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":234.73193359375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]