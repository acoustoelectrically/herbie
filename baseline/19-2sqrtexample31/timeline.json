[{"memory":[[14864,14864]],"time":0.057861328125,"type":"start"},{"compiler":[[15,11]],"memory":[[573520,573520]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":4.258056640625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[18744272,371153072]],"mixsample":[[170.731689453125,"adjust",800],[57.395751953125,"ival-add",0],[86.995361328125,"ival-sqrt",800],[4.05712890625,"ival-assert",0],[89.13525390625,"ival-sub",0],[16.69140625,"ival-add",400],[14.975341796875,"ival-and",0],[0.082763671875,"ival-sub",400],[147.915771484375,"const",0],[145.424560546875,"ival-sqrt",0],[27.8115234375,"ival->",0],[33.39501953125,"ival-add",800],[8.354736328125,"exact",0],[43.64892578125,"ival-sqrt",400],[24.67041015625,"ival-<",0]],"outcomes":[[1096.751708984375,1,"valid",7993],[22.7294921875,0,"valid",263]],"time":1485.06787109375,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[255,0,0,1]],"explanations":[["-.f64","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","cancellation",255,0,[],[[]]]],"fperrors":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",255,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(sqrt.f64 x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[255,0,0,0,0,1]],"memory":[[-17512608,45391552]],"mixsample":[[11.5908203125,"adjust",800],[3.720947265625,"ival-add",0],[7.69189453125,"ival-sqrt",800],[0.261962890625,"ival-assert",0],[0.88037109375,"ival-add",400],[6.031982421875,"ival-sub",0],[0.599853515625,"ival-true",0],[9.595947265625,"ival-sqrt",0],[2.038330078125,"ival-add",800],[0.392822265625,"exact",0],[3.156982421875,"ival-sqrt",400]],"outcomes":[[68.32177734375,1,"valid",504],[0.499267578125,0,"valid",8]],"time":127.76220703125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,7,0.000654881],[10,182,7,0.000868905],[9,174,7,0.000886151],[8,158,7,0.000909888],[7,109,7,0.000763826],[6,80,7,0.000920319],[5,48,7,0.000609468],[4,33,7,0.000349186],[3,25,7,0.000178835],[2,19,7,0.000129276],[1,15,7,0.000120331],[0,10,7,0.000151115],[0,6,7,0.000101187],[7,215,16,0.001158816],[6,204,16,0.001524903],[5,180,16,0.001140265],[4,122,16,0.001107801],[3,74,16,0.000765381],[2,41,16,0.000400869],[1,18,17,0.000188672],[0,8,19,0.000138975]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[-2207440,5597872]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":32.602783203125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.080078125,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","next",60.53734934116664,"binary64"]],"compiler":[[7,6]],"memory":[[313968,313968]],"time":0.718994140625,"type":"prune"},{"egraph":[[0,182,18,0.000753681],[10,182,18,0.000793156],[9,174,18,0.000927843],[8,158,18,0.000977627],[7,109,18,0.000774742],[6,80,18,0.001020747],[5,48,18,0.000451383],[4,33,18,0.000223499],[3,25,18,0.000175107],[2,19,18,0.000133026],[1,15,18,0.000120055],[0,10,18,0.000146804],[0,6,18,9.2186e-5]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(sqrt.f64 x)"]],"locations":[["(sqrt.f64 x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","cost-diff",0]],"memory":[[824384,824384]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","x","#s(literal 1 binary64)","(sqrt.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.843994140625,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","accuracy",0.0],["(sqrt.f64 x)","accuracy",0.0],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","accuracy",60.53734934116664]],"memory":[[3360000,11362576]],"mixsample":[[4.179931640625,"adjust",800],[1.474609375,"ival-add",0],[2.70361328125,"ival-sqrt",800],[0.104736328125,"ival-assert",0],[0.3974609375,"ival-add",400],[2.988037109375,"ival-sub",0],[0.199951171875,"ival-true",0],[6.040283203125,"ival-sqrt",0],[0.830078125,"ival-add",800],[0.154052734375,"exact",0],[1.1376953125,"ival-sqrt",400]],"outcomes":[[29.268310546875,1,"valid",252],[0.188232421875,0,"valid",4]],"time":37.234130859375,"type":"localize"},{"count":[[4,27]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)"]],"memory":[[1903904,1903904]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"series":[[2.245849609375,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","-inf"],[1.468994140625,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","inf"],[0.625,"((- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ x 1) (sqrt x))","x","0"]],"time":4.767822265625,"type":"series"},{"count":[[27,26]],"egraph":[[0,8163,351,0.09990204],[4,4919,387,0.030068633],[3,2292,387,0.020488494],[2,807,395,0.007821902],[1,299,399,0.002778387],[0,113,451,0.000997126]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(sqrt x)","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))"]],"memory":[[-6697200,42911200]],"method":["egg-herbie"],"outputs":[["(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(sqrt x)","(sqrt.f64 x)","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/128 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (/.f64 #s(literal 5/128 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":310.64404296875,"type":"simplify"},{"count":[[4,357]],"egraph":[[0,8686,16,0.076319636],[3,3385,16,0.048300477],[2,290,16,0.010479583],[1,43,16,0.001096137],[0,10,16,0.000598265],[0,6,16,0.000107062]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(sqrt.f64 x)"]],"memory":[[3866416,50982448]],"outputs":[["(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 2 binary64)))) (-.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (-.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))","(*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (pow.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (pow.f64 (neg.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (/.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64))))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(pow.f64 (/.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 9/2 binary64)) (pow.f64 x #s(literal 9/2 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(/.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 9/2 binary64)) (pow.f64 x #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) x)) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 9/2 binary64)) (pow.f64 x #s(literal 9/2 binary64))) (*.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 x (-.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(neg.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(neg.f64 (/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (neg.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (sqrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) x) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))) (sqrt.f64 (+.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (sqrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64))) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 2 binary64)))) (-.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (-.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (neg.f64 (pow.f64 x #s(literal 1/4 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (sqrt.f64 x) #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(-.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) (sqrt.f64 x))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal 1 binary64)) x))))","(+.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(*.f64 (sqrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) x))","(*.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) x))","(*.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))) (sqrt.f64 (+.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(*.f64 (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (sqrt.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (sqrt.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64))) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64))))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(pow.f64 (exp.f64 #s(literal 1/2 binary64)) (log1p.f64 x))","(pow.f64 (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 4 binary64)) #s(literal 1/8 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))) (sqrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))) (sqrt.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (sqrt.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (sqrt.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (sqrt.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (sqrt.f64 (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (sqrt.f64 (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (sqrt.f64 (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (exp.f64 (log.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (exp.f64 (log.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))))))","(/.f64 (exp.f64 (*.f64 #s(literal 1/2 binary64) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))) (exp.f64 (log.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(fabs.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(exp.f64 (-.f64 (log1p.f64 x) (*.f64 (log1p.f64 x) #s(literal 1/2 binary64))))","(exp.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -2 binary64))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))","(*.f64 (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)))","(*.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))))","(*.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (neg.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (+.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(pow.f64 (exp.f64 #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) (log1p.f64 x)))","(pow.f64 (exp.f64 #s(literal 1 binary64)) (log1p.f64 x))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 4 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (pow.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (exp.f64 (log1p.f64 (*.f64 (neg.f64 x) x))) (exp.f64 (log1p.f64 (neg.f64 x))))","(/.f64 (exp.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))))) (exp.f64 (log1p.f64 (neg.f64 x))))","(/.f64 (exp.f64 (log.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (exp.f64 (log.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (exp.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (exp.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (exp.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 x x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3/4 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal 3/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fabs.f64 (+.f64 #s(literal 1 binary64) x))","(hypot.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(hypot.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(hypot.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (hypot.f64 (sqrt.f64 x) x))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (*.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal 3/4 binary64))) (sqrt.f64 (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(*.f64 (sqrt.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal 1/4 binary64))) (sqrt.f64 (pow.f64 x #s(literal 3/4 binary64))))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (exp.f64 #s(literal 1/2 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/8 binary64))","(pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":386.468017578125,"type":"rewrite"},{"compiler":[[7540,1409]],"memory":[[-1051760,33045360]],"time":46.14794921875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","fresh",60.170210619520525,"binary64"],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","fresh",59.8594073862968,"binary64"],["(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","next",60.56294824182984,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",60.53734934116664,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","fresh",61.21088884419437,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","next",61.54633064593313,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","next",62.997803244350735,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","next",0.5265814463839966,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","next",0.6531463440073193,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","fresh",0.8332365447368877,"binary64"]],"compiler":[[47,14],[13,8],[11,7],[7,6],[12,10],[10,7],[9,8],[28,22],[20,16],[14,12],[47,14],[13,8],[11,7],[12,10],[10,7],[9,8],[28,22],[20,16],[14,12]],"count":[[383,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[382,9],"picked":[1,1]}],"memory":[[-1918336,18262720]],"min-error":[[0.05859375,"binary64"]],"time":11.533203125,"type":"prune"},{"egraph":[[0,6200,237,0.015157521],[25,6200,237,0.029683733],[24,6200,237,0.03099711],[23,6200,237,0.032328616],[22,6200,237,0.025182937],[21,6150,237,0.023399894],[20,6108,237,0.025356155],[19,5778,237,0.033016546],[18,4933,237,0.034371557],[17,4793,237,0.02495084],[16,4775,237,0.01699791],[15,4755,237,0.018676585],[14,4670,237,0.019162528],[13,4173,237,0.019656531],[12,2706,237,0.021737196],[11,2043,237,0.018306307],[10,1713,237,0.012909439],[9,1205,237,0.013177341],[8,746,237,0.00695108],[7,434,237,0.004444402],[6,300,237,0.002841739],[5,188,237,0.001510734],[4,134,237,0.00091846],[3,107,237,0.000713306],[2,86,237,0.000535312],[1,69,237,0.000477089],[0,50,237,0.000443756],[0,31,237,0.000334183]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","(sqrt.f64 x)","x","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)"]],"locations":[["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","cost-diff",0],["(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","cost-diff",0],["(+.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","cost-diff",0],["(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","cost-diff",0]],"memory":[[1353296,9285024]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 1 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","(sqrt.f64 x)","x","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","(-.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))) (sqrt.f64 x))","(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 x #s(literal -1 binary64)) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))","#s(literal 1 binary64)","x","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":482.031982421875,"type":"simplify"},{"compiler":[[202,28]],"locations":[["(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","accuracy",0.015625],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.16015625],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","accuracy",0.24609375],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","accuracy",0.39924009400731925],["(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","accuracy",0.0],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","accuracy",0.48046875],["(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","accuracy",60.53734934116664],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","accuracy",0.7111017663101602],["(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","accuracy",60.53734934116664],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","accuracy",59.626194424162115],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","accuracy",60.53734934116664],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","accuracy",0.24609375],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","accuracy",0.2726758523262081],["(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.614853018067496],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","accuracy",19.345845075548745]],"memory":[[2723760,43211776]],"mixsample":[[12.380615234375,"ival-div",0],[14.012451171875,"adjust",800],[7.48779296875,"ival-add",0],[6.72607421875,"ival-mult",0],[1.43896484375,"ival-div",400],[4.00439453125,"ival-sqrt",800],[0.14794921875,"ival-assert",0],[1.1513671875,"ival-div",800],[0.76220703125,"ival-add",400],[5.029296875,"ival-sub",0],[0.23486328125,"ival-true",0],[9.181884765625,"ival-sqrt",0],[0.68701171875,"exact",0],[1.84814453125,"ival-add",800],[1.843994140625,"ival-sqrt",400],[6.1279296875,"ival-pow",0]],"outcomes":[[124.615966796875,1,"valid",252],[0.892822265625,0,"valid",4]],"time":155.615966796875,"type":"localize"},{"count":[[18,53]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1 binary64) x)","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))"]],"memory":[[-3037968,4532192]],"outputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(* 1/16 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 2))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 2))","(sqrt (/ 1 (pow x 3)))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(sqrt x)","(+ 1 x)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(sqrt (/ 1 x))","(/ 1 (pow x 3))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* 1/2 (sqrt x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))"]],"series":[[4.98681640625,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (sqrt (/ 1 (pow x 3))) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (- (/ (+ 1 x) (sqrt (+ 1 x))) (sqrt x)) (/ (+ 1 x) (sqrt (+ 1 x))) (+ 1 x) (sqrt (+ 1 x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (sqrt (/ 1 x)) (/ 1 (pow x 3)))","x","-inf"],[1.8408203125,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (sqrt (/ 1 (pow x 3))) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (- (/ (+ 1 x) (sqrt (+ 1 x))) (sqrt x)) (/ (+ 1 x) (sqrt (+ 1 x))) (+ 1 x) (sqrt (+ 1 x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (sqrt (/ 1 x)) (/ 1 (pow x 3)))","x","inf"],[2.545166015625,"((- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (sqrt (/ 1 (pow x 3))) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (- (/ (+ 1 x) (sqrt (+ 1 x))) (sqrt x)) (/ (+ 1 x) (sqrt (+ 1 x))) (+ 1 x) (sqrt (+ 1 x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) (sqrt (/ 1 x)) (/ 1 (pow x 3)))","x","0"]],"time":10.786865234375,"type":"series"},{"count":[[53,52]],"egraph":[[0,8190,663,0.133531923],[3,3790,719,0.033027588],[2,1350,727,0.013653693],[1,440,737,0.004735253],[0,162,845,0.001398836]],"inputs":[["(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(* 1/16 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 2))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 2))","(sqrt (/ 1 (pow x 3)))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(sqrt x)","(+ 1 x)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(sqrt (/ 1 x))","(/ 1 (pow x 3))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* 1/2 (sqrt x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))"]],"memory":[[130832,51397296]],"method":["egg-herbie"],"outputs":[["(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(* 1/16 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 1/16 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 2))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (*.f64 x x))","(sqrt (/ 1 (pow x 3)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(sqrt x)","(sqrt.f64 x)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(* -1/8 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ 1 (pow x 3))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64)))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64)))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 #s(literal 5/128 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) x)","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64)))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64))) x))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64))))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":360.739013671875,"type":"simplify"},{"count":[[18,810]],"egraph":[[0,8961,148,0.074355639],[2,1568,154,0.031279865],[1,207,158,0.005424605],[0,50,169,0.001549717],[0,31,183,0.000322211]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1 binary64) x)","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))"]],"memory":[[6576528,63402000]],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) x) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x) (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x) #s(literal 1 binary64))","(*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(pow.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) x))","(/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (*.f64 x (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x)","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x)) (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x) (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) (neg.f64 x)) (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) x) (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))) (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x))","(neg.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x)))","(-.f64 (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) x) (/.f64 (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (*.f64 (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (fma.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) #s(literal 3 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))))) (neg.f64 (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1/16 binary64))) (*.f64 (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) #s(literal 1/16 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))) #s(literal 1/16 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal 1/16 binary64))) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) #s(literal 1/16 binary64))) (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) #s(literal 1/16 binary64))) (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1/16 binary64))) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) x)) (-.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (-.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)))","(fma.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))","(fma.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) #s(literal -1 binary64)) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (-.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(+.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(+.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(+.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(+.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(+.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))","(+.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -3/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 3/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -3/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/4 binary64)) (pow.f64 x #s(literal -3/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3/2 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -3/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal -3/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -3 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -3/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (neg.f64 x)) x)))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal 3/4 binary64)))","(/.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (neg.f64 x)) #s(literal 3 binary64)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64)))","(sqrt.f64 (pow.f64 x #s(literal -3 binary64)))","(fabs.f64 (pow.f64 x #s(literal -3/2 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal 3/2 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 3 binary64))))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 3 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1/2 binary64))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -3/2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (fma.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 x (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) x)) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x)) (neg.f64 (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x)) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))) (/.f64 x (-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x) x))))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(+.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)))","(+.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))","#s(approx (sqrt (+ x 1)) #s(literal 1 binary64))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (fma.f64 (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (*.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) x (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64))) (+.f64 x (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) x)) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x)) (neg.f64 (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x)) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))) (/.f64 x (-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (fma.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x) x))))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","(+.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (sqrt.f64 x)))","(+.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))","#s(approx (sqrt (+ x 1)) (sqrt.f64 x))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (fma.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x)))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 x (-.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x)))))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) x)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))) (*.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x)))) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x)))) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (-.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (+.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x)))","(fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))) (/.f64 x (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 x (+.f64 #s(literal 1 binary64) x))))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(+.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (+.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))) (/.f64 (*.f64 x x) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (/.f64 (*.f64 x x) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fabs.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 (pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(pow.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (neg.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fabs.f64 (+.f64 #s(literal 1 binary64) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64))))","(*.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (+.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))","(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))) (/.f64 (*.f64 x x) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (/.f64 (*.f64 x x) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fabs.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) x) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) x) (/.f64 (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) (/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))","(*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(pow.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) x))","(/.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 x (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x)) (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x) (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) x) (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(neg.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (neg.f64 x)))","(-.f64 (/.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x) (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (pow.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (*.f64 (/.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))))) (neg.f64 (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/4 binary64) x))) (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)))) (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(+.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 (sqrt.f64 x))))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (pow.f64 x #s(literal 3/4 binary64))) (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (pow.f64 x #s(literal 3/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (sqrt.f64 x)) (/.f64 (pow.f64 x #s(literal -3/4 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -3/4 binary64)) x) (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/4 binary64))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/4 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/2 binary64))","(pow.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -2 binary64))","(pow.f64 (*.f64 x x) #s(literal -3/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -6 binary64))","(pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))","(pow.f64 x #s(literal -3 binary64))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -3/2 binary64))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 x x)))","(/.f64 (pow.f64 x #s(literal -2 binary64)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (pow.f64 x #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))","(sqrt.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(sqrt.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))","(exp.f64 (-.f64 (*.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64)) (*.f64 (log.f64 x) #s(literal 3/2 binary64))))","(exp.f64 (-.f64 (*.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64)) (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 3 binary64))))","(exp.f64 (fma.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64))))","(exp.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":235.007080078125,"type":"rewrite"},{"compiler":[[29017,3609]],"memory":[[6265920,100503824]],"time":170.698974609375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","fresh",60.170210619520525,"binary64"],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","fresh",59.8594073862968,"binary64"],["(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","done",60.56294824182984,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",60.53734934116664,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","next",61.21088884419437,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","done",61.54633064593313,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","done",62.997803244350735,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x))))) x))","fresh",1.0053400676721238,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","next",0.5265814463839966,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","next",0.9286077849684484,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","next",0.762994060411113,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","next",0.4072373819556722,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","fresh",0.8332365447368877,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","fresh",43.457621629812635,"binary64"]],"compiler":[[47,14],[13,8],[11,7],[7,6],[12,10],[10,7],[9,8],[25,18],[32,23],[35,26],[20,15],[23,16],[14,12],[36,26],[47,14],[13,8],[12,10],[25,18],[32,23],[35,26],[20,15],[23,16],[14,12],[36,26]],"count":[[1029,14]],"kept":[{"done":[1,1],"fresh":[4,4],"new":[1019,6],"picked":[5,3]}],"memory":[[1379440,43973280]],"min-error":[[0.0,"binary64"]],"time":25.488037109375,"type":"prune"},{"egraph":[[0,8080,337,0.039438725],[14,7962,337,0.011368487],[13,7586,337,0.03152851],[12,7523,337,0.023877431],[11,7174,337,0.026470888],[10,6518,337,0.021305127],[9,5651,337,0.020286535],[8,4115,337,0.025716593],[7,2454,337,0.017696796],[6,1221,341,0.012127475],[5,713,359,0.0063123],[4,384,359,0.003039902],[3,218,359,0.001600053],[2,157,359,0.000924018],[1,109,363,0.00074628],[0,75,386,0.000602457],[0,49,386,0.000428114]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","x","#s(literal 1/2 binary64)","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","#s(literal -1/8 binary64)","(pow.f64 x #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","#s(literal 1 binary64)","(/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","x","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","#s(literal 1/2 binary64)","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","#s(literal -1/8 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)"]],"locations":[["(fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","cost-diff",0],["(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","cost-diff",4],["(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","cost-diff",4],["(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","cost-diff",0],["#s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","cost-diff",0],["(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","cost-diff",0],["(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))","cost-diff",6]],"memory":[[-3090448,21321552]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 (/.f64 #s(literal -1/8 binary64) x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 (/.f64 #s(literal -1/8 binary64) x) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))","(-.f64 (/.f64 #s(literal -1/8 binary64) x) #s(literal -1/2 binary64))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","x","#s(literal 1/2 binary64)","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","#s(literal -1/8 binary64)","(pow.f64 x #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","x","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (-.f64 (/.f64 #s(literal -1/8 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 (-.f64 (/.f64 #s(literal -1/8 binary64) x) #s(literal -1/2 binary64)) (sqrt.f64 x))","#s(literal 1 binary64)","(/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","x","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(sqrt.f64 x)","#s(literal 1/2 binary64)","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","#s(literal -1/8 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":340.876953125,"type":"simplify"},{"compiler":[[301,42]],"locations":[["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.16015625],["(/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","accuracy",0.24609375],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","accuracy",0.2726758523262081],["(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x)))","accuracy",19.345845075548745],["(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","accuracy",0.28515625],["(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","accuracy",0.2890625],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","accuracy",0.39924009400731925],["(/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","accuracy",0.48828125],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","accuracy",0.24609375],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","accuracy",0.2726758523262081],["#s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","accuracy",0.6827627817937794],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","accuracy",59.61047867806568],["(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","accuracy",60.53734934116664],["(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","accuracy",0.01171875],["(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","accuracy",0.015625],["(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","accuracy",0.28515625],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","accuracy",0.39924009400731925]],"memory":[[-7035968,57693616]],"mixsample":[[25.39306640625,"ival-div",0],[17.495849609375,"adjust",800],[16.3525390625,"ival-add",0],[17.3232421875,"ival-mult",0],[2.62353515625,"ival-sqrt",800],[0.1259765625,"ival-assert",0],[0.590576171875,"ival-add",400],[2.402099609375,"ival-sub",0],[0.245361328125,"ival-true",0],[9.702392578125,"ival-sqrt",0],[1.175048828125,"ival-add",800],[0.838134765625,"exact",0],[1.20068359375,"ival-sqrt",400],[18.5224609375,"ival-pow",0]],"outcomes":[[154.327392578125,1,"valid",252],[1.222900390625,0,"valid",4]],"time":196.2939453125,"type":"localize"},{"count":[[22,73]],"inputs":[["(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-3454800,6135888]],"outputs":[["(/ -1/8 x)","(/ (+ (* -1/8 x) (* 1/2 (pow x 2))) (pow x 2))","(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(sqrt x)","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(* 1/16 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 2))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 2))","(* 1/2 (sqrt x))","(* -8 (sqrt (pow x 3)))","(* (pow x 2) (+ (* -32 (sqrt x)) (* -8 (sqrt (/ 1 x)))))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* -128 (sqrt x)) (* 32 (sqrt (/ 1 x)))))))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* x (- (* -512 (sqrt x)) (* 128 (sqrt (/ 1 x))))) (* 32 (sqrt (/ 1 x)))))))","(/ 1 (pow x 3))","(sqrt (/ 1 (pow x 3)))","(sqrt (/ 1 x))","1/2","(* x (- (* 1/2 (/ 1 x)) (* 1/8 (/ 1 (pow x 2)))))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* 2 (sqrt x))","(+ (* 1/2 (sqrt (/ 1 x))) (* 2 (sqrt x)))","(- (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt x))) (* -1/2 (sqrt (/ 1 x))))","(- (+ (* 1/32 (sqrt (/ 1 (pow x 5)))) (* 2 (sqrt x))) (+ (* -1/2 (sqrt (/ 1 x))) (* -1/8 (sqrt (/ 1 (pow x 3))))))","(* x (+ (* 1/2 (/ 1 x)) (* 1/8 (/ 1 (* (pow x 2) (pow (sqrt -1) 2))))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (sqrt (/ 1 (pow x 3)))))","(* -2 (sqrt x))","(+ (* -2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* -1 (/ (- (* 1/32 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 6)))) (* 1/8 (* (sqrt x) (/ 1 (pow (sqrt -1) 4))))) x)) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))"]],"series":[[11.468017578125,"((/ (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (* (/ (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (sqrt x)) (pow x -1/2)) (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (* 1/2 (sqrt x)) (/ 1 (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))))) (- (sqrt (+ x 1)) (sqrt x)) (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (* (/ -1 x) (/ (/ -1 x) x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (* (/ -1 x) (/ (/ -1 x) x))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (* (/ -1 x) (/ (/ -1 x) x))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (/ -1/8 (sqrt x)) (sqrt (* (/ -1 x) (/ (/ -1 x) x))) (sqrt (/ 1 x)))","x","-inf"],[4.2529296875,"((/ (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (* (/ (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (sqrt x)) (pow x -1/2)) (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (* 1/2 (sqrt x)) (/ 1 (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))))) (- (sqrt (+ x 1)) (sqrt x)) (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (* (/ -1 x) (/ (/ -1 x) x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (* (/ -1 x) (/ (/ -1 x) x))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (* (/ -1 x) (/ (/ -1 x) x))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (/ -1/8 (sqrt x)) (sqrt (* (/ -1 x) (/ (/ -1 x) x))) (sqrt (/ 1 x)))","x","inf"],[5.855224609375,"((/ (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (sqrt x)) (- (sqrt (+ x 1)) (sqrt x)) (* (/ (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (sqrt x)) (pow x -1/2)) (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (sqrt x) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (* 1/2 (sqrt x)) (/ 1 (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))))) (- (sqrt (+ x 1)) (sqrt x)) (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (* (/ -1 x) (/ (/ -1 x) x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (* (/ -1 x) (/ (/ -1 x) x))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (+ (* (sqrt (* (/ -1 x) (/ (/ -1 x) x))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (/ -1/8 (sqrt x)) (sqrt (* (/ -1 x) (/ (/ -1 x) x))) (sqrt (/ 1 x)))","x","0"]],"time":24.198974609375,"type":"series"},{"count":[[73,73]],"egraph":[[0,8265,936,0.112781941],[3,5635,1008,0.03853835],[2,2055,1027,0.029657571],[1,664,1041,0.010416852],[0,237,1188,0.002322855]],"inputs":[["(/ -1/8 x)","(/ (+ (* -1/8 x) (* 1/2 (pow x 2))) (pow x 2))","(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -1/8 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(sqrt x)","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(* 1/16 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 2))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 2))","(* 1/2 (sqrt x))","(* -8 (sqrt (pow x 3)))","(* (pow x 2) (+ (* -32 (sqrt x)) (* -8 (sqrt (/ 1 x)))))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* -128 (sqrt x)) (* 32 (sqrt (/ 1 x)))))))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* x (- (* -512 (sqrt x)) (* 128 (sqrt (/ 1 x))))) (* 32 (sqrt (/ 1 x)))))))","(/ 1 (pow x 3))","(sqrt (/ 1 (pow x 3)))","(sqrt (/ 1 x))","1/2","(* x (- (* 1/2 (/ 1 x)) (* 1/8 (/ 1 (pow x 2)))))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(* 2 (sqrt x))","(+ (* 1/2 (sqrt (/ 1 x))) (* 2 (sqrt x)))","(- (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt x))) (* -1/2 (sqrt (/ 1 x))))","(- (+ (* 1/32 (sqrt (/ 1 (pow x 5)))) (* 2 (sqrt x))) (+ (* -1/2 (sqrt (/ 1 x))) (* -1/8 (sqrt (/ 1 (pow x 3))))))","(* x (+ (* 1/2 (/ 1 x)) (* 1/8 (/ 1 (* (pow x 2) (pow (sqrt -1) 2))))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (sqrt (/ 1 (pow x 3)))))","(* -2 (sqrt x))","(+ (* -2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* -1 (/ (- (* 1/32 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 6)))) (* 1/8 (* (sqrt x) (/ 1 (pow (sqrt -1) 4))))) x)) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))"]],"memory":[[1621200,50002864]],"method":["egg-herbie"],"outputs":[["(/ -1/8 x)","(/.f64 #s(literal -1/8 binary64) x)","(/ (+ (* -1/8 x) (* 1/2 (pow x 2))) (pow x 2))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/8 binary64))) (*.f64 x x))","(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(* -1/8 (sqrt (/ 1 (pow x 3))))","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(* -1/8 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(sqrt x)","(sqrt.f64 x)","(* 1/16 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 1/16 (sqrt (/ 1 (pow x 3))))","(*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 2))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/16 binary64)))) (*.f64 x x))","(* 1/2 (sqrt x))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -8 (sqrt (pow x 3)))","(*.f64 #s(literal -8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))","(* (pow x 2) (+ (* -32 (sqrt x)) (* -8 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -32 binary64) (sqrt.f64 x))) (*.f64 x x))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* -128 (sqrt x)) (* 32 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (*.f64 x #s(literal -128 binary64)) (sqrt.f64 x) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -32 binary64) x #s(literal -8 binary64)))) (*.f64 x x))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* x (- (* -512 (sqrt x)) (* 128 (sqrt (/ 1 x))))) (* 32 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -512 binary64) (sqrt.f64 x))) x) x (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -32 binary64) x #s(literal -8 binary64)))) (*.f64 x x))","(/ 1 (pow x 3))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(sqrt (/ 1 (pow x 3)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","1/2","#s(literal 1/2 binary64)","(* x (- (* 1/2 (/ 1 x)) (* 1/8 (/ 1 (pow x 2)))))","(+.f64 (/.f64 #s(literal 1/8 binary64) (neg.f64 x)) #s(literal 1/2 binary64))","(* 1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))) x)","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(+ (* 1/2 (sqrt (/ 1 x))) (* 2 (sqrt x)))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))","(- (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt x))) (* -1/2 (sqrt (/ 1 x))))","(fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","(- (+ (* 1/32 (sqrt (/ 1 (pow x 5)))) (* 2 (sqrt x))) (+ (* -1/2 (sqrt (/ 1 x))) (* -1/8 (sqrt (/ 1 (pow x 3))))))","(fma.f64 #s(literal 1/32 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","(* x (+ (* 1/2 (/ 1 x)) (* 1/8 (/ 1 (* (pow x 2) (pow (sqrt -1) 2))))))","(+.f64 (/.f64 #s(literal 1/8 binary64) (neg.f64 x)) #s(literal 1/2 binary64))","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (neg.f64 x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -5/128 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) (neg.f64 x))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(* -1/2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x)","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) x))","(* -1 (* x (+ (* 1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x)) (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (sqrt (/ 1 (pow x 3)))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(* -2 (sqrt x))","(*.f64 #s(literal -2 binary64) (sqrt.f64 x))","(+ (* -2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))","(fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -2 binary64) (sqrt.f64 x)))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(fma.f64 #s(literal -2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* -1 (/ (- (* 1/32 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 6)))) (* 1/8 (* (sqrt x) (/ 1 (pow (sqrt -1) 4))))) x)) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(fma.f64 #s(literal -2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 x) (*.f64 (/.f64 #s(literal 1/32 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)) x))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"stop":[["iter limit",1],["node limit",1]],"time":327.425048828125,"type":"simplify"},{"count":[[22,913]],"egraph":[[0,8108,246,0.060345607],[2,2182,246,0.030841534],[1,300,246,0.008813932],[0,75,307,0.00217232],[0,49,319,0.000418757]],"inputs":[["(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","#s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))"]],"memory":[[2039344,62674800]],"outputs":[["(*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (sqrt.f64 x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (sqrt.f64 x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (sqrt.f64 x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (sqrt.f64 x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(pow.f64 (/.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (pow.f64 x #s(literal -1/2 binary64))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal -1/2 binary64))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (neg.f64 (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (*.f64 (sqrt.f64 x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 (sqrt.f64 x) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (sqrt.f64 x)))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (sqrt.f64 x)))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (sqrt.f64 x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (*.f64 (sqrt.f64 x) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (sqrt.f64 x)))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))) (/.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(-.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (sqrt.f64 x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (sqrt.f64 x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 x))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) (sqrt.f64 x)) (/.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) (sqrt.f64 x)))","(-.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (sqrt.f64 x)) (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (sqrt.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (sqrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) x) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) x) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (sqrt.f64 x) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (sqrt.f64 x) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (sqrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (pow.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (exp.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (sqrt.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))","(pow.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (*.f64 (neg.f64 x) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x)","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (*.f64 (neg.f64 x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (*.f64 (neg.f64 x) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(fma.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))) (/.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(-.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) x) (/.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) x))","(-.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x) (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(+.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 #s(literal 1/64 binary64) x))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/4 binary64) x))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))))","(fma.f64 #s(literal 1/8 binary64) (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(-.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(+.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(+.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) x)) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x)) (neg.f64 (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x)) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x) (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (/.f64 x (-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","(+.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(+.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","#s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(*.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(*.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))","(*.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(pow.f64 (/.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))))","(/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(neg.f64 (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (neg.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","#s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (sqrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) x) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) x) (/.f64 (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (sqrt.f64 x) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (sqrt.f64 x) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (sqrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/4 binary64))) (/.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal 1/4 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (pow.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (exp.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (sqrt.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))","(pow.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (*.f64 (neg.f64 x) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (neg.f64 (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x)","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (*.f64 (neg.f64 x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (*.f64 (neg.f64 x) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (*.f64 x (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (*.f64 x (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(fma.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))) (/.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(-.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 x (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) x) (/.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) x))","(-.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x) (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) x) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(+.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(*.f64 (pow.f64 (*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/4 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -1/4 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 (pow.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))","(*.f64 (/.f64 x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(*.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(*.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))","(*.f64 (/.f64 (sqrt.f64 x) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (/.f64 (sqrt.f64 x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (sqrt.f64 x) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (/.f64 (sqrt.f64 x) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (/.f64 (sqrt.f64 x) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (/.f64 (sqrt.f64 x) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) x)","(*.f64 (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 (sqrt.f64 x) (/.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 x (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 x (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 x (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal -1 binary64))","(pow.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 x))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (/.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 x) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 x) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))","(/.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(/.f64 x (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(neg.f64 (/.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (/.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (/.f64 (neg.f64 x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (pow.f64 x #s(literal 3/4 binary64))) (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (pow.f64 x #s(literal 3/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (sqrt.f64 x)) (/.f64 (pow.f64 x #s(literal -3/4 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -3/4 binary64)) x) (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) (pow.f64 x #s(literal 3/4 binary64))) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 3/4 binary64))))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 3/4 binary64))) (/.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) (pow.f64 x #s(literal 3/4 binary64))))","(*.f64 (/.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) x) (/.f64 (sqrt.f64 #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) (sqrt.f64 x)) (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) x) (/.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) (sqrt.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/4 binary64))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/4 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (sqrt.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (sqrt.f64 x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64))) #s(literal -1 binary64))","(*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) (/.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/2 binary64))","(pow.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -2 binary64))","(pow.f64 (*.f64 x x) #s(literal -3/2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -6 binary64))","(pow.f64 x #s(literal -3 binary64))","(/.f64 (neg.f64 (pow.f64 x #s(literal -3/2 binary64))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (neg.f64 x)))","(/.f64 (pow.f64 x #s(literal -2 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 (*.f64 x x))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 x x)))","(/.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 #s(literal -1 binary64) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))","(sqrt.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(sqrt.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) x)))","(exp.f64 (-.f64 (*.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64)) (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 3 binary64))))","(exp.f64 (-.f64 (*.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64)) (*.f64 (log.f64 x) #s(literal 3/2 binary64))))","(exp.f64 (fma.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64))))","(exp.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) x) (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))))))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (sqrt.f64 x)) (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) #s(literal -1 binary64)) (sqrt.f64 x)))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x) (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(pow.f64 (/.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (*.f64 x (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) x))","(/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (*.f64 x (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x)))","(-.f64 (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) x) (/.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) #s(literal 1/16 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) #s(literal 1/16 binary64))) (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))) #s(literal 1/16 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal 1/16 binary64))) (*.f64 (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal 1/16 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal 1/16 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal 1/16 binary64))) (*.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal 1/16 binary64))) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) #s(literal 1/16 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) #s(literal 1/16 binary64))) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal 1/16 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal 1/16 binary64))) (*.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x))) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x))) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) x)) (-.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))) (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal -9/2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 (neg.f64 x) #s(literal -1/2 binary64))) (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) #s(literal 1/16 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) x) (/.f64 #s(literal 1/64 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))","(fma.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))","(fma.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) x (-.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))","(fma.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) x) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 x)) #s(literal -1/16 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))","(fma.f64 #s(literal 1/8 binary64) (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (-.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (/.f64 (*.f64 #s(literal 1/4 binary64) x) (-.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(+.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(+.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(+.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))","(+.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(+.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 #s(literal 1/8 binary64) (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1/8 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))","(*.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (/.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 1/8 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1/8 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 x) #s(literal -8 binary64)))","(/.f64 #s(literal -1/8 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal 1/8 binary64) (sqrt.f64 x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 x) #s(literal -8 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (sqrt.f64 x)) (/.f64 (pow.f64 x #s(literal -1/4 binary64)) (sqrt.f64 x)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -3/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 3/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 x) #s(literal -3/2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -3/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 3 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64)))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) x))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64))) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/4 binary64)) (pow.f64 x #s(literal -3/4 binary64)))","(*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 #s(literal -1 binary64)) x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3/2 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -3/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 6 binary64))","(pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal -3/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -3 binary64))","(pow.f64 x #s(literal -3/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (neg.f64 x)) x)))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal 3/4 binary64)))","(/.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (neg.f64 x)) #s(literal 3 binary64)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (*.f64 (neg.f64 x) x) x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 x (*.f64 (neg.f64 x) x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 x))","(/.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) x) (sqrt.f64 (neg.f64 x)))","(/.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (neg.f64 (*.f64 x x))))","(/.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64)))","(sqrt.f64 (pow.f64 x #s(literal -3 binary64)))","(fabs.f64 (pow.f64 x #s(literal -3/2 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 3 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal 3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 3 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1/2 binary64))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -3 binary64) (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (exp.f64 #s(literal -1/2 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 (sqrt.f64 x))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1/4 binary64) (*.f64 (log.f64 x) #s(literal -1/4 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1/4 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1/4 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal -1/4 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":296.677978515625,"type":"rewrite"},{"compiler":[[32650,4003]],"memory":[[5823376,98895536]],"time":125.634033203125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","fresh",60.170210619520525,"binary64"],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","next",59.8594073862968,"binary64"],["(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","done",60.56294824182984,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",60.53734934116664,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","done",61.54633064593313,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","next",61.21023984767022,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","done",62.997803244350735,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","next",0.5265814463839966,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","done",0.9286077849684484,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","next",0.9621410944553354,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","next",0.8332365447368877,"binary64"]],"compiler":[[47,14],[13,8],[11,7],[7,6],[10,7],[17,13],[9,8],[31,24],[35,26],[26,19],[14,12],[47,14],[13,8],[17,13],[31,24],[26,19],[14,12]],"count":[[1013,11]],"kept":[{"done":[4,4],"fresh":[5,3],"new":[999,3],"picked":[5,1]}],"memory":[[-4482944,42900880]],"min-error":[[0.0,"binary64"]],"time":27.446044921875,"type":"prune"},{"egraph":[[0,8295,284,0.091424081],[11,5526,290,0.030989001],[10,2891,290,0.022452674],[9,1317,290,0.016120211],[8,834,290,0.00691136],[7,630,290,0.004350246],[6,502,290,0.003426299],[5,382,290,0.002535382],[4,273,290,0.001642292],[3,216,290,0.001238362],[2,152,290,0.000912853],[1,108,307,0.000752155],[0,71,311,0.000574186],[0,45,315,0.000411428]],"inputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))","#s(literal -1 binary64)","(*.f64 (*.f64 (neg.f64 x) x) x)","(*.f64 (neg.f64 x) x)","(neg.f64 x)","x","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/2 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","#s(literal 1 binary64)","#s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","#s(literal 2 binary64)","(sqrt.f64 x)","x","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(-.f64 (+.f64 #s(literal 1 binary64) x) x)","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(sqrt.f64 x)","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))"]],"locations":[["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(+.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(-.f64 (+.f64 #s(literal 1 binary64) x) x)","cost-diff",4],["(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","cost-diff",0],["#s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","cost-diff",0],["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","cost-diff",0],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","cost-diff",0],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))","cost-diff",1],["(*.f64 (*.f64 (neg.f64 x) x) x)","cost-diff",2]],"memory":[[5905184,42160720]],"method":["egg-herbie"],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))) x)","(fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))))","(sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x)))","(sqrt.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))","(pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))","#s(literal -1 binary64)","(*.f64 (*.f64 (neg.f64 x) x) x)","(pow.f64 (neg.f64 x) #s(literal 3 binary64))","(*.f64 (neg.f64 x) x)","(neg.f64 x)","x","#s(literal 1/16 binary64)","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal 1/2 binary64)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(literal -1/8 binary64)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(sqrt.f64 x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal 1/2 binary64)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","#s(literal 1 binary64)","#s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","#s(literal 2 binary64)","(sqrt.f64 x)","x","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))","(-.f64 (+.f64 #s(literal 1 binary64) x) x)","#s(literal 1 binary64)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))","#s(literal 1 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(sqrt.f64 (+.f64 #s(literal 1 binary64) x))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":282.490966796875,"type":"simplify"},{"compiler":[[238,40]],"locations":[["(sqrt.f64 x)","accuracy",0.0],["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","accuracy",0.015625],["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","accuracy",0.28515625],["(-.f64 (+.f64 #s(literal 1 binary64) x) x)","accuracy",60.3033164726817],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","accuracy",0.2890625],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","accuracy",0.39924009400731925],["#s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))","accuracy",0.6847782104700116],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","accuracy",0.0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.16015625],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","accuracy",0.684799044720098],["(sqrt.f64 x)","accuracy",0.0],["#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.765969574757112],["#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","accuracy",59.61047867806568],["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","accuracy",60.53734934116664],["(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","accuracy",0.24609375],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","accuracy",0.2726758523262081],["(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))","accuracy",0.614853018067496],["(sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x)))","accuracy",19.345845075548745]],"memory":[[-2834848,56340416]],"mixsample":[[0.35986328125,"ival-add",1200],[18.0947265625,"ival-div",0],[15.757080078125,"adjust",800],[12.378173828125,"ival-add",0],[0.043212890625,"ival-add",1600],[17.62060546875,"ival-mult",0],[2.52685546875,"ival-sqrt",800],[0.126953125,"ival-assert",0],[0.5712890625,"ival-add",400],[4.38427734375,"ival-sub",0],[0.227294921875,"ival-true",0],[9.6201171875,"ival-sqrt",0],[0.728515625,"exact",0],[1.3935546875,"ival-add",800],[1.159423828125,"ival-sqrt",400],[1.081787109375,"ival-neg",0]],"outcomes":[[124.560302734375,1,"valid",252],[1.05126953125,0,"valid",4]],"time":158.948974609375,"type":"localize"},{"count":[[22,79]],"inputs":[["(*.f64 (*.f64 (neg.f64 x) x) x)","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","#s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(-.f64 (+.f64 #s(literal 1 binary64) x) x)","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x)))","(sqrt.f64 x)"]],"memory":[[6601696,6601696]],"outputs":[["(* -1 (pow x 3))","(/ 1 (pow x 3))","(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(* 1/2 x)","(* 1/2 (sqrt (/ 1 x)))","(sqrt (/ 1 x))","(/ 1 x)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -8 (sqrt (pow x 3)))","(* (pow x 2) (+ (* -32 (sqrt x)) (* -8 (sqrt (/ 1 x)))))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* -128 (sqrt x)) (* 32 (sqrt (/ 1 x)))))))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* x (- (* -512 (sqrt x)) (* 128 (sqrt (/ 1 x))))) (* 32 (sqrt (/ 1 x)))))))","(* 2 (sqrt x))","(/ 1 (+ 1 (sqrt x)))","(+ (* -1/2 (/ x (pow (+ 1 (sqrt x)) 2))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* -1 (* x (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))))))) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ 1 x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(sqrt (/ 1 (pow x 3)))","(sqrt x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* x (+ 1/2 (/ 1 x)))","(+ (* 1/2 (sqrt (/ 1 x))) (* 2 (sqrt x)))","(- (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt x))) (* -1/2 (sqrt (/ 1 x))))","(- (+ (* 1/32 (sqrt (/ 1 (pow x 5)))) (* 2 (sqrt x))) (+ (* -1/2 (sqrt (/ 1 x))) (* -1/8 (sqrt (/ 1 (pow x 3))))))","(/ (- (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))) (* 1/8 (sqrt (/ 1 x)))) x)","(/ (- (+ (* -1 (/ (+ (* 1/128 (sqrt (pow x 7))) (* 1/32 (sqrt (pow x 7)))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (sqrt (/ 1 (pow x 3)))) (* 1/8 (sqrt (/ 1 x))))) x)","x","(* x (+ 1 (/ 1 x)))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (sqrt (/ 1 (pow x 3)))))","(* -2 (sqrt x))","(+ (* -2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* -1 (/ (- (* 1/32 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 6)))) (* 1/8 (* (sqrt x) (/ 1 (pow (sqrt -1) 4))))) x)) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (/ (- (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2))))) x))","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/128 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6)))) (* 1/32 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6))))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))) x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))"]],"series":[[4.573974609375,"((* (* (neg x) x) x) (/ -1 (* (* (neg x) x) x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ -1 (* (* (neg x) x) x))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (* 1/2 x) (- (sqrt (+ x 1)) (sqrt x)) (* (sqrt (/ 1 x)) 1/2) (sqrt (/ 1 x)) (/ 1 x) (- (sqrt (+ x 1)) (sqrt x)) (/ 1 (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))))) (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (* 2 (sqrt x)) (- (+ 1 x) x) (/ (- (+ 1 x) x) (+ (sqrt x) (sqrt (+ 1 x)))) (+ 1 x) (+ (sqrt x) (sqrt (+ 1 x))) (sqrt (/ -1 (* (* (neg x) x) x))) (sqrt x))","x","-inf"],[3.05712890625,"((* (* (neg x) x) x) (/ -1 (* (* (neg x) x) x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ -1 (* (* (neg x) x) x))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (* 1/2 x) (- (sqrt (+ x 1)) (sqrt x)) (* (sqrt (/ 1 x)) 1/2) (sqrt (/ 1 x)) (/ 1 x) (- (sqrt (+ x 1)) (sqrt x)) (/ 1 (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))))) (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (* 2 (sqrt x)) (- (+ 1 x) x) (/ (- (+ 1 x) x) (+ (sqrt x) (sqrt (+ 1 x)))) (+ 1 x) (+ (sqrt x) (sqrt (+ 1 x))) (sqrt (/ -1 (* (* (neg x) x) x))) (sqrt x))","x","inf"],[3.0361328125,"((* (* (neg x) x) x) (/ -1 (* (* (neg x) x) x)) (- (sqrt (+ x 1)) (sqrt x)) (/ (+ (* (sqrt (/ -1 (* (* (neg x) x) x))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) x) (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1)) (+ (* 1/2 x) 1) (* 1/2 x) (- (sqrt (+ x 1)) (sqrt x)) (* (sqrt (/ 1 x)) 1/2) (sqrt (/ 1 x)) (/ 1 x) (- (sqrt (+ x 1)) (sqrt x)) (/ 1 (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x))))) (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (* 2 (sqrt x)) (- (+ 1 x) x) (/ (- (+ 1 x) x) (+ (sqrt x) (sqrt (+ 1 x)))) (+ 1 x) (+ (sqrt x) (sqrt (+ 1 x))) (sqrt (/ -1 (* (* (neg x) x) x))) (sqrt x))","x","0"]],"time":12.2900390625,"type":"series"},{"count":[[79,78]],"egraph":[[0,8120,1198,0.086151184],[3,7171,1293,0.020265479],[2,2627,1293,0.025526263],[1,855,1306,0.009175961],[0,295,1471,0.002796973]],"inputs":[["(* -1 (pow x 3))","(/ 1 (pow x 3))","(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(* 1/16 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(* 1/2 x)","(* 1/2 (sqrt (/ 1 x)))","(sqrt (/ 1 x))","(/ 1 x)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(* -8 (sqrt (pow x 3)))","(* (pow x 2) (+ (* -32 (sqrt x)) (* -8 (sqrt (/ 1 x)))))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* -128 (sqrt x)) (* 32 (sqrt (/ 1 x)))))))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* x (- (* -512 (sqrt x)) (* 128 (sqrt (/ 1 x))))) (* 32 (sqrt (/ 1 x)))))))","(* 2 (sqrt x))","(/ 1 (+ 1 (sqrt x)))","(+ (* -1/2 (/ x (pow (+ 1 (sqrt x)) 2))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ (* x (- (* x (+ (* -1 (* x (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))))))) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(+ 1 x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(sqrt (/ 1 (pow x 3)))","(sqrt x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* x (+ 1/2 (/ 1 x)))","(+ (* 1/2 (sqrt (/ 1 x))) (* 2 (sqrt x)))","(- (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt x))) (* -1/2 (sqrt (/ 1 x))))","(- (+ (* 1/32 (sqrt (/ 1 (pow x 5)))) (* 2 (sqrt x))) (+ (* -1/2 (sqrt (/ 1 x))) (* -1/8 (sqrt (/ 1 (pow x 3))))))","(/ (- (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))) (* 1/8 (sqrt (/ 1 x)))) x)","(/ (- (+ (* -1 (/ (+ (* 1/128 (sqrt (pow x 7))) (* 1/32 (sqrt (pow x 7)))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (sqrt (/ 1 (pow x 3)))) (* 1/8 (sqrt (/ 1 x))))) x)","x","(* x (+ 1 (/ 1 x)))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (sqrt (/ 1 (pow x 3)))))","(* -2 (sqrt x))","(+ (* -2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* -1 (/ (- (* 1/32 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 6)))) (* 1/8 (* (sqrt x) (/ 1 (pow (sqrt -1) 4))))) x)) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (/ (- (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2))))) x))","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/128 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6)))) (* 1/32 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6))))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))) x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))"]],"memory":[[-2243840,41197296]],"method":["egg-herbie"],"outputs":[["(* -1 (pow x 3))","(neg.f64 (pow.f64 x #s(literal 3 binary64)))","(/ 1 (pow x 3))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(* 1/16 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))","(/ (+ (* -1/8 (sqrt (pow x 3))) (* 1/16 (sqrt x))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (* 1/16 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))))) (pow x 3))","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x (*.f64 #s(literal 1/16 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(* -8 (sqrt (pow x 3)))","(*.f64 #s(literal -8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))","(* (pow x 2) (+ (* -32 (sqrt x)) (* -8 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -32 binary64) (sqrt.f64 x))) (*.f64 x x))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* -128 (sqrt x)) (* 32 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (fma.f64 #s(literal -32 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -128 binary64) (sqrt.f64 x))) x (*.f64 #s(literal -8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(* (pow x 2) (+ (* -8 (sqrt (/ 1 x))) (* x (- (* x (- (* -512 (sqrt x)) (* 128 (sqrt (/ 1 x))))) (* 32 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (fma.f64 #s(literal -32 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 #s(literal -128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -512 binary64) (sqrt.f64 x))) x)) x (*.f64 #s(literal -8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(/ 1 (+ 1 (sqrt x)))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ (* -1/2 (/ x (pow (+ 1 (sqrt x)) 2))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (/.f64 x (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(+ (* x (- (* x (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(+ (* x (- (* x (+ (* -1 (* x (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))))))) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (+.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))) x (/.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (sqrt x))","(+.f64 (sqrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(fma.f64 #s(literal 1/2 binary64) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(sqrt (/ 1 (pow x 3)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(sqrt x)","(sqrt.f64 x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (+ (* 1/16 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 x)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/16 binary64))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ (* 1/2 (sqrt (/ 1 x))) (* 2 (sqrt x)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))","(- (+ (* 1/8 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt x))) (* -1/2 (sqrt (/ 1 x))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","(- (+ (* 1/32 (sqrt (/ 1 (pow x 5)))) (* 2 (sqrt x))) (+ (* -1/2 (sqrt (/ 1 x))) (* -1/8 (sqrt (/ 1 (pow x 3))))))","(fma.f64 #s(literal 1/32 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","(/ (- (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))) (* 1/8 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (- (+ (* -1 (/ (+ (* 1/128 (sqrt (pow x 7))) (* 1/32 (sqrt (pow x 7)))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (sqrt (/ 1 (pow x 3)))) (* 1/8 (sqrt (/ 1 x))))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (*.f64 (sqrt.f64 (pow.f64 x #s(literal 7 binary64))) #s(literal -5/128 binary64)) (pow.f64 x #s(literal 6 binary64)))))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64))))) x)","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -5/128 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) (neg.f64 x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(+ (* -1 (/ (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 1/8 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64))) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64))) #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))))","(* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(* -2 (sqrt x))","(*.f64 #s(literal -2 binary64) (sqrt.f64 x))","(+ (* -2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))","(fma.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -2 binary64) (sqrt.f64 x)))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(fma.f64 #s(literal -2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 x) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)))) x))","(+ (* -2 (sqrt x)) (* -1 (/ (- (* -1 (/ (- (* 1/32 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 6)))) (* 1/8 (* (sqrt x) (/ 1 (pow (sqrt -1) 4))))) x)) (* 1/2 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)))","(fma.f64 #s(literal -2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 x) (*.f64 (/.f64 #s(literal 1/32 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)) x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* -1 (/ (- (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))) x)","(* -1 (/ (- (+ (* -1 (/ (+ (* 1/128 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6)))) (* 1/32 (* (sqrt (pow x 7)) (/ 1 (pow (sqrt -1) 6))))) (pow x 6))) (* 1/2 (sqrt x))) (+ (* -1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))))) x))","(/.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/8 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (*.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 7 binary64))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) #s(literal -5/128 binary64)) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (neg.f64 x) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (neg.f64 x) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(*.f64 (neg.f64 x) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))))","(* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))"]],"stop":[["iter limit",1],["node limit",1]],"time":281.864990234375,"type":"simplify"},{"count":[[22,473]],"egraph":[[0,8913,191,0.082378604],[2,2098,199,0.032291859],[1,283,214,0.007072236],[0,71,239,0.002240888],[0,45,241,0.000404699]],"inputs":[["(*.f64 (*.f64 (neg.f64 x) x) x)","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","#s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(-.f64 (+.f64 #s(literal 1 binary64) x) x)","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x)))","(sqrt.f64 x)"]],"memory":[[-741936,57884272]],"outputs":[["(*.f64 (*.f64 x x) (neg.f64 x))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (*.f64 (neg.f64 x) x) x)","(*.f64 (neg.f64 x) (*.f64 x x))","(*.f64 x (*.f64 (neg.f64 x) x))","(pow.f64 (neg.f64 x) #s(literal 3 binary64))","(/.f64 (pow.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 0 binary64) x) #s(literal 3 binary64)))","(neg.f64 (pow.f64 x #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 3 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (*.f64 x x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64))))","(pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) #s(literal 1/2 binary64))","(pow.f64 (/.f64 x (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))","(pow.f64 x #s(literal -3 binary64))","(/.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (pow.f64 x #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(neg.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64))))","(sqrt.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))","(exp.f64 (fma.f64 (log.f64 (pow.f64 x #s(literal -3 binary64))) #s(literal 1/2 binary64) (*.f64 (log.f64 (pow.f64 x #s(literal -3 binary64))) #s(literal 1/2 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal 1/4096 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(pow.f64 (/.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) (neg.f64 x))))","(/.f64 (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) x))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)))))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 2 binary64))) (*.f64 x (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 3 binary64))) (*.f64 x (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (-.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64))))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 x))","(/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) x))","(neg.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal -3/2 binary64)) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x) (pow.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) x)) (*.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x)) (neg.f64 (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x)) (neg.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x) (-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x) (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (-.f64 x (*.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x)) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3/2 binary64))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))) (/.f64 x (+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (fma.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x) x) (pow.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(+.f64 (neg.f64 (sqrt.f64 x)) #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))))","(+.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (sqrt.f64 x)))","#s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 x #s(literal 1/2 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 (sqrt.f64 x))))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(sqrt.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(exp.f64 (fma.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64) (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64))))","(exp.f64 (neg.f64 (log.f64 x)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1/2 binary64)) (pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))) #s(literal -1 binary64))","(pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))))","(/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal 1 binary64))","#s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))) #s(literal 1 binary64))","(/.f64 (neg.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))) #s(literal -1 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) #s(literal 2 binary64))","#s(literal 1 binary64)","(*.f64 (pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(pow.f64 (/.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) #s(literal -1 binary64))","(pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x))) (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))) (*.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 x))) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) x)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) x)) (*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (neg.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (*.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (+.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 2 binary64)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (*.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(exp.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64)))","(+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 (/.f64 x (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(+.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (sqrt.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(fabs.f64 (+.f64 #s(literal 1 binary64) x))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(*.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (-.f64 (*.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) #s(literal 1 binary64))","(/.f64 (neg.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) x))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/4 binary64)) (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3/2 binary64)))","(pow.f64 (exp.f64 (log.f64 (pow.f64 x #s(literal -3 binary64)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))","(pow.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -3 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/2 binary64))","(pow.f64 x #s(literal -3/2 binary64))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (sqrt.f64 (neg.f64 x)))","(/.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) x))","(/.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (neg.f64 x)) #s(literal 3 binary64)))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -2 binary64))) (sqrt.f64 x))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(sqrt.f64 (pow.f64 x #s(literal -3 binary64)))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1/2 binary64))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -3 binary64))) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":276.240966796875,"type":"rewrite"},{"compiler":[[20302,2727]],"memory":[[2589520,67621440]],"time":131.8681640625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","fresh",59.8594073862968,"binary64"],["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","fresh",0.28515625,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","done",60.53734934116664,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","done",61.21023984767022,"binary64"],["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","done",62.997803244350735,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","done",0.5265814463839966,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","done",0.9286077849684484,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","fresh",0.9621410944553354,"binary64"],["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","done",0.8332365447368877,"binary64"]],"compiler":[[454,128],[17,9],[9,7],[7,6],[17,13],[9,8],[31,24],[35,26],[12,10],[14,12]],"count":[[735,9]],"kept":[{"done":[5,3],"fresh":[1,0],"new":[724,3],"picked":[5,3]}],"memory":[[-1527392,33636752]],"min-error":[[0.0,"binary64"]],"time":22.98291015625,"type":"prune"},{"accuracy":[0.28515625],"baseline":[0.28515625],"branch":[["x",0.28515625,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",0.28515625,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[22,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x))))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) x))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) #s(approx (/ (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x))) x) (/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal 1/2 binary64) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 x (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))"]],"memory":[[-558336,7352944]],"oracle":[63.50281465851045],"outputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))"]],"repr":["binary64"],"time":11.570068359375,"times":[[5.23291015625,"x"],[4.948974609375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[0.8332365447368877],"baseline":[0.8332365447368877],"branch":[["x",0.8332365447368877,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",0.8332365447368877,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[9,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1 binary64) #s(approx (/ x (+ (* (sqrt x) 1/2) (/ -1/8 (sqrt x)))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x)))))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(approx (+ (* (sqrt (/ 1 (pow x 3))) 1/16) (+ (* (sqrt (/ 1 x)) -1/8) (* 1/2 (sqrt x)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[-4379072,4414736]],"oracle":[62.997803244350735],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))"]],"repr":["binary64"],"time":6.4189453125,"times":[[3.424072265625,"x"],[2.205078125,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[0.9621410944553355],"baseline":[0.9621410944553354],"branch":[["x",0.9621410944553354,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",0.9621410944553355,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[5,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) (sqrt.f64 x)) (sqrt.f64 x))"]],"memory":[[3599024,3599024]],"oracle":[62.997803244350735],"outputs":[["#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))"]],"repr":["binary64"],"time":4.153076171875,"times":[[1.9208984375,"x"],[1.619140625,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[61.21023984767023],"baseline":[61.21023984767022],"branch":[["x",61.21023984767024,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",61.21023984767023,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[3,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 x))"]],"memory":[[3174736,3174736]],"oracle":[62.997803244350735],"outputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))"]],"repr":["binary64"],"time":3.346923828125,"times":[[1.531982421875,"x"],[1.27099609375,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"accuracy":[62.997803244350735],"baseline":[62.997803244350735],"branch":[["x",62.99780324435075,1,"binary64"],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))",62.997803244350735,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[1,1]],"inputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]],"link":["."],"memory":[[-5641792,2694832]],"name":["2sqrt (example 3.1)"],"oracle":[62.997803244350735],"outputs":[["(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]],"repr":["binary64"],"time":2.470947265625,"times":[[1.005859375,"x"],[1.016845703125,"(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))"]],"type":"regimes"},{"egraph":[[9,7322,61,0.01944502],[8,3288,61,0.044206795],[7,392,61,0.011587492],[6,136,61,0.001950072],[5,79,61,0.000919382],[4,62,61,0.00065991],[3,51,61,0.00055427],[2,44,61,0.000511159],[1,39,61,0.000501482],[0,26,61,0.000488016]],"inputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]],"memory":[[1168704,9100560]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))","(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]],"stop":[["node limit",1]],"time":101.387939453125,"type":"simplify"},{"compiler":[[61,29],[4,4],[0,1],[7,6],[14,12],[6,6],[6,6],[31,11],[33,13]],"egraph":[[0,8686,16,0.070895474],[3,3385,16,0.042935611],[2,290,16,0.011411494],[1,43,16,0.001159886],[0,10,16,0.000599006],[0,6,16,8.9023e-5],[0,8913,191,0.104281089],[2,2098,199,0.040073196],[1,283,214,0.007505652],[0,71,239,0.001979561],[0,45,241,0.000397368],[0,8163,351,0.099974197],[4,4919,387,0.03008372],[3,2292,387,0.02015286],[2,807,395,0.008119442],[1,299,399,0.002672421],[0,113,451,0.000961899],[0,8265,936,0.111567219],[3,5635,1008,0.03343934],[2,2055,1027,0.021521783],[1,664,1041,0.007360066],[0,237,1188,0.002255089]],"memory":[[4299744,4299744]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1]],"time":1682.009033203125,"type":"soundness"},{"compiler":[[61,29],[61,29],[5,5],[5,5],[7,6],[7,6]],"memory":[[-174992,24348448]],"remove-preprocessing":[[],[],[],[],[],[]],"time":210.66015625,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.010009765625,"type":"end"}]