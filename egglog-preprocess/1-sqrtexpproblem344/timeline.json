[{"memory":[[14512,14512]],"time":0.030029296875,"type":"start"},{"compiler":[[14,9]],"memory":[[482576,482576]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.00048804283142089844,"valid":0.9990236759185791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":1.694091796875,"type":"analyze"},{"bogosity":[{"exit":0.23741634102558182,"infinite":0.0036923225664942743,"invalid":0.0,"precondition":0.00048828125,"valid":0.7584030551579239}],"memory":[[13344368,311185232]],"mixsample":[[108.25,"ival-div",0],[10.332275390625,"ival-true",0],[117.70654296875,"ival-mult",0],[108.43603515625,"ival-sqrt",0],[8.986572265625,"exact",0],[226.881591796875,"ival-expm1",0],[5.328369140625,"ival-assert",0]],"outcomes":[[213.740966796875,0,"exit",2572],[665.246337890625,0,"valid",8256]],"time":1352.593994140625,"type":"sample"},{"compiler":[[12,10],[47,12],[47,12]],"confusion":[[175,0,0,81]],"explanations":[["sqrt.f64","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","oflow-rescue",1,0,[["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","overflow",3],["(exp.f64 (*.f64 #s(literal 2 binary64) x))","overflow",4],["(exp.f64 x)","overflow",3],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","overflow",3],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","overflow",4],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","overflow",2]],[[]]],["/.f64","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","o/n",1,0,[["(exp.f64 (*.f64 #s(literal 2 binary64) x))","overflow",4],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","overflow",4]],[[1]]],["/.f64","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","o/o",3,0,[["(exp.f64 (*.f64 #s(literal 2 binary64) x))","overflow",4],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","overflow",4],["(exp.f64 x)","overflow",3],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","overflow",3]],[[1]]],["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",171,0,[],[[1,2]]],["-.f64","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","cancellation",171,0,[],[[1,1]]]],"fperrors":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",1,0,false,0,false],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))",171,0,false,0,false],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",171,0,false,0,false],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",4,0,false,0,false],["(exp.f64 (*.f64 #s(literal 2 binary64) x))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) x)",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,172],[1,3],[0,81]],"maybe-confusion":[[175,0,0,0,0,81]],"memory":[[-5565216,65767760]],"mixsample":[[4.67041015625,"ival-div",0],[0.637451171875,"ival-true",0],[11.337646484375,"ival-exp",0],[6.251708984375,"ival-mult",0],[4.684814453125,"ival-sqrt",0],[8.637451171875,"ival-expm1",0],[0.708984375,"exact",0],[0.232421875,"ival-assert",0]],"outcomes":[[56.074462890625,0,"valid",512]],"time":159.93603515625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[12,10]],"egraph":[[0,8121,5,0.017962407],[9,6913,5,0.019819908],[8,2986,5,0.029522079],[7,591,5,0.015067553],[6,201,5,0.002499618],[5,124,5,0.000920909],[4,73,7,0.00060872],[3,47,12,0.000369765],[2,35,12,0.00024104],[1,29,12,0.000207272],[0,17,12,0.000264084],[0,10,12,0.000244544]],"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[-1168,24948336]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"symmetry":[[]],"time":323.032958984375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.072998046875,"type":"eval"},{"alts":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","next",42.557640404245994,"binary64"]],"compiler":[[12,10]],"memory":[[300640,300640]],"time":0.598876953125,"type":"prune"},{"egraph":[[0,8121,27,0.120346718],[9,6913,31,0.022431239],[8,2986,31,0.029005056],[7,591,31,0.012647834],[6,201,31,0.002487794],[5,124,31,0.000924476],[4,73,35,0.000607223],[3,47,45,0.000380681],[2,35,45,0.000252649],[1,29,45,0.000207502],[0,17,45,0.000248262],[0,10,45,0.000143712]],"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(exp.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","#s(literal 1 binary64)","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"locations":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","cost-diff",2],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",3]],"memory":[[4896720,37700416]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 x #s(literal 2 binary64)))","(exp.f64 (*.f64 #s(literal 2 binary64) x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) x)","(*.f64 #s(literal 2 binary64) x)","(*.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","x","#s(literal 1 binary64)","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","(exp.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":439.26611328125,"type":"simplify"},{"compiler":[[47,12]],"locations":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","accuracy",0.23644720021076088],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.8558767388878934],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","accuracy",39.216779266204796],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",39.26316087758282]],"memory":[[-4889264,11255248]],"mixsample":[[3.87548828125,"ival-div",0],[0.444091796875,"ival-true",0],[10.0048828125,"ival-exp",0],[4.27978515625,"ival-mult",0],[3.7412109375,"ival-sqrt",0],[8.805419921875,"ival-expm1",0],[0.937255859375,"exact",0],[0.18505859375,"ival-assert",0]],"outcomes":[[51.167724609375,0,"valid",256]],"time":70.6630859375,"type":"localize"},{"count":[[4,20]],"inputs":[["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[1248144,1248144]],"outputs":[["2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(- (exp (* 2 x)) 1)","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))"]],"series":[[2.4140625,"((/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","-inf"],[6.48095703125,"((/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","inf"],[2.650146484375,"((/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","0"]],"time":12.39697265625,"type":"series"},{"count":[[20,19]],"egraph":[[0,8367,129,0.126044874],[5,5961,156,0.041546647],[4,2567,163,0.041273948],[3,1446,173,0.018433696],[2,673,179,0.008545357],[1,252,179,0.006103712],[0,77,213,0.001636911]],"inputs":[["2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(- (exp (* 2 x)) 1)","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))"]],"memory":[[3960880,40771360]],"method":["egg-herbie"],"outputs":[["2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(* x (+ 2 (* 2 x)))","(*.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) x)","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) x #s(literal 2 binary64)) x #s(literal 2 binary64)) x)","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 2/3 binary64) x #s(literal 4/3 binary64)) x #s(literal 2 binary64)) x #s(literal 2 binary64)) x)","x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(- (exp (* 2 x)) 1)","(expm1.f64 (*.f64 #s(literal 2 binary64) x))","(- (exp x) 1)","(expm1.f64 x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":412.760009765625,"type":"simplify"},{"count":[[4,686]],"egraph":[[0,8045,15,0.081049028],[3,5021,19,0.048496466],[2,429,19,0.024582321],[1,63,19,0.002291201],[0,17,33,0.001553465],[0,10,33,0.000195266]],"inputs":[["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[-4449888,57990112]],"outputs":[["(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 12 binary64)))) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (pow.f64 (exp.f64 x) #s(literal 8 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 x))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (expm1.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(pow.f64 (*.f64 (exp.f64 (log1p.f64 (exp.f64 x))) (exp.f64 (log1p.f64 (exp.f64 x)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 (log1p.f64 (exp.f64 x)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (exp.f64 (log1p.f64 (exp.f64 x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1/2 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64)) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 4 binary64)) #s(literal 1/4 binary64))","(pow.f64 (exp.f64 (log1p.f64 (exp.f64 x))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (expm1.f64 x)) (expm1.f64 x))","(/.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)) (expm1.f64 x))","(/.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) #s(literal 1 binary64)) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 (*.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (neg.f64 (expm1.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -2 binary64))) (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -3 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))))","(/.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x)) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 x)))","(/.f64 (-.f64 (neg.f64 (expm1.f64 x)) (*.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (expm1.f64 x) (*.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (neg.f64 (expm1.f64 x))) (*.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(/.f64 (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 18 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (neg.f64 (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (expm1.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (neg.f64 (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (expm1.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x))))","(/.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (expm1.f64 x) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)))","(/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (expm1.f64 x)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64)) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (pow.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 1 binary64) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (exp.f64 x) (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (exp.f64 x) (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 x) (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))))))","(-.f64 (/.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))) (/.f64 (expm1.f64 x) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x))) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (expm1.f64 x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))))","(-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 (exp.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 12 binary64)))) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (pow.f64 (exp.f64 x) #s(literal 8 binary64))))","(*.f64 (+.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 x)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 4 binary64) x)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 6 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (pow.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (pow.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 x))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (expm1.f64 x)))","(*.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(pow.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (expm1.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (expm1.f64 x)) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 18 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 x)) (neg.f64 (expm1.f64 x)))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)) (expm1.f64 x))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 18 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 18 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (expm1.f64 (*.f64 #s(literal 6 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 12 binary64)))) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (pow.f64 (exp.f64 x) #s(literal 8 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 x)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(fma.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)))","(expm1.f64 (*.f64 #s(literal 4 binary64) (*.f64 x #s(literal 1/2 binary64))))","(expm1.f64 (*.f64 #s(literal 2 binary64) (fma.f64 x #s(literal 1/2 binary64) (*.f64 x #s(literal 1/2 binary64)))))","(expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64)))))","(expm1.f64 (*.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)))","(expm1.f64 (*.f64 x #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(+.f64 (neg.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) #s(literal -1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(+.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))","(+.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (expm1.f64 x)))","(*.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 4 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 6 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(*.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 (expm1.f64 x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 4 binary64) x))))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 x)))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (expm1.f64 x) #s(literal 1 binary64))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 x))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64))) (fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)))","(/.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 x) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(expm1.f64 x)","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 (*.f64 (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (expm1.f64 x))) #s(literal -1 binary64)))","(+.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (neg.f64 (exp.f64 x))) #s(literal -1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(*.f64 (/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (hypot.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x)))","(*.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (hypot.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x)))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (pow.f64 (neg.f64 (sqrt.f64 (expm1.f64 x))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(pow.f64 (*.f64 #s(literal 1 binary64) (exp.f64 (log1p.f64 (exp.f64 x)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (exp.f64 (log1p.f64 (exp.f64 x))) #s(literal 1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (log1p.f64 (exp.f64 x))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(/.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (sqrt.f64 (expm1.f64 x)))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(/.f64 (neg.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))) (neg.f64 (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (sqrt.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (sqrt.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","(/.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (expm1.f64 x))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (sqrt.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (sqrt.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (sqrt.f64 (expm1.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(neg.f64 (/.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (sqrt.f64 (expm1.f64 x))))","(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 (exp.f64 x)) #s(literal 1/4 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log1p.f64 (exp.f64 x))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (exp.f64 (log1p.f64 (exp.f64 x)))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 (exp.f64 x))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log1p.f64 (exp.f64 x)) #s(literal 1/2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":371.495849609375,"type":"rewrite"},{"compiler":[[16622,2395]],"memory":[[12479264,64911200]],"time":95.859130859375,"type":"eval"},{"alts":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","next",0.23644720021076088,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","next",21.26242939186921,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","next",20.27206765264433,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","next",21.433983390690905,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","next",17.707314726698655,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","fresh",20.439511418186765,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","fresh",21.097224703559007,"binary64"]],"compiler":[[5,5],[23,18],[20,16],[16,13],[14,12],[24,18],[27,20],[5,5],[23,18],[20,16],[16,13],[14,12],[24,18],[27,20]],"count":[[706,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[705,7],"picked":[1,0]}],"memory":[[-12462032,28614720]],"min-error":[[0.23644720021076088,"binary64"]],"time":20.39599609375,"type":"prune"},{"egraph":[[0,8340,146,0.091850705],[9,7294,146,0.018069462],[8,3305,146,0.030044297],[7,889,146,0.017572593],[6,491,146,0.00406514],[5,413,146,0.002082932],[4,312,162,0.001989407],[3,176,202,0.00153081],[2,98,202,0.00079334],[1,71,202,0.000636962],[0,47,202,0.000752843],[0,29,202,0.000313149]],"inputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 x)","x","#s(literal -1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","cost-diff",0],["(+.f64 #s(literal 2 binary64) x)","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal -1 binary64))","cost-diff",0],["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","cost-diff",0]],"memory":[[5836192,37870704]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 x)","x","#s(literal -1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":266.1279296875,"type":"simplify"},{"compiler":[[163,27]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.0546875],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.1171875],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","accuracy",0.23644720021076088],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","accuracy",21.109217123305207],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","accuracy",0.23644720021076088],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","accuracy",20.45797623248344],["(+.f64 #s(literal 2 binary64) x)","accuracy",0.0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","accuracy",0.23644720021076088],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","accuracy",21.233644080594274],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","accuracy",0.23644720021076088],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","accuracy",18.1482420446802],["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal -1 binary64))","accuracy",0.00390625],["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","accuracy",0.23644720021076088]],"memory":[[-1803408,23884544]],"mixsample":[[2.140869140625,"ival-div",0],[8.457763671875,"ival-add",0],[3.097900390625,"ival-exp",0],[10.968994140625,"ival-mult",0],[3.46875,"ival-expm1",0],[0.1220703125,"ival-assert",0],[1.553466796875,"ival-sub",0],[0.2265625,"ival-true",0],[4.22412109375,"const",0],[3.700439453125,"ival-sqrt",0],[0.54638671875,"exact",0]],"outcomes":[[54.728271484375,0,"valid",256]],"time":73.841064453125,"type":"localize"},{"count":[[17,39]],"inputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[2830592,2830592]],"outputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/2","(+ 1/2 (* 1/6 x))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","x","(* x (+ 1 (* 2 (/ 1 x))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))"]],"series":[[1.91796875,"((sqrt (- (exp x) -1)) (- (exp x) -1) (exp x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ 2 x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* 1/2 x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2))","x","-inf"],[2.4990234375,"((sqrt (- (exp x) -1)) (- (exp x) -1) (exp x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ 2 x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* 1/2 x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2))","x","inf"],[1.199951171875,"((sqrt (- (exp x) -1)) (- (exp x) -1) (exp x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ 2 x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* 1/2 x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2))","x","0"]],"time":6.595947265625,"type":"series"},{"count":[[39,38]],"egraph":[[0,8163,227,0.100584336],[4,6472,274,0.041147441],[3,3275,274,0.024012162],[2,934,280,0.012537329],[1,322,288,0.004969012],[0,102,326,0.001225139]],"inputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/2","(+ 1/2 (* 1/6 x))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","x","(* x (+ 1 (* 2 (/ 1 x))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))"]],"memory":[[-800480,44327392]],"method":["egg-herbie"],"outputs":[["(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(sqrt (+ 1 (exp x)))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+ 1 (exp x))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp x)","(exp.f64 x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","x","(* x (+ 1 (* 2 (/ 1 x))))","(+.f64 #s(literal 2 binary64) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":314.373046875,"type":"simplify"},{"count":[[17,506]],"egraph":[[0,8628,132,0.108322786],[2,1267,132,0.03994678],[1,179,132,0.007144568],[0,47,188,0.002473247],[0,29,188,0.0003519]],"inputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[-6336144,60339136]],"outputs":[["(*.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (hypot.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x)))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (sqrt.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1/2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (expm1.f64 x))))","(*.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (sqrt.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))","(pow.f64 (exp.f64 (log1p.f64 (exp.f64 x))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (expm1.f64 x))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (expm1.f64 x))) (sqrt.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (sqrt.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (expm1.f64 x))))))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (sqrt.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x) (neg.f64 (expm1.f64 x)))) (sqrt.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (sqrt.f64 (neg.f64 (expm1.f64 x))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (sqrt.f64 (expm1.f64 x)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 (exp.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (expm1.f64 x) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (expm1.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (expm1.f64 x) (expm1.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (expm1.f64 x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (expm1.f64 x)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (expm1.f64 x))))))","(*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x) (neg.f64 (expm1.f64 x))) (/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))) (-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (pow.f64 (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (expm1.f64 x))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (expm1.f64 x))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x) (neg.f64 (expm1.f64 x)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x)) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (expm1.f64 x) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 x))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x)))","(/.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (expm1.f64 x)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (expm1.f64 x)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x) (neg.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (expm1.f64 x)))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (expm1.f64 x)))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64)) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x) (neg.f64 (expm1.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (exp.f64 x) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (exp.f64 x) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (exp.f64 x) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (exp.f64 x) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (expm1.f64 x))))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (expm1.f64 x))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))) (/.f64 (expm1.f64 x) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (expm1.f64 x)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (expm1.f64 x))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (exp.f64 x))))","(+.f64 #s(literal 1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(*.f64 (fma.f64 x x #s(literal -4 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 2 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 2 binary64) x))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64)))))","(*.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) x)))))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x))) (*.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)))) (+.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)) (*.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -4 binary64))) (neg.f64 (-.f64 x #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (*.f64 (-.f64 #s(literal 2 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal 2 binary64) x) (-.f64 #s(literal 2 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -4 binary64)) (-.f64 x #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x)) (-.f64 #s(literal 2 binary64) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 x x (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 2 binary64)) (fma.f64 x x #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x))))","(fma.f64 #s(literal 4 binary64) (pow.f64 (-.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x))))","(fma.f64 #s(literal 1 binary64) x #s(literal 2 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 x #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)))","(+.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x))))","(+.f64 #s(literal 2 binary64) x)","(+.f64 x #s(literal 2 binary64))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))) (*.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)) (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))))","(fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/4 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/4 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(*.f64 (neg.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))) (*.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))","(/.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (fma.f64 x (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":406.474853515625,"type":"rewrite"},{"compiler":[[15542,2079]],"memory":[[5672416,50879824]],"time":74.8310546875,"type":"eval"},{"alts":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","done",0.23644720021076088,"binary64"],["(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","next",21.430077140690905,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",21.26242939186921,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",20.27206765264433,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","done",21.433983390690905,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","next",62.50804398678334,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))","fresh",61.86576515236263,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","next",61.465907421247174,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","fresh",60.82379520066121,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","done",17.707314726698655,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","next",20.439511418186765,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","fresh",21.097224703559007,"binary64"],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","next",21.097224703559007,"binary64"]],"compiler":[[5,5],[9,8],[23,18],[20,16],[16,13],[36,25],[35,25],[29,20],[28,20],[14,12],[24,18],[27,20],[23,16],[9,8],[36,25],[35,25],[29,20],[28,20],[24,18],[27,20],[23,16]],"count":[[546,13]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[539,6],"picked":[5,5]}],"memory":[[-2563456,24815392]],"min-error":[[0.23644720021076088,"binary64"]],"time":17.843994140625,"type":"prune"},{"egraph":[[0,8230,291,0.074175847],[9,7713,300,0.016088611],[8,4037,300,0.030122166],[7,1711,300,0.019198041],[6,1273,300,0.00788083],[5,986,300,0.006229575],[4,743,314,0.004678433],[3,383,339,0.002668009],[2,219,341,0.001503157],[1,130,344,0.000973091],[0,77,344,0.000717858],[0,52,347,0.000434784]],"inputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","#s(literal 3/16 binary64)","x","#s(literal 1/2 binary64)","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal -1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(*.f64 x x)","x","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","#s(literal 1/2 binary64)"]],"locations":[["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","cost-diff",0],["(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","cost-diff",3],["(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","cost-diff",0],["#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","cost-diff",0],["#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","cost-diff",0],["(+.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","cost-diff",0],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","cost-diff",0],["(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","cost-diff",0],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","cost-diff",0]],"memory":[[-2300416,34769488]],"method":["egg-herbie"],"outputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","#s(literal 3/16 binary64)","x","#s(literal 1/2 binary64)","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(literal -1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(*.f64 x x)","x","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","#s(literal 1/2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":305.385986328125,"type":"simplify"},{"compiler":[[225,47]],"locations":[["(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","accuracy",0.13671875],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.46484375],["(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.984375],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","accuracy",20.119745701728398],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.11328125],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","accuracy",0.23644720021076088],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))","accuracy",20.13547300580231],["#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","accuracy",41.313584519215425],["(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","accuracy",0.00390625],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","accuracy",0.23644720021076088],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)))","accuracy",19.542026740716082],["#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))","accuracy",41.446397172342714],["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","accuracy",0.00390625],["(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","accuracy",0.23644720021076088],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","accuracy",20.030688155396856],["(sqrt.f64 #s(literal 2 binary64))","accuracy",0.0],["(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.0625],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.46484375],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","accuracy",19.521084118535924]],"memory":[[2910608,45358096]],"mixsample":[[0.260986328125,"const",800],[0.217529296875,"const",4000],[3.0244140625,"adjust",800],[6.370849609375,"ival-div",0],[3.148681640625,"ival-exp",0],[0.478759765625,"adjust",4800],[0.038818359375,"ival-mult",2000],[0.492919921875,"adjust",4000],[0.177001953125,"const",400],[0.1162109375,"ival-assert",0],[1.488525390625,"ival-sub",0],[6.386962890625,"ival-sqrt",0],[8.20263671875,"const",0],[0.025146484375,"ival-add",4000],[1.472412109375,"adjust",2000],[0.0810546875,"ival-mult",800],[18.818359375,"ival-add",0],[0.1220703125,"ival-mult",400],[28.187255859375,"ival-mult",0],[4.281494140625,"ival-expm1",0],[0.02294921875,"ival-add",2000],[0.14794921875,"const",2000],[0.208740234375,"ival-add",400],[0.509765625,"adjust",2800],[0.27392578125,"ival-true",0],[0.08837890625,"ival-add",800],[0.7197265625,"exact",0],[0.044677734375,"ival-mult",4000]],"outcomes":[[9.48779296875,1,"valid",12],[8.731689453125,2,"valid",8],[6.84716796875,5,"exit",4],[88.555908203125,0,"valid",232]],"time":149.553955078125,"type":"localize"},{"count":[[23,60]],"inputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(literal 2 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))"]],"memory":[[-3959888,5342848]],"outputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","1/2","(+ 1/2 (* 3/16 x))","(/ x (sqrt 2))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(/ 1/2 (sqrt 2))","(+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))","(+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(+ 1/2 (* 1/6 x))","3/16","(+ 3/16 (* 7/192 x))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(* 3/16 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 1/2 (* x (sqrt 2))) (+ (* 3/16 (/ 1 (sqrt 2))) (/ (sqrt 2) (pow x 2)))))","(* 3/16 x)","(* x (+ 3/16 (* 1/2 (/ 1 x))))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(* x (+ 1 (/ 1 x)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 7/192 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))"]],"series":[[3.84521484375,"((sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (+ (* 3/16 x) 1/2) (/ x (sqrt 2)) (sqrt (- (exp x) -1)) (- (exp x) -1) (exp x) (+ 1 x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* (* x x) 1/2) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (* (+ (* 1/6 x) 1/2) x) x) x) (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (sqrt (- (exp x) -1)) (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (sqrt 2) (+ (* 1/6 x) 1/2) (/ 1/2 (sqrt 2)) (+ (* 7/192 x) 3/16))","x","-inf"],[4.014892578125,"((sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (+ (* 3/16 x) 1/2) (/ x (sqrt 2)) (sqrt (- (exp x) -1)) (- (exp x) -1) (exp x) (+ 1 x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* (* x x) 1/2) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (* (+ (* 1/6 x) 1/2) x) x) x) (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (sqrt (- (exp x) -1)) (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (sqrt 2) (+ (* 1/6 x) 1/2) (/ 1/2 (sqrt 2)) (+ (* 7/192 x) 3/16))","x","inf"],[4.160888671875,"((sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (+ (* 3/16 x) 1/2) (/ x (sqrt 2)) (sqrt (- (exp x) -1)) (- (exp x) -1) (exp x) (+ 1 x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* (* x x) 1/2) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (* (+ (* 1/6 x) 1/2) x) x) x) (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (sqrt (- (exp x) -1)) (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (sqrt 2) (+ (* 1/6 x) 1/2) (/ 1/2 (sqrt 2)) (+ (* 7/192 x) 3/16))","x","0"]],"time":15.822021484375,"type":"series"},{"count":[[60,59]],"egraph":[[0,8196,479,0.082805673],[3,6192,544,0.027836416],[2,1680,546,0.022736501],[1,558,610,0.007419367],[0,171,679,0.002186592]],"inputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","1/2","(+ 1/2 (* 3/16 x))","(/ x (sqrt 2))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(/ 1/2 (sqrt 2))","(+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))","(+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(+ 1/2 (* 1/6 x))","3/16","(+ 3/16 (* 7/192 x))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(* 3/16 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 1/2 (* x (sqrt 2))) (+ (* 3/16 (/ 1 (sqrt 2))) (/ (sqrt 2) (pow x 2)))))","(* 3/16 x)","(* x (+ 3/16 (* 1/2 (/ 1 x))))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(* x (+ 1 (/ 1 x)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 7/192 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))"]],"memory":[[4424960,37104000]],"method":["egg-herbie"],"outputs":[["(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 3/16 x))","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","(/ x (sqrt 2))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ 1/2 (sqrt 2))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))","(*.f64 (fma.f64 #s(literal 3/8 binary64) x #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","3/16","#s(literal 3/16 binary64)","(+ 3/16 (* 7/192 x))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)))","(* 3/16 (/ (pow x 2) (sqrt 2)))","(*.f64 (*.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) x) x)","(* (pow x 2) (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(* (pow x 2) (+ (/ 1/2 (* x (sqrt 2))) (+ (* 3/16 (/ 1 (sqrt 2))) (/ (sqrt 2) (pow x 2)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 3/8 binary64) x #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) x)","(* 3/16 x)","(*.f64 #s(literal 3/16 binary64) x)","(* x (+ 3/16 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","(sqrt (+ 1 (exp x)))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+ 1 (exp x))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp x)","(exp.f64 x)","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 7/192 (/ (pow x 2) (sqrt 2)))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64))","(* (pow x 2) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(* (pow x 2) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) x)","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x)","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) x))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* 7/192 x)","(*.f64 #s(literal 7/192 binary64) x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(* (pow x 2) (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 3/8 binary64) x #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))","(*.f64 (-.f64 (/.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) x (/.f64 (+.f64 x #s(literal 2 binary64)) x)) x) x) #s(literal -1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64))) x) (/.f64 #s(literal -7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64)) (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) x)) x) (/.f64 #s(literal -7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":268.2861328125,"type":"simplify"},{"count":[[23,620]],"egraph":[[0,9066,264,0.099145625],[2,2867,270,0.041481098],[1,344,274,0.01122048],[0,77,312,0.002310859],[0,52,315,0.000443034]],"inputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(literal 2 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))"]],"memory":[[-5176496,71662080]],"outputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64)) (pow.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64))) (neg.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(+.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","(*.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64) #s(literal 1/8 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 9/256 binary64) (*.f64 x x)) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 9/256 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 3/16 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64))))))","(/.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 9/256 binary64) (*.f64 x x)) (*.f64 x #s(literal 3/32 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64) #s(literal 1/8 binary64)) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64) #s(literal 1/8 binary64))))","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 3/16 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 9/256 binary64) (*.f64 x x)) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 3/16 binary64) x))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) x)","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (neg.f64 x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(neg.f64 (/.f64 (neg.f64 x) (sqrt.f64 #s(literal 2 binary64))))","(neg.f64 (/.f64 x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (pow.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (exp.f64 (log1p.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (neg.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (sqrt.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) #s(literal 1/2 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))) (pow.f64 (+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 x x) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)) (*.f64 x x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))) (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))))","(+.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x)","(+.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)) (*.f64 x x))) (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64)) (pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/8 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal -1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal 1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal 1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (-.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal 4 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) #s(literal 4 binary64))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64)) (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) (+.f64 #s(literal 1/8 binary64) (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))))","(fma.f64 (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 7/192 binary64) x) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 (*.f64 #s(literal 7/192 binary64) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 #s(literal 7/192 binary64) (*.f64 x (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 7/192 binary64) x) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 x (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 #s(literal 7/192 binary64) x)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 x (*.f64 #s(literal 7/192 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))) (/.f64 #s(literal 1/8 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(+.f64 (+.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(+.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (*.f64 x (sqrt.f64 #s(literal 2 binary64))))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (*.f64 x (sqrt.f64 #s(literal 2 binary64))))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (*.f64 x (sqrt.f64 #s(literal 2 binary64))))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 3 binary64))) (+.f64 #s(literal 2 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (*.f64 x (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 3 binary64))) (+.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (*.f64 x (sqrt.f64 #s(literal 2 binary64))))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (*.f64 x (sqrt.f64 #s(literal 2 binary64))))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x) (sqrt.f64 #s(literal 2 binary64)))","(+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(literal 4 binary64) #s(literal 1/4 binary64))","(pow.f64 #s(literal 2 binary64) #s(literal 1/2 binary64))","(sqrt.f64 #s(literal 2 binary64))","(exp.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))","(*.f64 (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(pow.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))","(neg.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 3 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 3 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (pow.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (pow.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 49/36864 binary64) (*.f64 x x)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 9/256 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (-.f64 #s(literal 9/256 binary64) (*.f64 #s(literal 49/36864 binary64) (*.f64 x x))) (-.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 7/192 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))","(/.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (+.f64 #s(literal 9/256 binary64) (-.f64 (*.f64 #s(literal 49/36864 binary64) (*.f64 x x)) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 49/36864 binary64) (*.f64 x x)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 #s(literal 9/256 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(+.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 3/16 binary64))","(+.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 7/192 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":356.498046875,"type":"rewrite"},{"compiler":[[28574,3443]],"memory":[[6210064,74583616]],"time":127.218994140625,"type":"eval"},{"alts":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","done",0.23644720021076088,"binary64"],["(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","done",21.430077140690905,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",21.26242939186921,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",20.27206765264433,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","done",21.433983390690905,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","next",62.50804398678334,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))","fresh",61.86576515236263,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","done",61.465907421247174,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","next",60.82379520066121,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","done",17.707314726698655,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","fresh",21.097224703559007,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","next",61.473934542328045,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (*.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) x) x)))","fresh",61.32953837172049,"binary64"],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","next",21.097224703559007,"binary64"],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","next",21.74403043603111,"binary64"],["#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) x)))","fresh",62.041814136617845,"binary64"]],"compiler":[[5,5],[9,8],[23,18],[20,16],[16,13],[36,25],[35,25],[29,20],[28,20],[14,12],[27,20],[36,27],[35,26],[25,17],[35,26],[38,28],[36,25],[35,25],[28,20],[27,20],[36,27],[35,26],[25,17],[35,26],[38,28]],"count":[[729,16]],"kept":[{"done":[5,5],"fresh":[3,3],"new":[716,6],"picked":[5,2]}],"memory":[[-7473120,32514112]],"min-error":[[0.23644720021076088,"binary64"]],"time":65.833984375,"type":"prune"},{"egraph":[[0,8041,397,0.055958641],[8,6703,417,0.015128752],[7,4453,417,0.021418082],[6,2498,423,0.014566085],[5,1537,426,0.008784023],[4,894,436,0.006929888],[3,437,461,0.00344112],[2,271,461,0.001967889],[1,157,461,0.001584238],[0,90,472,0.000904109],[0,65,472,0.000852631]],"inputs":[["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","x","#s(literal 3/16 binary64)","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","(*.f64 x x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","#s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","#s(literal 3/16 binary64)","#s(literal 1/2 binary64)","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)"]],"locations":[["(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","cost-diff",0],["#s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","cost-diff",0],["(fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","cost-diff",0],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","cost-diff",0],["#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","cost-diff",0],["(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","cost-diff",0],["(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64))","cost-diff",0],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","cost-diff",0],["(fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",1],["(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64)))","cost-diff",3]],"memory":[[2339680,25645600]],"method":["egg-herbie"],"outputs":[["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","x","#s(literal 3/16 binary64)","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","(*.f64 x x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))","#s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","#s(literal 3/16 binary64)","#s(literal 1/2 binary64)","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":206.808837890625,"type":"simplify"},{"compiler":[[299,53]],"locations":[["(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","accuracy",0.29296875],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.46484375],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","accuracy",20.119745701728398],["#s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","accuracy",41.466796061469736],["(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","accuracy",0.07421875],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.46484375],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","accuracy",19.521084118535924],["#s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","accuracy",41.46544539501826],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.11328125],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","accuracy",0.23644720021076088],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","accuracy",20.13547300580231],["#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","accuracy",41.313584519215425],["(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","accuracy",0.00390625],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","accuracy",0.23644720021076088],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","accuracy",19.542026740716082],["#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","accuracy",41.52481993549324],["(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64)))","accuracy",0.10775375976844201],["(*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)","accuracy",0.12890625],["(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","accuracy",0.13671875],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","accuracy",20.119745701728398]],"memory":[[5396432,53920912]],"mixsample":[[0.421630859375,"const",800],[0.2470703125,"const",4000],[7.648681640625,"adjust",800],[13.96142578125,"ival-div",0],[5.097900390625,"ival-exp",0],[0.785888671875,"adjust",4800],[0.05615234375,"ival-mult",2000],[0.7197265625,"adjust",4000],[0.6103515625,"const",400],[0.156005859375,"ival-assert",0],[2.2138671875,"ival-sub",0],[8.68212890625,"ival-sqrt",0],[11.256591796875,"const",0],[0.02587890625,"ival-add",4000],[3.7412109375,"adjust",2000],[24.335693359375,"ival-add",0],[0.231201171875,"ival-mult",800],[47.931640625,"ival-mult",0],[0.451416015625,"ival-mult",400],[5.025634765625,"ival-expm1",0],[0.044921875,"ival-add",2000],[0.212158203125,"const",2000],[0.373291015625,"ival-add",400],[0.69384765625,"adjust",2800],[0.388916015625,"ival-true",0],[0.97314453125,"exact",0],[0.195068359375,"ival-add",800],[0.048095703125,"ival-mult",4000]],"outcomes":[[24.414306640625,1,"valid",22],[29.2265625,2,"valid",21],[10.6640625,5,"exit",4],[114.855224609375,0,"valid",209]],"time":229.5830078125,"type":"localize"},{"count":[[23,82]],"inputs":[["(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","#s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[-2795056,6723216]],"outputs":[["(* 1/2 (sqrt 2))","(+ (* 3/16 (* x (sqrt 2))) (* 1/2 (sqrt 2)))","(+ (* 1/2 (sqrt 2)) (* x (+ (* 7/192 (* x (sqrt 2))) (* 3/16 (sqrt 2)))))","(sqrt 2)","(+ (sqrt 2) (* 1/4 (* x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 3/32 (* x (sqrt 2))) (* 1/4 (sqrt 2)))))","(+ (sqrt 2) (* x (+ (* 1/4 (sqrt 2)) (* x (+ (* 7/384 (* x (sqrt 2))) (* 3/32 (sqrt 2)))))))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(* 1/4 (sqrt 2))","(+ (* 3/32 (* x (sqrt 2))) (* 1/4 (sqrt 2)))","(+ (* 1/4 (sqrt 2)) (* x (+ (* 7/384 (* x (sqrt 2))) (* 3/32 (sqrt 2)))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 1/2 (pow x 2))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(* 1/2 (/ x (sqrt 2)))","(* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2)))))","(/ x (sqrt 2))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ 1/2 (sqrt 2))","(+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))","(+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))","(* 3/16 (/ x (sqrt 2)))","(* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2)))))","3/16","(+ 3/16 (* 7/192 x))","(* 3/16 x)","(* x (+ 3/16 (* 7/192 x)))","1/2","(+ 1/2 (* 1/6 x))","(* 7/192 (* (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (sqrt 2)) (* 3/16 (/ (sqrt 2) x))))","(* (pow x 2) (+ (* 7/192 (sqrt 2)) (+ (* 3/16 (/ (sqrt 2) x)) (* 1/2 (/ (sqrt 2) (pow x 2))))))","(* 7/384 (* (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/384 (sqrt 2)) (* 3/32 (/ (sqrt 2) x))))","(* (pow x 3) (+ (* 7/384 (sqrt 2)) (+ (* 3/32 (/ (sqrt 2) x)) (* 1/4 (/ (sqrt 2) (pow x 2))))))","(* (pow x 3) (+ (* 7/384 (sqrt 2)) (+ (* 3/32 (/ (sqrt 2) x)) (+ (* 1/4 (/ (sqrt 2) (pow x 2))) (/ (sqrt 2) (pow x 3))))))","(sqrt (+ 1 (exp x)))","(* 7/384 (* (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/384 (sqrt 2)) (* 3/32 (/ (sqrt 2) x))))","(* (pow x 2) (+ (* 7/384 (sqrt 2)) (+ (* 3/32 (/ (sqrt 2) x)) (* 1/4 (/ (sqrt 2) (pow x 2))))))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 3/16 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 1/2 (* x (sqrt 2))) (+ (* 3/16 (/ 1 (sqrt 2))) (/ (sqrt 2) (pow x 2)))))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(* 7/192 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* 7/192 (pow x 2))","(* (pow x 2) (+ 7/192 (* 3/16 (/ 1 x))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/2 (/ (sqrt 2) x)) (* -3/16 (sqrt 2))) x)) (* 7/192 (sqrt 2))))","(* -1 (* (pow x 3) (+ (* -3/32 (/ (sqrt 2) x)) (* -7/384 (sqrt 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 3/32 (sqrt 2)) (* 1/4 (/ (sqrt 2) x))) x)) (* -7/384 (sqrt 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sqrt 2) x)) (* -1/4 (sqrt 2))) x)) (* 3/32 (sqrt 2))) x)) (* -7/384 (sqrt 2)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/4 (/ (sqrt 2) x)) (* -3/32 (sqrt 2))) x)) (* 7/384 (sqrt 2))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))","(* (pow x 2) (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))"]],"series":[[7.476806640625,"((+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) (+ (* (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) x) (sqrt 2)) (sqrt (- (exp x) -1)) (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (* (* x x) 1/2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) (* x x)) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (* (/ x (sqrt 2)) (+ (* 3/16 x) 1/2)) (/ x (sqrt 2)) (sqrt (- (exp x) -1)) (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (+ (* 7/192 x) 3/16) (* (+ (* 7/192 x) 3/16) x) (+ (* 1/6 x) 1/2))","x","-inf"],[8.131103515625,"((+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) (+ (* (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) x) (sqrt 2)) (sqrt (- (exp x) -1)) (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (* (* x x) 1/2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) (* x x)) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (* (/ x (sqrt 2)) (+ (* 3/16 x) 1/2)) (/ x (sqrt 2)) (sqrt (- (exp x) -1)) (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (+ (* 7/192 x) 3/16) (* (+ (* 7/192 x) 3/16) x) (+ (* 1/6 x) 1/2))","x","inf"],[4.011962890625,"((+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) (+ (* (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) x) (sqrt 2)) (sqrt (- (exp x) -1)) (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (* (* x x) 1/2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) (* x x)) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (* (/ x (sqrt 2)) (+ (* 3/16 x) 1/2)) (/ x (sqrt 2)) (sqrt (- (exp x) -1)) (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (+ (* 7/192 x) 3/16) (* (+ (* 7/192 x) 3/16) x) (+ (* 1/6 x) 1/2))","x","0"]],"time":21.455078125,"type":"series"},{"count":[[82,81]],"egraph":[[0,8152,812,0.103565024],[3,6163,887,0.026872385],[2,2658,923,0.021710907],[1,843,1015,0.015769561],[0,257,1109,0.003626427]],"inputs":[["(* 1/2 (sqrt 2))","(+ (* 3/16 (* x (sqrt 2))) (* 1/2 (sqrt 2)))","(+ (* 1/2 (sqrt 2)) (* x (+ (* 7/192 (* x (sqrt 2))) (* 3/16 (sqrt 2)))))","(sqrt 2)","(+ (sqrt 2) (* 1/4 (* x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 3/32 (* x (sqrt 2))) (* 1/4 (sqrt 2)))))","(+ (sqrt 2) (* x (+ (* 1/4 (sqrt 2)) (* x (+ (* 7/384 (* x (sqrt 2))) (* 3/32 (sqrt 2)))))))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(* 1/4 (sqrt 2))","(+ (* 3/32 (* x (sqrt 2))) (* 1/4 (sqrt 2)))","(+ (* 1/4 (sqrt 2)) (* x (+ (* 7/384 (* x (sqrt 2))) (* 3/32 (sqrt 2)))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 1/2 (pow x 2))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(* 1/2 (/ x (sqrt 2)))","(* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2)))))","(/ x (sqrt 2))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ 1/2 (sqrt 2))","(+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))","(+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))","(* 3/16 (/ x (sqrt 2)))","(* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2)))))","3/16","(+ 3/16 (* 7/192 x))","(* 3/16 x)","(* x (+ 3/16 (* 7/192 x)))","1/2","(+ 1/2 (* 1/6 x))","(* 7/192 (* (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (sqrt 2)) (* 3/16 (/ (sqrt 2) x))))","(* (pow x 2) (+ (* 7/192 (sqrt 2)) (+ (* 3/16 (/ (sqrt 2) x)) (* 1/2 (/ (sqrt 2) (pow x 2))))))","(* 7/384 (* (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/384 (sqrt 2)) (* 3/32 (/ (sqrt 2) x))))","(* (pow x 3) (+ (* 7/384 (sqrt 2)) (+ (* 3/32 (/ (sqrt 2) x)) (* 1/4 (/ (sqrt 2) (pow x 2))))))","(* (pow x 3) (+ (* 7/384 (sqrt 2)) (+ (* 3/32 (/ (sqrt 2) x)) (+ (* 1/4 (/ (sqrt 2) (pow x 2))) (/ (sqrt 2) (pow x 3))))))","(sqrt (+ 1 (exp x)))","(* 7/384 (* (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/384 (sqrt 2)) (* 3/32 (/ (sqrt 2) x))))","(* (pow x 2) (+ (* 7/384 (sqrt 2)) (+ (* 3/32 (/ (sqrt 2) x)) (* 1/4 (/ (sqrt 2) (pow x 2))))))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 3/16 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 1/2 (* x (sqrt 2))) (+ (* 3/16 (/ 1 (sqrt 2))) (/ (sqrt 2) (pow x 2)))))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(* 7/192 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* 7/192 (pow x 2))","(* (pow x 2) (+ 7/192 (* 3/16 (/ 1 x))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/2 (/ (sqrt 2) x)) (* -3/16 (sqrt 2))) x)) (* 7/192 (sqrt 2))))","(* -1 (* (pow x 3) (+ (* -3/32 (/ (sqrt 2) x)) (* -7/384 (sqrt 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 3/32 (sqrt 2)) (* 1/4 (/ (sqrt 2) x))) x)) (* -7/384 (sqrt 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sqrt 2) x)) (* -1/4 (sqrt 2))) x)) (* 3/32 (sqrt 2))) x)) (* -7/384 (sqrt 2)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/4 (/ (sqrt 2) x)) (* -3/32 (sqrt 2))) x)) (* 7/384 (sqrt 2))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))","(* (pow x 2) (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))"]],"memory":[[2026656,45698880]],"method":["egg-herbie"],"outputs":[["(* 1/2 (sqrt 2))","(*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))","(+ (* 3/16 (* x (sqrt 2))) (* 1/2 (sqrt 2)))","(*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(+ (* 1/2 (sqrt 2)) (* x (+ (* 7/192 (* x (sqrt 2))) (* 3/16 (sqrt 2)))))","(*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/4 (* x (sqrt 2))))","(*.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 3/32 (* x (sqrt 2))) (* 1/4 (sqrt 2)))))","(fma.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 3/32 binary64) x #s(literal 1/4 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/4 (sqrt 2)) (* x (+ (* 7/384 (* x (sqrt 2))) (* 3/32 (sqrt 2)))))))","(fma.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64)) #s(literal 1/4 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(* 1/4 (sqrt 2))","(*.f64 #s(literal 1/4 binary64) (sqrt.f64 #s(literal 2 binary64)))","(+ (* 3/32 (* x (sqrt 2))) (* 1/4 (sqrt 2)))","(*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 3/32 binary64) x #s(literal 1/4 binary64)))","(+ (* 1/4 (sqrt 2)) (* x (+ (* 7/384 (* x (sqrt 2))) (* 3/32 (sqrt 2)))))","(*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64)) #s(literal 1/4 binary64)))","2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(* 1/2 (/ x (sqrt 2)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x)","(* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2)))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(/ x (sqrt 2))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(/ 1/2 (sqrt 2))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","(* 3/16 (/ x (sqrt 2)))","(*.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) x)","(* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2)))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","3/16","#s(literal 3/16 binary64)","(+ 3/16 (* 7/192 x))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(* 3/16 x)","(*.f64 #s(literal 3/16 binary64) x)","(* x (+ 3/16 (* 7/192 x)))","(*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* 7/192 (* (pow x 2) (sqrt 2)))","(*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) x) #s(literal 7/192 binary64))","(* (pow x 2) (+ (* 7/192 (sqrt 2)) (* 3/16 (/ (sqrt 2) x))))","(*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) x)","(* (pow x 2) (+ (* 7/192 (sqrt 2)) (+ (* 3/16 (/ (sqrt 2) x)) (* 1/2 (/ (sqrt 2) (pow x 2))))))","(*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64)) #s(literal 7/192 binary64))) x) x)","(* 7/384 (* (pow x 3) (sqrt 2)))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 7/384 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(* (pow x 3) (+ (* 7/384 (sqrt 2)) (* 3/32 (/ (sqrt 2) x))))","(*.f64 (*.f64 x x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64))))","(* (pow x 3) (+ (* 7/384 (sqrt 2)) (+ (* 3/32 (/ (sqrt 2) x)) (* 1/4 (/ (sqrt 2) (pow x 2))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (+.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 3/32 binary64)) (*.f64 #s(literal 7/384 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 7/384 (sqrt 2)) (+ (* 3/32 (/ (sqrt 2) x)) (+ (* 1/4 (/ (sqrt 2) (pow x 2))) (/ (sqrt 2) (pow x 3))))))","(*.f64 (fma.f64 #s(literal 7/384 binary64) (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (+.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 3/32 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (pow.f64 x #s(literal 3 binary64)))","(sqrt (+ 1 (exp x)))","(sqrt.f64 (+.f64 #s(literal 1 binary64) (exp.f64 x)))","(* 7/384 (* (pow x 2) (sqrt 2)))","(*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) x) #s(literal 7/384 binary64))","(* (pow x 2) (+ (* 7/384 (sqrt 2)) (* 3/32 (/ (sqrt 2) x))))","(*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64))) x)","(* (pow x 2) (+ (* 7/384 (sqrt 2)) (+ (* 3/32 (/ (sqrt 2) x)) (* 1/4 (/ (sqrt 2) (pow x 2))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (+.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 3/32 binary64)) (*.f64 #s(literal 7/384 binary64) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x x))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(*.f64 x (fma.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/6 binary64))))","(* 3/16 (/ (pow x 2) (sqrt 2)))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))","(* (pow x 2) (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(* (pow x 2) (+ (/ 1/2 (* x (sqrt 2))) (+ (* 3/16 (/ 1 (sqrt 2))) (/ (sqrt 2) (pow x 2)))))","(*.f64 x (fma.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) x (-.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(*.f64 (/.f64 #s(literal 7/192 binary64) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) x)","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64)) (/.f64 #s(literal 7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64)) (/.f64 #s(literal 7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* 7/192 (/ (pow x 2) (sqrt 2)))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64))","(* (pow x 2) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(* (pow x 2) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64)) (/.f64 #s(literal 7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x x))","(* 7/192 x)","(*.f64 #s(literal 7/192 binary64) x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(* 7/192 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 7/192 binary64))","(* (pow x 2) (+ 7/192 (* 3/16 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/2 (/ (sqrt 2) x)) (* -3/16 (sqrt 2))) x)) (* 7/192 (sqrt 2))))","(*.f64 x (fma.f64 (*.f64 #s(literal 7/192 binary64) (sqrt.f64 #s(literal 2 binary64))) x (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 #s(literal -3/16 binary64) (/.f64 #s(literal -1/2 binary64) x))))))","(* -1 (* (pow x 3) (+ (* -3/32 (/ (sqrt 2) x)) (* -7/384 (sqrt 2)))))","(*.f64 (*.f64 x x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 3/32 (sqrt 2)) (* 1/4 (/ (sqrt 2) x))) x)) (* -7/384 (sqrt 2)))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 7/384 binary64) (sqrt.f64 #s(literal 2 binary64)) (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 3/32 binary64))) x)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sqrt 2) x)) (* -1/4 (sqrt 2))) x)) (* 3/32 (sqrt 2))) x)) (* -7/384 (sqrt 2)))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 7/384 binary64) (sqrt.f64 #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal 3/32 binary64) (sqrt.f64 #s(literal 2 binary64)) (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 #s(literal -1/4 binary64) (/.f64 #s(literal -1 binary64) x))) (neg.f64 x))) x)))","(* (pow x 2) (+ (* -1 (/ (+ (* -1/4 (/ (sqrt 2) x)) (* -3/32 (sqrt 2))) x)) (* 7/384 (sqrt 2))))","(*.f64 x (fma.f64 (*.f64 #s(literal 7/384 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 #s(literal -3/32 binary64) (/.f64 #s(literal -1/4 binary64) x))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))","(*.f64 (-.f64 #s(literal 1/6 binary64) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 1/2 binary64))) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))))","(*.f64 x (fma.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) x (-.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64))) x) (/.f64 #s(literal -7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64)) (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) x)) x) (/.f64 #s(literal -7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":304.883056640625,"type":"simplify"},{"count":[[23,767]],"egraph":[[0,8289,359,0.087354318],[2,3030,377,0.044431805],[1,372,377,0.014620285],[0,90,426,0.003732012],[0,65,426,0.00047631]],"inputs":[["(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","#s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[2899680,73362016]],"outputs":[["(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)))","(pow.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 3/2 binary64))) (+.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 3/2 binary64))) (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 3/2 binary64)))))","(fma.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(fma.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 x (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -2 binary64)) (pow.f64 (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))) (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) #s(literal 2 binary64))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -2 binary64))) (neg.f64 (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -2 binary64)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (+.f64 #s(literal 2 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))) (fma.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) x) #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (*.f64 #s(literal 1/2 binary64) x) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 x (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(+.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 x #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64)) (pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))) #s(literal -1/2 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (pow.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))","(pow.f64 (/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal -1/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal -1/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal -1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal 1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) #s(literal 1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal 4 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x))) #s(literal 4 binary64))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64)) (/.f64 (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (pow.f64 #s(literal 1/2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 2 binary64) (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) (+.f64 #s(literal 1/8 binary64) (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) #s(literal 4 binary64))))","(/.f64 (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))) #s(literal -2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1/8 binary64)) (/.f64 (*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) #s(literal 2 binary64))","(neg.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) #s(literal -2 binary64)))","(fma.f64 (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 1/2 binary64) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(fma.f64 (*.f64 x #s(literal 7/192 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 x #s(literal 7/192 binary64)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(fma.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 x (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 x (*.f64 #s(literal 7/192 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 x #s(literal 7/192 binary64))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 #s(literal 7/192 binary64) (*.f64 x (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (/.f64 (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))) (/.f64 #s(literal 1/8 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))) #s(literal -1 binary64)))","(+.f64 (+.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(+.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(+.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(*.f64 #s(literal 1/2 binary64) (*.f64 x x))","(*.f64 x (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (neg.f64 x)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (neg.f64 x)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (neg.f64 x)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (*.f64 #s(literal 1 binary64) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (*.f64 x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (*.f64 #s(literal 1 binary64) x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (*.f64 x #s(literal 1 binary64)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 #s(literal 1 binary64) x))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1 binary64)))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (*.f64 #s(literal 1 binary64) x))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (*.f64 x #s(literal 1 binary64)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (neg.f64 x))))","(+.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","(+.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)) (*.f64 #s(literal 1 binary64) x))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)) (*.f64 x #s(literal 1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)) x)","(+.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))","#s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(*.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(*.f64 x (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(*.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))","(pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 #s(literal 3/16 binary64) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 #s(literal 3/16 binary64) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 #s(literal 3/16 binary64) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 #s(literal 3/16 binary64) x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 3/16 binary64) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 3/16 binary64) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 3/16 binary64) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 3/16 binary64) x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 x (*.f64 #s(literal 3/16 binary64) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (*.f64 #s(literal 3/16 binary64) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (*.f64 #s(literal 3/16 binary64) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 x (*.f64 #s(literal 3/16 binary64) x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (*.f64 #s(literal 3/16 binary64) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 3/16 binary64) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3/16 binary64) x) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (*.f64 #s(literal 3/16 binary64) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 3/16 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (*.f64 #s(literal 3/16 binary64) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 3/16 binary64) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3/16 binary64) x) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (*.f64 #s(literal 3/16 binary64) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 3/16 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (*.f64 #s(literal 3/16 binary64) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 3/16 binary64) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3/16 binary64) x) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (*.f64 #s(literal 3/16 binary64) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 3/16 binary64) x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) (*.f64 #s(literal 3/16 binary64) x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 3/16 binary64) x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 1 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 #s(literal 3/16 binary64) x) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 x (*.f64 #s(literal 3/16 binary64) x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 3/16 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 27/4096 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64)))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 27/4096 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) #s(literal 2 binary64))) (/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 27/4096 binary64) (pow.f64 (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (neg.f64 x)) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 27/4096 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (neg.f64 x)) (*.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 27/4096 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (fma.f64 #s(literal 27/4096 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) x) (*.f64 (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 27/4096 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 27/4096 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64))))))","(/.f64 (*.f64 x (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 3/16 binary64) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 x (fma.f64 #s(literal 27/4096 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 9/256 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 3/32 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 3/16 binary64) x) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 3/16 binary64) x) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x))","(fma.f64 (*.f64 #s(literal 3/16 binary64) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x))","(fma.f64 #s(literal 1/2 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x))","(fma.f64 #s(literal 3/16 binary64) (*.f64 x (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 #s(literal 3/16 binary64) x)) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 x (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(+.f64 (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) x))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) x)","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(/.f64 (*.f64 x #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (neg.f64 x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(neg.f64 (/.f64 (neg.f64 x) (sqrt.f64 #s(literal 2 binary64))))","(neg.f64 (/.f64 x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x)) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x)) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x)) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 3 binary64))) (+.f64 #s(literal 2 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) x)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 3 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x)) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x)) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x))","(fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 x #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) (sqrt.f64 #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(+.f64 (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x) (sqrt.f64 #s(literal 2 binary64)))","(+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))) x))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))","(*.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 x (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(*.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))))","(pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) #s(literal -1 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 x #s(literal 7/192 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal 3/16 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 x #s(literal 7/192 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 3/16 binary64) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 x #s(literal 7/192 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 3/16 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 x #s(literal 7/192 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 7/192 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) #s(literal 3/16 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 7/192 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 3/16 binary64) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 7/192 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 3/16 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 7/192 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 3/16 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal 3/16 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 3/16 binary64) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 3/16 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) #s(literal 3/16 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 3/16 binary64) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 3/16 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 3/16 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal 3/16 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 3/16 binary64) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 3/16 binary64) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 x (*.f64 x #s(literal 7/192 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal 3/16 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (*.f64 x #s(literal 7/192 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 3/16 binary64) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (*.f64 x #s(literal 7/192 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 3/16 binary64) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 x (*.f64 x #s(literal 7/192 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) #s(literal 3/16 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 3/16 binary64) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x #s(literal 7/192 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 3/16 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 x #s(literal 7/192 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 3/16 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (*.f64 x #s(literal 7/192 binary64))))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 7/192 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x #s(literal 7/192 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x #s(literal 7/192 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (*.f64 x #s(literal 7/192 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x #s(literal 7/192 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (*.f64 x #s(literal 7/192 binary64))))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 7/192 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x #s(literal 7/192 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x #s(literal 7/192 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (*.f64 x #s(literal 7/192 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x #s(literal 7/192 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (*.f64 x #s(literal 7/192 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 7/192 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x #s(literal 7/192 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x #s(literal 7/192 binary64)) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (*.f64 x #s(literal 7/192 binary64))))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 7/192 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 3/16 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) (*.f64 x #s(literal 7/192 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 3/16 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 7/192 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 3/16 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 x #s(literal 7/192 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 3/16 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 x #s(literal 7/192 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 x #s(literal 7/192 binary64)) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 x (*.f64 x #s(literal 7/192 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 3/16 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 x #s(literal 7/192 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))","(/.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)))","(/.f64 (*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(fma.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(fma.f64 (*.f64 x #s(literal 7/192 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 x #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)))","(fma.f64 (*.f64 #s(literal 3/16 binary64) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)))","(fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 3/16 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)))","(fma.f64 x (*.f64 #s(literal 7/192 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 x #s(literal 7/192 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(fma.f64 #s(literal 7/192 binary64) (*.f64 x (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)))","(+.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3/16 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)))","(*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (pow.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (pow.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 9/256 binary64) (*.f64 #s(literal 49/36864 binary64) (*.f64 x x))) (-.f64 #s(literal 3/16 binary64) (*.f64 x #s(literal 7/192 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))","(/.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (+.f64 #s(literal 9/256 binary64) (-.f64 (*.f64 #s(literal 49/36864 binary64) (*.f64 x x)) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))","(fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 49/36864 binary64) (*.f64 x x)) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))) (/.f64 #s(literal 9/256 binary64) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64))))","(+.f64 (*.f64 x #s(literal 7/192 binary64)) #s(literal 3/16 binary64))","(+.f64 #s(literal 3/16 binary64) (*.f64 x #s(literal 7/192 binary64)))","(*.f64 (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)) x)","(*.f64 x (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (fma.f64 x #s(literal 7/192 binary64) #s(literal -3/16 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(fma.f64 (*.f64 x #s(literal 7/192 binary64)) x (*.f64 #s(literal 3/16 binary64) x))","(fma.f64 #s(literal 3/16 binary64) x (*.f64 (*.f64 x #s(literal 7/192 binary64)) x))","(fma.f64 #s(literal 3/16 binary64) x (*.f64 x (*.f64 x #s(literal 7/192 binary64))))","(fma.f64 x (*.f64 x #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) x))","(fma.f64 x #s(literal 3/16 binary64) (*.f64 (*.f64 x #s(literal 7/192 binary64)) x))","(fma.f64 x #s(literal 3/16 binary64) (*.f64 x (*.f64 x #s(literal 7/192 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal 7/192 binary64)) x) (*.f64 #s(literal 3/16 binary64) x))","(+.f64 (*.f64 x (*.f64 x #s(literal 7/192 binary64))) (*.f64 #s(literal 3/16 binary64) x))","(+.f64 (*.f64 #s(literal 3/16 binary64) x) (*.f64 (*.f64 x #s(literal 7/192 binary64)) x))","(+.f64 (*.f64 #s(literal 3/16 binary64) x) (*.f64 x (*.f64 x #s(literal 7/192 binary64))))","(*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":318.425048828125,"type":"rewrite"},{"compiler":[[38998,4387]],"memory":[[4590720,94429552]],"time":223.29296875,"type":"eval"},{"alts":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","done",0.23644720021076088,"binary64"],["(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","done",21.430077140690905,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",21.26242939186921,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",20.27206765264433,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","done",21.433983390690905,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","done",62.50804398678334,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))","fresh",61.86576515236263,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","done",61.465907421247174,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","done",60.82379520066121,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","done",17.707314726698655,"binary64"],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","fresh",21.097224703559007,"binary64"],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 #s(approx (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64)) #s(literal 7/192 binary64))) x) x)) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","fresh",42.94266888722725,"binary64"],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64))) x)) x (sqrt.f64 #s(literal 2 binary64))))","fresh",21.74403043603111,"binary64"],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64)) #s(literal 1/4 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","fresh",21.097224703559007,"binary64"],["#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (*.f64 x (fma.f64 (*.f64 #s(literal 7/384 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 #s(literal -3/32 binary64) (/.f64 #s(literal -1/4 binary64) x))))))) x (sqrt.f64 #s(literal 2 binary64))))","fresh",21.097224703559007,"binary64"],["#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) x) (sqrt 2)) (*.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","fresh",21.208680167189495,"binary64"],["#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) x) (sqrt 2)) (*.f64 (*.f64 x x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64))))))","fresh",62.041814136617845,"binary64"]],"compiler":[[772,188],[5,5],[9,8],[23,18],[20,16],[16,13],[36,25],[35,25],[29,20],[28,20],[14,12],[25,17],[45,33],[37,27],[38,28],[45,32],[36,27],[40,29]],"count":[[896,17]],"kept":[{"done":[7,7],"fresh":[4,1],"new":[880,7],"picked":[5,2]}],"memory":[[-2769488,41057040]],"min-error":[[0.23644720021076088,"binary64"]],"time":31.366943359375,"type":"prune"},{"accuracy":[0.23644720021076088],"baseline":[0.23644720021076088],"branch":[["x",0.23644720021076088,1,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0.23644720021076088,1,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.23644720021076088,1,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[27,1]],"inputs":[["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) x) (sqrt 2)) (*.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) x) (sqrt 2)) (*.f64 (*.f64 x x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64))))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (*.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) x) x)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) x)))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64))) x)) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64)) #s(literal 1/4 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (*.f64 x (fma.f64 (*.f64 #s(literal 7/384 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 #s(literal -3/32 binary64) (/.f64 #s(literal -1/4 binary64) x))))))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 #s(approx (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64)) #s(literal 7/192 binary64))) x) x)) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[-4967664,11693632]],"oracle":[63.91285629520042],"outputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))"]],"repr":["binary64"],"time":22.39404296875,"times":[[6.47900390625,"x"],[5.72705078125,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[6.945068359375,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[17.70731472669865],"baseline":[17.707314726698655],"branch":[["x",17.70731472669865,1,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",17.70731472669865,1,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",17.70731472669865,1,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[25,1]],"inputs":[["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(sqrt.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) x) (sqrt 2)) (*.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) x) (sqrt 2)) (*.f64 (*.f64 x x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64))))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (*.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) x) x)))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (+ (* 3/16 x) 1/2) (/ x (sqrt 2))) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))))","#s(approx (sqrt (- (exp x) -1)) #s(approx (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) x)))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64))) x)) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x (fma.f64 #s(literal 7/384 binary64) x #s(literal 3/32 binary64)) #s(literal 1/4 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 #s(approx (/ (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) 2) (*.f64 x (fma.f64 (*.f64 #s(literal 7/384 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 #s(literal -3/32 binary64) (/.f64 #s(literal -1/4 binary64) x))))))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (- (exp x) -1)) (fma.f64 (/.f64 #s(approx (+ (* (* (+ (* 7/192 x) 3/16) x) (sqrt 2)) (* (sqrt 2) 1/2)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64)) #s(literal 7/192 binary64))) x) x)) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))"]],"link":["."],"memory":[[3218192,11214976]],"name":["sqrtexp (problem 3.4.4)"],"oracle":[63.07974194466833],"outputs":[["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]],"repr":["binary64"],"time":23.5888671875,"times":[[6.1640625,"x"],[7.48291015625,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[7.221923828125,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"egraph":[[8,6330,12,0.026666012],[7,2478,12,0.028678322],[6,724,12,0.013812836],[5,284,12,0.003654831],[4,111,14,0.001004822],[3,66,19,0.000534081],[2,38,19,0.000442737],[1,28,19,0.000346255],[0,15,19,0.000322498]],"inputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]],"memory":[[2758896,11018608]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]],"stop":[["node limit",1]],"time":97.462158203125,"type":"simplify"},{"compiler":[[19,16]],"memory":[[384720,384720]],"stop":[["fuel",1]],"time":0.760009765625,"type":"soundness"},{"compiler":[[19,16],[19,16],[12,10],[12,10]],"memory":[[-11506384,11340240]],"remove-preprocessing":[[],[],[]],"time":26.333984375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.016845703125,"type":"end"}]