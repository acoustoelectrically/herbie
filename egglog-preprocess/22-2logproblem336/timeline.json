[{"memory":[[14864,14864]],"time":0.031005859375,"type":"start"},{"compiler":[[15,10]],"memory":[[83584,83584]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.967569162616416,"unknown":0.0,"valid":0.03243083738358394}],[0,{"invalid":0.0,"precondition":0.967569162616416,"unknown":0.03243083738358394,"valid":0.0}]],"time":0.4208984375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.967569162616416,"valid":0.03243083738358394}],"memory":[[11409664,289475536]],"mixsample":[[147.85009765625,"adjust",800],[101.973876953125,"ival-log",400],[3.956787109375,"ival-assert",0],[96.1826171875,"ival-sub",0],[174.92919921875,"ival-log",0],[226.081298828125,"ival-log1p",0],[15.340576171875,"ival-and",0],[0.59912109375,"ival-sub",400],[30.4833984375,"ival->",0],[121.52392578125,"ival-log1p",400],[13.1806640625,"exact",0],[26.910400390625,"ival-<",0]],"outcomes":[[1067.634521484375,1,"valid",6456],[138.022705078125,0,"valid",1800]],"time":1530.941162109375,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[249,0,1,6]],"explanations":[["-.f64","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","cancellation",250,0,[],[[]]]],"fperrors":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",249,1,[34.72797508636335],0,false],["N",0,0,false,0,false],["(log.f64 N)",0,0,false,0,false],["(+.f64 N #s(literal 1 binary64))",0,0,false,0,false],["(log.f64 (+.f64 N #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false]],"freqs":[[1,250],[0,6]],"maybe-confusion":[[249,0,0,1,0,6]],"memory":[[737472,42802560]],"mixsample":[[8.79052734375,"adjust",800],[2.644287109375,"ival-add",0],[5.320556640625,"ival-log",400],[0.198974609375,"ival-assert",0],[4.78271484375,"ival-sub",0],[10.09228515625,"ival-log",0],[0.43408203125,"ival-true",0],[10.23828125,"ival-log1p",0],[0.03515625,"ival-sub",400],[5.480224609375,"ival-log1p",400],[0.37646484375,"exact",0]],"outcomes":[[56.9921875,1,"valid",384],[8.21435546875,0,"valid",128]],"time":114.60791015625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,5,0.000677801],[10,182,7,0.000767951],[9,174,7,0.000931962],[8,158,7,0.001048639],[7,109,7,0.000894399],[6,80,7,0.000772524],[5,48,7,0.000445798],[4,33,7,0.00022781],[3,25,7,0.000175628],[2,19,7,0.000130663],[1,15,7,0.000145219],[0,10,7,0.000240586],[0,6,7,0.000103485]],"inputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"memory":[[-1767600,14149120]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":161.344970703125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.086181640625,"type":"eval"},{"alts":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","next",47.36340264876877,"binary64"]],"compiler":[[7,6]],"memory":[[314928,314928]],"time":0.599853515625,"type":"prune"},{"egraph":[[0,182,14,0.00057745],[10,182,18,0.000839327],[9,174,18,0.000868007],[8,158,18,0.000854281],[7,109,18,0.000732434],[6,80,18,0.000722791],[5,48,18,0.000515906],[4,33,18,0.000231668],[3,25,18,0.00018396],[2,19,18,0.000133644],[1,15,18,0.0001217],[0,10,18,0.00015975],[0,6,18,9.7211e-5]],"inputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(log.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(log.f64 N)"]],"locations":[["(log.f64 N)","cost-diff",0],["(+.f64 N #s(literal 1 binary64))","cost-diff",0],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","cost-diff",0],["(log.f64 (+.f64 N #s(literal 1 binary64)))","cost-diff",2]],"memory":[[856992,856992]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))","(log.f64 (+.f64 N #s(literal 1 binary64)))","(log1p.f64 N)","(+.f64 N #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) N)","N","#s(literal 1 binary64)","(log.f64 N)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.166015625,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 N #s(literal 1 binary64))","accuracy",0.0],["(log.f64 N)","accuracy",0.0],["(log.f64 (+.f64 N #s(literal 1 binary64)))","accuracy",0.0078125],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","accuracy",47.35433261714812]],"memory":[[452752,9666240]],"mixsample":[[4.512451171875,"adjust",800],[1.215576171875,"ival-add",0],[2.409423828125,"ival-log",400],[0.116943359375,"ival-assert",0],[3.22802734375,"ival-sub",0],[4.54833984375,"ival-log",0],[0.209228515625,"ival-true",0],[5.7333984375,"ival-log1p",0],[0.016357421875,"ival-sub",400],[2.8251953125,"ival-log1p",400],[0.17236328125,"exact",0]],"outcomes":[[30.549072265625,1,"valid",192],[3.892578125,0,"valid",64]],"time":41.52099609375,"type":"localize"},{"count":[[4,27]],"inputs":[["(log.f64 (+.f64 N #s(literal 1 binary64)))","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(+.f64 N #s(literal 1 binary64))","(log.f64 N)"]],"memory":[[6277744,21183104]],"outputs":[["N","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","1","(+ 1 N)","(log N)","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* N (+ 1 (/ 1 N)))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))"]],"series":[[27.22900390625,"((log (+ N 1)) (- (log (+ N 1)) (log N)) (+ N 1) (log N))","N","-inf"],[9.69189453125,"((log (+ N 1)) (- (log (+ N 1)) (log N)) (+ N 1) (log N))","N","inf"],[28.579833984375,"((log (+ N 1)) (- (log (+ N 1)) (log N)) (+ N 1) (log N))","N","0"]],"time":65.97412109375,"type":"series"},{"count":[[27,26]],"egraph":[[0,8152,214,0.064377311],[6,7369,223,0.020259884],[5,6313,223,0.032941755],[4,4231,223,0.028641049],[3,1601,227,0.022415713],[2,588,233,0.005596564],[1,250,234,0.001921948],[0,88,258,0.00088714]],"inputs":[["N","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","1","(+ 1 N)","(log N)","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* N (+ 1 (/ 1 N)))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))"]],"memory":[[459104,31674800]],"method":["egg-herbie"],"outputs":[["N","(* N (+ 1 (* -1/2 N)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(fma.f64 (*.f64 N N) #s(literal -1/2 binary64) (-.f64 N (log.f64 N)))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N) N (-.f64 N (log.f64 N)))","1","#s(literal 1 binary64)","(+ 1 N)","(+.f64 #s(literal 1 binary64) N)","(log N)","(log.f64 N)","(* -1 (log (/ 1 N)))","(log.f64 N)","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(-.f64 (log.f64 N) (/.f64 #s(literal -1 binary64) N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(-.f64 (log.f64 N) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(-.f64 (log.f64 N) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(* N (+ 1 (/ 1 N)))","(+.f64 #s(literal 1 binary64) N)","(+ (log -1) (* -1 (log (/ -1 N))))","(+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)"]],"stop":[["iter limit",1],["node limit",1]],"time":264.87890625,"type":"simplify"},{"count":[[4,425]],"egraph":[[0,8874,12,0.078195455],[3,2628,15,0.034608205],[2,269,15,0.008119255],[1,42,15,0.001003134],[0,10,15,0.000663949],[0,6,16,9.126e-5]],"inputs":[["(log.f64 (+.f64 N #s(literal 1 binary64)))","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(+.f64 N #s(literal 1 binary64))","(log.f64 N)"]],"memory":[[-726368,57814704]],"outputs":[["(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 1 binary64))","(log1p.f64 N)","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))))","(neg.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(neg.f64 (log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(neg.f64 (neg.f64 (log1p.f64 N)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log.f64 (-.f64 N #s(literal 1 binary64))) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) (log1p.f64 (pow.f64 N #s(literal 3 binary64))))","(-.f64 (/.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))) (/.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))) (/.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","(-.f64 (/.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))) (/.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))) (/.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (*.f64 N N)))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (log.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))) (log.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))) (log.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)))) (log.f64 (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (*.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64)))) (log.f64 (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)))) (log.f64 (neg.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 N N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (-.f64 N #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 (-.f64 (*.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))) (log.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 9 binary64))) (log.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log1p.f64 (neg.f64 N)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 N)))","(exp.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (log1p.f64 N)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log1p.f64 N))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))) (log1p.f64 (fma.f64 N N N)))","(+.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (fma.f64 N N N)))","(+.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 N #s(literal 4 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))))) (log.f64 (+.f64 (fma.f64 N N #s(literal -1 binary64)) N)))","(+.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64))))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N)) (pow.f64 N #s(literal 4 binary64)))))","(+.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (fma.f64 N N #s(literal -1 binary64)))) (log1p.f64 N))","(+.f64 (neg.f64 (log.f64 (-.f64 N #s(literal 1 binary64)))) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","(+.f64 (neg.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (log1p.f64 (pow.f64 N #s(literal 3 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(+.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log.f64 (pow.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 N #s(literal 1 binary64)))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(+.f64 #s(literal 0 binary64) (log1p.f64 N))","(+.f64 (log1p.f64 N) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(+.f64 (log1p.f64 N) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(+.f64 (log1p.f64 N) #s(literal 0 binary64))","(log.f64 (+.f64 #s(literal 1 binary64) N))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))) (*.f64 (log.f64 N) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))))) (*.f64 (log.f64 N) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))))) (*.f64 (log.f64 N) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))))) (*.f64 (log.f64 N) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))) (log.f64 N) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (log.f64 N)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))) (log.f64 N) (*.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (log.f64 N)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (*.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))) (log.f64 N) (*.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (log.f64 N)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (*.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))) (log.f64 N) (*.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (log.f64 N)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (*.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N))))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (neg.f64 (log.f64 N)) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) (fma.f64 N N #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(neg.f64 (log.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) N)))","(neg.f64 (-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N))))","(neg.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log.f64 N) #s(literal -1 binary64) (log1p.f64 N))","(fma.f64 (log1p.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(-.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 9 binary64)) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 9 binary64)) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 N #s(literal -1 binary64)))) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (*.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (pow.f64 N #s(literal -1 binary64)))) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (log.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) N)))","(-.f64 (log.f64 (*.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) N)))","(-.f64 (log.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))) N)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) (log.f64 N)))","(-.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) N)) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) N)) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))))","(-.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) (fma.f64 N N #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 9 binary64))) (log.f64 (*.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (neg.f64 N)))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (neg.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log.f64 (*.f64 N (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log.f64 (neg.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (-.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) (neg.f64 (log.f64 N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (+.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) (log.f64 N)))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (-.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) (neg.f64 (log.f64 N))))","(-.f64 (neg.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) (fma.f64 N N #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (log.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) N)))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (log1p.f64 N) (log.f64 (neg.f64 (neg.f64 N))))","(-.f64 (log1p.f64 N) (log.f64 N))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) N)) (log.f64 (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (/.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) N)))","(+.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) N)) (log.f64 (/.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) #s(literal 1 binary64))) (log.f64 (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) N)))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (pow.f64 (neg.f64 N) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (pow.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) N)))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (/.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) N)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(+.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(+.f64 (log1p.f64 N) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (pow.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 N N #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) (*.f64 N N))) (+.f64 #s(literal 1 binary64) N))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))) (fma.f64 (+.f64 #s(literal 1 binary64) N) N #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) N) N #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 N #s(literal 4 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (fma.f64 N N #s(literal -1 binary64)) N))","(*.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N)) (pow.f64 N #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (fma.f64 N N #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) N))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 N N #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 N N #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))) #s(literal -1 binary64)))","(*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) N) (*.f64 (-.f64 N #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) N) (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) N))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 N N #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 N N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (-.f64 N #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)) (*.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 N N)) (-.f64 #s(literal 1 binary64) N)) (*.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 N N)) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) N)) (*.f64 (-.f64 #s(literal 1 binary64) N) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 N N)) (-.f64 N #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) N)) (*.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 N #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N)) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) N)))","(/.f64 (-.f64 (*.f64 (*.f64 N N) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) #s(literal -1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) (-.f64 #s(literal 1 binary64) N)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 N #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) (-.f64 N #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (*.f64 N N)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) N))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 N N #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64))) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N))) (neg.f64 (-.f64 #s(literal 1 binary64) N)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) N)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 N N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (-.f64 N #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 (-.f64 (*.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) N))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 N N) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) N) N #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 N N) (fma.f64 N N #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) N) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 N N) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) N #s(literal 1 binary64))","(fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 N #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))) (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (/.f64 (*.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 N #s(literal 6 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))))","(-.f64 (/.f64 (pow.f64 N #s(literal 6 binary64)) (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) N)) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 N #s(literal 4 binary64)) (fma.f64 N N #s(literal 1 binary64))) (-.f64 N #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 N N #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 N #s(literal 6 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))) (-.f64 N #s(literal 1 binary64))) (/.f64 (pow.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 N #s(literal 6 binary64)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N))) (/.f64 (pow.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N)))","(-.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 N)) #s(literal -1 binary64)))","(+.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) N)","(+.f64 N #s(literal 1 binary64))","(pow.f64 (log.f64 N) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (log.f64 N)))","(+.f64 #s(literal 0 binary64) (log.f64 N))","(+.f64 (log.f64 N) #s(literal 0 binary64))","(log.f64 N)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":293.19091796875,"type":"rewrite"},{"compiler":[[12538,1566]],"memory":[[7043280,45117808]],"time":72.465087890625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))) (log.f64 N) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (log.f64 N)))","fresh",46.74655866764803,"binary64"],["(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))))) (*.f64 (log.f64 N) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","fresh",46.6554567603106,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","fresh",47.32819441014215,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","next",47.323466653972076,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","fresh",47.30077216436641,"binary64"],["(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.35679101571782,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",47.32852648360092,"binary64"],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","fresh",47.304762443607984,"binary64"],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",47.429901883283684,"binary64"],["(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","next",47.40056837944963,"binary64"],["(-.f64 (log1p.f64 N) (log.f64 N))","fresh",47.35433261714812,"binary64"],["(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","next",45.14751007752103,"binary64"],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","fresh",45.478011022850986,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","fresh",3.484465909798855,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","next",2.5860954912126575,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","fresh",5.400620081758022,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","next",11.103125197419944,"binary64"]],"compiler":[[45,20],[50,20],[25,13],[22,12],[15,9],[38,12],[27,15],[41,14],[21,10],[37,13],[5,4],[9,7],[6,5],[19,15],[23,18],[15,12],[11,9],[45,20],[50,20],[25,13],[22,12],[15,9],[38,12],[27,15],[41,14],[21,10],[37,13],[5,4],[9,7],[6,5],[19,15],[23,18],[15,12],[11,9]],"count":[[448,17]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[447,17],"picked":[1,0]}],"memory":[[-19347504,24504720]],"min-error":[[0.32233937244526056,"binary64"]],"time":71.632080078125,"type":"prune"},{"egraph":[[0,8116,279,0.070932794],[5,5661,279,0.027408704],[4,1701,279,0.021659316],[3,636,281,0.007877193],[2,257,285,0.003226083],[1,128,317,0.001505038],[0,73,317,0.000873059],[0,43,327,0.000453816]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","N","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","N","(+.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(log1p.f64 N)","N","#s(literal 3 binary64)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(log.f64 N)","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(+.f64 (log.f64 N) (log1p.f64 N))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","#s(literal 2 binary64)","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))"]],"locations":[["(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","cost-diff",0],["(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","cost-diff",6],["(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","cost-diff",8],["(/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","cost-diff",8],["(log1p.f64 N)","cost-diff",0],["(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","cost-diff",0],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","cost-diff",0],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","cost-diff",0],["(/.f64 N (+.f64 #s(literal 1 binary64) N))","cost-diff",0],["(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","cost-diff",0],["(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","cost-diff",0],["(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","cost-diff",2],["(/.f64 #s(literal 1 binary64) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","cost-diff",0],["(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","cost-diff",0],["(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","cost-diff",0]],"memory":[[5503280,34518896]],"method":["egg-herbie"],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","N","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","(log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","N","(+.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(log1p.f64 N)","N","#s(literal 3 binary64)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(log.f64 N)","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(+.f64 (log.f64 N) (log1p.f64 N))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","#s(literal 2 binary64)","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":223.620849609375,"type":"simplify"},{"compiler":[[365,41]],"locations":[["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","accuracy",0.5201950195368841],["(pow.f64 (log.f64 N) #s(literal 2 binary64))","accuracy",0.5420112793053261],["(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","accuracy",0.5459175293053261],["(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","accuracy",46.91924678277157],["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","accuracy",0.5201950195368841],["(pow.f64 (log.f64 N) #s(literal 3 binary64))","accuracy",0.761947851663913],["(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","accuracy",0.766811572358587],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","accuracy",46.719979256852454],["(+.f64 #s(literal 1 binary64) N)","accuracy",0.0],["(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","accuracy",0.0],["(/.f64 N (+.f64 #s(literal 1 binary64) N))","accuracy",0.01953125],["(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","accuracy",44.99921244672832],["(/.f64 #s(literal 1 binary64) N)","accuracy",0.0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","accuracy",11.103125197419944],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","accuracy",0.09375],["(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","accuracy",0.10546875],["(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","accuracy",0.28125],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","accuracy",2.5177533213026098]],"memory":[[-4302240,61792688]],"mixsample":[[24.21533203125,"ival-div",0],[16.24609375,"adjust",800],[2.296875,"ival-div",400],[2.718017578125,"ival-pow2",400],[0.139892578125,"ival-assert",0],[13.44775390625,"ival-sub",0],[0.062744140625,"ival-sub",400],[7.3134765625,"const",0],[3.706787109375,"ival-log1p",400],[0.014892578125,"ival-neg",400],[13.118408203125,"ival-pow",0],[4.642578125,"ival-add",0],[6.941650390625,"ival-mult",0],[1.06494140625,"ival-mult",400],[2.944580078125,"ival-log",400],[0.826171875,"ival-add",400],[14.967529296875,"ival-log",0],[0.262451171875,"ival-true",0],[6.58056640625,"ival-log1p",0],[2.958251953125,"ival-pow",400],[0.78369140625,"exact",0],[2.266845703125,"ival-neg",0],[10.035888671875,"ival-pow2",0]],"outcomes":[[153.072998046875,1,"valid",191],[23.09765625,0,"valid",65]],"time":220.488037109375,"type":"localize"},{"count":[[25,170]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(log1p.f64 N)","(/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(+.f64 #s(literal 1 binary64) N)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 2 binary64))"]],"memory":[[-6774176,31962144]],"outputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/ 1 N)","N","(* N (+ 1 (* -1 N)))","(* N (+ 1 (* N (- N 1))))","(* N (+ 1 (* N (- (* N (+ 1 (* -1 N))) 1))))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* 1/2 N) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))) (log N))) (* -1 (/ (- (* 1/3 (log N)) 1) (log N)))))) (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(* -1 (pow (log N) 3))","(- (pow N 3) (pow (log N) 3))","(- (* (pow N 3) (+ 1 (* -3/2 N))) (pow (log N) 3))","(- (* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2)))) (pow (log N) 3))","(pow N 3)","(* (pow N 3) (+ 1 (* -3/2 N)))","(* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2))))","(* (pow N 3) (+ 1 (* N (- (* N (+ 7/4 (* -15/8 N))) 3/2))))","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(/ (pow N 2) (log N))","(* (pow N 2) (+ (* -1 (* N (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (* 11/12 (/ 1 (log N)))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (+ (* 11/12 (/ 1 (log N))) (* N (- (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (pow (log N) 2))) (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (* 1/2 (/ 1 (pow (log N) 3))) (+ (* 1/2 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))) (+ (* 5/6 (/ 1 (log N))) (* 11/12 (/ 1 (pow (log N) 2))))))))))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(* (pow N 2) (log N))","(* (pow N 2) (+ (log N) (* N (+ 1 (* -1 (log N))))))","(* (pow N 2) (+ (log N) (* N (+ 1 (+ (* -1 (log N)) (* N (- (* 11/12 (log N)) 3/2)))))))","(* (pow N 2) (+ (log N) (* N (+ 1 (+ (* -1 (log N)) (* N (- (+ (* 11/12 (log N)) (* N (+ 7/4 (* -5/6 (log N))))) 3/2)))))))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","1","(+ 1 N)","(pow (log N) 3)","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(pow (log N) 2)","(+ (* 2 (* N (log N))) (pow (log N) 2))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (* -1 (log N)))))) (pow (log N) 2))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (+ (* -1 (log N)) (* N (- (* 2/3 (log N)) 1))))))) (pow (log N) 2))","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(- 1 (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (+ (/ 1 N) (/ 1 (pow N 3))))","(/ -1 N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))) N)","(/ (- (+ 1 (+ (* -4/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -2/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ 1 (+ (log (/ 1 N)) (* 1/2 (log (/ 1 N))))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* 2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 1/2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))) N)","(/ (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))) N)","(/ (- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (pow N 3))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))))))) (/ 1 (pow N 3))) N)","(* -1 (pow (log (/ 1 N)) 3))","(+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N)))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N))))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (+ (/ 1 (pow N 3)) (/ (pow (log (/ 1 N)) 2) N))))))))))","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(* -1/2 (log (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (* 3/4 (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(* -2 (pow (log (/ 1 N)) 3))","(+ (* -2 (pow (log (/ 1 N)) 3)) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N)))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -2 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -2 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N))))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -2 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -2 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -2 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 3))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (+ (/ 1 (pow N 3)) (/ (pow (log (/ 1 N)) 2) N))))))))))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(* N (+ 1 (/ 1 N)))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(* 4 (pow (log (/ 1 N)) 2))","(+ (* -4 (/ (log (/ 1 N)) N)) (* 4 (pow (log (/ 1 N)) 2)))","(+ (* -4 (/ (log (/ 1 N)) N)) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))","(- (+ (* -4 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))) (/ 1 (pow N 3)))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(+ 1 (* -1 (/ (- 1 (/ 1 N)) N)))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 N)) N))) N)))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* N (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (/ (* (+ 1 (+ (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1 (/ (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N)) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)","(+ (* 2 (/ (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (+ (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -2/3 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N)))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))"]],"series":[[60.638916015625,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (/ 1 N) (/ (/ N (+ 1 N)) 1) (neg (log (/ (/ N (+ 1 N)) 1))) (log (/ (/ N (+ 1 N)) 1)) (/ N (+ 1 N)) (/ (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (+ (* (+ (log N) (log (+ 1 N))) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (pow (log (+ 1 N)) 3) (log (+ 1 N)) (/ (* (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (+ (log N) (log (+ 1 N))) 2)) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2)) (- (/ (* (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (+ (log N) (log (+ 1 N))) 2)) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2))) (* (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (+ 1 N) (pow (log N) 3) (pow (log (+ 1 N)) 2) (pow (+ (log N) (log (+ 1 N))) 2) (pow (log N) 2))","N","-inf"],[25.921142578125,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (/ 1 N) (/ (/ N (+ 1 N)) 1) (neg (log (/ (/ N (+ 1 N)) 1))) (log (/ (/ N (+ 1 N)) 1)) (/ N (+ 1 N)) (/ (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (+ (* (+ (log N) (log (+ 1 N))) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (pow (log (+ 1 N)) 3) (log (+ 1 N)) (/ (* (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (+ (log N) (log (+ 1 N))) 2)) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2)) (- (/ (* (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (+ (log N) (log (+ 1 N))) 2)) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2))) (* (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (+ 1 N) (pow (log N) 3) (pow (log (+ 1 N)) 2) (pow (+ (log N) (log (+ 1 N))) 2) (pow (log N) 2))","N","inf"],[14.18212890625,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (/ 1 N) (/ (/ N (+ 1 N)) 1) (neg (log (/ (/ N (+ 1 N)) 1))) (log (/ (/ N (+ 1 N)) 1)) (/ N (+ 1 N)) (/ (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (+ (* (+ (log N) (log (+ 1 N))) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (pow (log (+ 1 N)) 3) (log (+ 1 N)) (/ (* (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (+ (log N) (log (+ 1 N))) 2)) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2)) (- (/ (* (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (+ (log N) (log (+ 1 N))) 2)) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2))) (* (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (+ 1 N) (pow (log N) 3) (pow (log (+ 1 N)) 2) (pow (+ (log N) (log (+ 1 N))) 2) (pow (log N) 2))","N","0"]],"time":108.447021484375,"type":"series"},{"count":[[170,169]],"egraph":[[0,8571,8945,0.127867618],[1,3426,9425,0.032615726],[0,1028,10847,0.011623542]],"inputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/ 1 N)","N","(* N (+ 1 (* -1 N)))","(* N (+ 1 (* N (- N 1))))","(* N (+ 1 (* N (- (* N (+ 1 (* -1 N))) 1))))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* 1/2 N) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))) (log N))) (* -1 (/ (- (* 1/3 (log N)) 1) (log N)))))) (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(* -1 (pow (log N) 3))","(- (pow N 3) (pow (log N) 3))","(- (* (pow N 3) (+ 1 (* -3/2 N))) (pow (log N) 3))","(- (* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2)))) (pow (log N) 3))","(pow N 3)","(* (pow N 3) (+ 1 (* -3/2 N)))","(* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2))))","(* (pow N 3) (+ 1 (* N (- (* N (+ 7/4 (* -15/8 N))) 3/2))))","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(/ (pow N 2) (log N))","(* (pow N 2) (+ (* -1 (* N (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (* 11/12 (/ 1 (log N)))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (+ (* 11/12 (/ 1 (log N))) (* N (- (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (pow (log N) 2))) (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (* 1/2 (/ 1 (pow (log N) 3))) (+ (* 1/2 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))) (+ (* 5/6 (/ 1 (log N))) (* 11/12 (/ 1 (pow (log N) 2))))))))))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(* (pow N 2) (log N))","(* (pow N 2) (+ (log N) (* N (+ 1 (* -1 (log N))))))","(* (pow N 2) (+ (log N) (* N (+ 1 (+ (* -1 (log N)) (* N (- (* 11/12 (log N)) 3/2)))))))","(* (pow N 2) (+ (log N) (* N (+ 1 (+ (* -1 (log N)) (* N (- (+ (* 11/12 (log N)) (* N (+ 7/4 (* -5/6 (log N))))) 3/2)))))))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","1","(+ 1 N)","(pow (log N) 3)","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(pow (log N) 2)","(+ (* 2 (* N (log N))) (pow (log N) 2))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (* -1 (log N)))))) (pow (log N) 2))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (+ (* -1 (log N)) (* N (- (* 2/3 (log N)) 1))))))) (pow (log N) 2))","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(- 1 (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (+ (/ 1 N) (/ 1 (pow N 3))))","(/ -1 N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))) N)","(/ (- (+ 1 (+ (* -4/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -2/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ 1 (+ (log (/ 1 N)) (* 1/2 (log (/ 1 N))))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* 2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 1/2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))) N)","(/ (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))) N)","(/ (- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (pow N 3))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))))))) (/ 1 (pow N 3))) N)","(* -1 (pow (log (/ 1 N)) 3))","(+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N)))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N))))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (+ (/ 1 (pow N 3)) (/ (pow (log (/ 1 N)) 2) N))))))))))","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(* -1/2 (log (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (* 3/4 (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(* -2 (pow (log (/ 1 N)) 3))","(+ (* -2 (pow (log (/ 1 N)) 3)) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N)))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -2 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -2 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N))))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -2 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -2 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -2 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 3))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (+ (/ 1 (pow N 3)) (/ (pow (log (/ 1 N)) 2) N))))))))))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(* N (+ 1 (/ 1 N)))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(* 4 (pow (log (/ 1 N)) 2))","(+ (* -4 (/ (log (/ 1 N)) N)) (* 4 (pow (log (/ 1 N)) 2)))","(+ (* -4 (/ (log (/ 1 N)) N)) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))","(- (+ (* -4 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))) (/ 1 (pow N 3)))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(+ 1 (* -1 (/ (- 1 (/ 1 N)) N)))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 N)) N))) N)))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* N (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (/ (* (+ 1 (+ (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1 (/ (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N)) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)","(+ (* 2 (/ (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (+ (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -2/3 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N)))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))"]],"memory":[[4701472,67457552]],"method":["egg-herbie"],"outputs":[["(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N) (log.f64 N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N) (log.f64 N))","(/ -1/4 (pow N 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ -1/4 (pow N 3))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","N","(* N (+ 1 (* -1 N)))","(*.f64 (-.f64 #s(literal 1 binary64) N) N)","(* N (+ 1 (* N (- N 1))))","(*.f64 (fma.f64 (-.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1 (* -1 N))) 1))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) N) N #s(literal -1 binary64)) N #s(literal 1 binary64)) N)","(log N)","(log.f64 N)","(+ (log N) (* -1 N))","(-.f64 (log.f64 N) N)","(+ (log N) (* N (- (* 1/2 N) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) N #s(literal -1 binary64)) N (log.f64 N))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(+ N (* -1 (log N)))","(-.f64 N (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 1 binary64)) (log.f64 N))) (neg.f64 N) #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))) (log N))) (* -1 (/ (- (* 1/3 (log N)) 1) (log N)))))) (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (log.f64 N)) (-.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/3 binary64) (log.f64 N) #s(literal -1 binary64))) (log.f64 N)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 1 binary64)) (log.f64 N))) (log.f64 N)))) N (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 1 binary64)) (log.f64 N))))) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(* -1 (pow (log N) 3))","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))","(- (pow N 3) (pow (log N) 3))","(-.f64 (pow.f64 N #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(- (* (pow N 3) (+ 1 (* -3/2 N))) (pow (log N) 3))","(fma.f64 (fma.f64 #s(literal -3/2 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(- (* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2)))) (pow (log N) 3))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/4 binary64) N #s(literal -3/2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(pow N 3)","(pow.f64 N #s(literal 3 binary64))","(* (pow N 3) (+ 1 (* -3/2 N)))","(*.f64 (fma.f64 #s(literal -3/2 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 7/4 binary64) N #s(literal -3/2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* (pow N 3) (+ 1 (* N (- (* N (+ 7/4 (* -15/8 N))) 3/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -15/8 binary64) N #s(literal 7/4 binary64)) N #s(literal -3/2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* N (+ 1 (* -1/2 N)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(/ (pow N 2) (log N))","(/.f64 (*.f64 N N) (log.f64 N))","(* (pow N 2) (+ (* -1 (* N (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(*.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (neg.f64 N) (/.f64 #s(literal 1 binary64) (log.f64 N))) (*.f64 N N))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (* 11/12 (/ 1 (log N)))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(*.f64 (fma.f64 (fma.f64 (+.f64 (+.f64 (/.f64 #s(literal 11/12 binary64) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (log.f64 N))) N (neg.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))))) N (/.f64 #s(literal 1 binary64) (log.f64 N))) (*.f64 N N))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (+ (* 11/12 (/ 1 (log N))) (* N (- (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (pow (log N) 2))) (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (* 1/2 (/ 1 (pow (log N) 3))) (+ (* 1/2 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))) (+ (* 5/6 (/ 1 (log N))) (* 11/12 (/ 1 (pow (log N) 2))))))))))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(*.f64 (fma.f64 (fma.f64 (+.f64 (+.f64 (fma.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (+.f64 (+.f64 (+.f64 (/.f64 #s(literal 11/12 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 5/6 binary64) (log.f64 N))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) (log.f64 N))) (log.f64 N))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (/.f64 #s(literal 1/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) N (/.f64 #s(literal 11/12 binary64) (log.f64 N))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (log.f64 N))) N (neg.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))))) N (/.f64 #s(literal 1 binary64) (log.f64 N))) (*.f64 N N))","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(fma.f64 (fma.f64 (+.f64 (fma.f64 (+.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (log.f64 N))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 N) (/.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(* (pow N 2) (log N))","(*.f64 (*.f64 N N) (log.f64 N))","(* (pow N 2) (+ (log N) (* N (+ 1 (* -1 (log N))))))","(*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N (log.f64 N)) (*.f64 N N))","(* (pow N 2) (+ (log N) (* N (+ 1 (+ (* -1 (log N)) (* N (- (* 11/12 (log N)) 3/2)))))))","(*.f64 (fma.f64 (+.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (fma.f64 #s(literal 11/12 binary64) (log.f64 N) #s(literal -3/2 binary64)) N)) N (log.f64 N)) (*.f64 N N))","(* (pow N 2) (+ (log N) (* N (+ 1 (+ (* -1 (log N)) (* N (- (+ (* 11/12 (log N)) (* N (+ 7/4 (* -5/6 (log N))))) 3/2)))))))","(*.f64 (fma.f64 (+.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (fma.f64 #s(literal 11/12 binary64) (log.f64 N) (fma.f64 (fma.f64 #s(literal -5/6 binary64) (log.f64 N) #s(literal 7/4 binary64)) N #s(literal -3/2 binary64))) N)) N (log.f64 N)) (*.f64 N N))","(/ 1/4 (pow N 2))","(/.f64 #s(literal 1/4 binary64) (*.f64 N N))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N))","(/ 1/4 N)","(/.f64 #s(literal 1/4 binary64) N)","(/ (+ 1/4 (* -1/3 N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","1","#s(literal 1 binary64)","(+ 1 N)","(+.f64 #s(literal 1 binary64) N)","(pow (log N) 3)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(pow N 2)","(*.f64 N N)","(* (pow N 2) (+ 1 (* -1 N)))","(*.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(*.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) N #s(literal -1 binary64)) N #s(literal 1 binary64)) (*.f64 N N))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/6 binary64) N #s(literal 11/12 binary64)) N #s(literal -1 binary64)) N #s(literal 1 binary64)) (*.f64 N N))","(pow (log N) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(+ (* 2 (* N (log N))) (pow (log N) 2))","(*.f64 (log.f64 N) (fma.f64 #s(literal 2 binary64) N (log.f64 N)))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (* -1 (log N)))))) (pow (log N) 2))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N (*.f64 #s(literal 2 binary64) (log.f64 N))) N (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (+ (* -1 (log N)) (* N (- (* 2/3 (log N)) 1))))))) (pow (log N) 2))","(fma.f64 (fma.f64 #s(literal 2 binary64) (log.f64 N) (fma.f64 (-.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) N) (log.f64 N)) N N)) N (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64)))) N)","(- 1 (* 1/2 (/ 1 N)))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))))","(/ -1/2 N)","(/.f64 #s(literal -1/2 binary64) N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/4 binary64) (*.f64 N N))) N)","(- 1 (/ 1 N))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N))","(- (+ 1 (/ 1 (pow N 2))) (/ 1 N))","(-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) N))","(- (+ 1 (/ 1 (pow N 2))) (+ (/ 1 N) (/ 1 (pow N 3))))","(-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) N)) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))","(/ -1 N)","(/.f64 #s(literal -1 binary64) N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) N)) (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) N)","(/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)))) (/.f64 (log.f64 N) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))) N)","(/.f64 (-.f64 (+.f64 (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) (fma.f64 (log.f64 N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 N N))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 N N)) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (*.f64 #s(literal 1/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 N N))))))) #s(literal 1 binary64)) (+.f64 (fma.f64 #s(literal 3/2 binary64) (/.f64 (neg.f64 (log.f64 N)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 N N))) (/.f64 (*.f64 (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 #s(literal -1/6 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (neg.f64 (log.f64 N)) #s(literal -3 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 N N)))) (/.f64 (log.f64 N) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)))) N)","(/ (- (+ 1 (+ (* -4/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -2/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ 1 (+ (log (/ 1 N)) (* 1/2 (log (/ 1 N))))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* 2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 1/2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))) N)","(/.f64 (-.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -4/3 binary64) (pow.f64 N #s(literal 3 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (log.f64 N) (/.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) (fma.f64 (log.f64 N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 N N))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 N N)) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (*.f64 #s(literal 1/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 N N)))))))))) #s(literal 1 binary64)) (/.f64 (log.f64 N) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N))) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1 binary64) (fma.f64 #s(literal 3/2 binary64) (/.f64 (neg.f64 (log.f64 N)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 N N))) (fma.f64 (/.f64 (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 #s(literal -1/6 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (/.f64 (fma.f64 #s(literal 3/2 binary64) (neg.f64 (log.f64 N)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))) (*.f64 (/.f64 (neg.f64 (log.f64 N)) N) (/.f64 #s(literal -3 binary64) N))) (*.f64 (/.f64 (-.f64 (fma.f64 (log.f64 N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 #s(literal 1/9 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal 2/3 binary64) (/.f64 (neg.f64 (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (fma.f64 #s(literal 3/2 binary64) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (*.f64 (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 #s(literal -1/6 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (neg.f64 (log.f64 N)) #s(literal -3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 (neg.f64 (log.f64 N)) #s(literal -3 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))))) N)","(/ (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) N)","(/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) N)","(/.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))) N)","(/.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (fma.f64 (log.f64 N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 N N)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/3 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 N N))))))))) N)","(/ (- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (pow N 3))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))))))) (/ 1 (pow N 3))) N)","(/.f64 (-.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -4/3 binary64) (fma.f64 (log.f64 N) (/.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (fma.f64 (log.f64 N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 N N)) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal -1/4 binary64) (fma.f64 (/.f64 #s(literal 1/3 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 N N)))))))))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))) N)","(* -1 (pow (log (/ 1 N)) 3))","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N)))","(fma.f64 #s(literal 3 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N))))))","(fma.f64 (/.f64 #s(literal -2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 N N)) (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (*.f64 #s(literal 3 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (+ (/ 1 (pow N 3)) (/ (pow (log (/ 1 N)) 2) N))))))))))","(fma.f64 (/.f64 #s(literal -2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 N N)) (fma.f64 (log.f64 N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64))) (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal 1/3 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64) (fma.f64 #s(literal 3 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))))) (pow.f64 (log.f64 N) #s(literal 3 binary64))))))","(* -1 (log (/ 1 N)))","(log.f64 N)","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(+.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(-.f64 (+.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (*.f64 N N)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) N)) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (*.f64 N N)))","(* -1/2 (log (/ 1 N)))","(*.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64))","(+ (* -1/2 (log (/ 1 N))) (* 3/4 (/ 1 N)))","(fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (/.f64 #s(literal 3/4 binary64) N))","(+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (+.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 N N)) (/.f64 #s(literal 3/4 binary64) N)) (/.f64 #s(literal 3/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(-.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64))) (+.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 N N)) (/.f64 #s(literal 3/4 binary64) N)) (/.f64 #s(literal 3/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))))) (fma.f64 (/.f64 (+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N)))) #s(literal 1/8 binary64)) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1/2 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal 3/16 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N))))))","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (/.f64 #s(literal -1/4 binary64) N))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(-.f64 (-.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (/.f64 #s(literal 1/8 binary64) (*.f64 N N))) (/.f64 #s(literal 1/4 binary64) N)) (/.f64 #s(literal 1/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(-.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N))) (/.f64 #s(literal 1/8 binary64) (*.f64 N N)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (pow.f64 N #s(literal 3 binary64))) (+.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) N) (/.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal 3 binary64)))) (/.f64 #s(literal 1/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (neg.f64 (log.f64 N))) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N)))) #s(literal 1 binary64)) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N))))) #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N)))) #s(literal 1/8 binary64)) (*.f64 N N)) (/.f64 #s(literal 1/4 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (neg.f64 (log.f64 N))) (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) (/.f64 (-.f64 (/.f64 #s(literal 1/16 binary64) (neg.f64 (log.f64 N))) (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (log.f64 N)) #s(literal 1/12 binary64))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (neg.f64 (log.f64 N))) (+.f64 (/.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N))) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N)))))))) #s(literal 1 binary64)) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N)))) #s(literal 1/8 binary64)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (log.f64 N)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N)))) #s(literal 1/8 binary64)) (log.f64 N)) (/.f64 #s(literal 3/16 binary64) (neg.f64 (log.f64 N))))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (+.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N)))) #s(literal 1/8 binary64)) (neg.f64 (log.f64 N))) (/.f64 #s(literal 1/4 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))))) N)","(* -2 (pow (log (/ 1 N)) 3))","(*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64))","(+ (* -2 (pow (log (/ 1 N)) 3)) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N)))","(fma.f64 #s(literal 5 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64)))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -2 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -2 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N))))))","(fma.f64 (/.f64 #s(literal -2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 (neg.f64 (log.f64 N)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (*.f64 #s(literal 5 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N)))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -2 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -2 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -2 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 3))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (+ (/ 1 (pow N 3)) (/ (pow (log (/ 1 N)) 2) N))))))))))","(fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (log.f64 N) N) (/.f64 #s(literal -1 binary64) N) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 (neg.f64 (log.f64 N)) N))) (fma.f64 #s(literal -2 binary64) (fma.f64 (neg.f64 (log.f64 N)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal 1/3 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64) (fma.f64 #s(literal 5 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))))))))","(/ -1/3 N)","(/.f64 #s(literal -1/3 binary64) N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","-1/3","#s(literal -1/3 binary64)","(- (* 1/4 (/ 1 N)) 1/3)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(* N (+ 1 (/ 1 N)))","(+.f64 #s(literal 1 binary64) N)","(pow (log (/ 1 N)) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 #s(literal -1 binary64) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 N N))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(-.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -2/3 binary64) (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 #s(literal -1 binary64) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 N N))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))","(* 4 (pow (log (/ 1 N)) 2))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))","(+ (* -4 (/ (log (/ 1 N)) N)) (* 4 (pow (log (/ 1 N)) 2)))","(fma.f64 #s(literal -4 binary64) (/.f64 (neg.f64 (log.f64 N)) N) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64)))","(+ (* -4 (/ (log (/ 1 N)) N)) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))","(fma.f64 #s(literal -4 binary64) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 1 binary64) (*.f64 N N)))))","(- (+ (* -4 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))) (/ 1 (pow N 3)))","(-.f64 (fma.f64 #s(literal -4 binary64) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -4/3 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 1 binary64) (*.f64 N N)))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal 1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal 1 binary64)) (neg.f64 N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) (neg.f64 N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) (neg.f64 N))","(+ 1 (* -1 (/ (- 1 (/ 1 N)) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N)) N))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 N)) N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N)) N)) N))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) (neg.f64 N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N)) (neg.f64 N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N)) (neg.f64 N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* N (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64))))) N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -2 binary64) (-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/2 binary64))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/3 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))))) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))))) N)) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64)))) (neg.f64 N)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (/ (* (+ 1 (+ (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -2 binary64) (-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/2 binary64))) (/.f64 (-.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/3 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))))) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (+.f64 #s(literal 19/12 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/4 binary64)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/3 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))))) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64)))))) N)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) #s(literal -1/2 binary64) (-.f64 (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))))) N)) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) #s(literal 2 binary64)))) (neg.f64 N)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))))) (neg.f64 N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))","(/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (neg.f64 N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64) (/.f64 (-.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) N)) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1 (/ (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64) (/.f64 (-.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (/.f64 (+.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (/.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 19/12 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) N)) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) N)) (neg.f64 N))) (neg.f64 N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) N))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (neg.f64 N))) N))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64) (/.f64 (-.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 3 binary64) (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) N)) (neg.f64 N))) N))","(+ (log -1) (* -1 (log (/ -1 N))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal 1 binary64)) N))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))","(+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (fma.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N) #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (fma.f64 (/.f64 (-.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (-.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N) #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) N)))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N) (/.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N) (neg.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N) (/.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N) (neg.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)) N))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))) N) #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(*.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))) #s(literal -2/3 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 1/2 binary64) (/.f64 #s(literal 11/12 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 5 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (-.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (*.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/3 binary64))) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (-.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N)) (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 N))) (neg.f64 N))","(* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(*.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))","(+ (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N)) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (neg.f64 N)))","(+ (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) N))) (neg.f64 N)))","(+ (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) N)) (neg.f64 N)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (neg.f64 N)))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (neg.f64 N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N) #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) N)) N))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) N)) (neg.f64 N))) N))","(pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)","(pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))","(+ (* 2 (/ (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(fma.f64 (/.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) N) #s(literal 2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(-.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) N)) N))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (+ (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -2/3 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N)))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(-.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal -2/3 binary64) #s(literal 1 binary64)) N)) (neg.f64 N))) N))"]],"stop":[["iter limit",1],["node limit",1]],"time":313.19091796875,"type":"simplify"},{"count":[[25,1358]],"egraph":[[0,9447,185,0.070057829],[2,2810,185,0.040391797],[1,354,197,0.009652761],[0,73,204,0.002697957],[0,43,259,0.00048784]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(log1p.f64 N)","(/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(+.f64 #s(literal 1 binary64) N)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 2 binary64))"]],"memory":[[4883936,94914640]],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N) (*.f64 (neg.f64 N) #s(literal -1 binary64))) (*.f64 (neg.f64 N) N))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (/.f64 N #s(literal -1 binary64))) (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) (/.f64 N #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N)) (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 N N))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 N #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) #s(literal 1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) (/.f64 N #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 N)) (*.f64 (*.f64 N (neg.f64 N)) #s(literal 1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) (neg.f64 N)))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 N #s(literal -1 binary64))) N) (*.f64 N (/.f64 N #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 N)) N) (*.f64 N (neg.f64 N)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N N) #s(literal -1 binary64))) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 N #s(literal -1 binary64))) (*.f64 N N)) (*.f64 (*.f64 N N) (/.f64 N #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 N)) (*.f64 N N)) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (-.f64 N (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 N #s(literal -1 binary64))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (/.f64 N #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 N)) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N)))","(/.f64 (-.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal -1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 N #s(literal -1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal 1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (/.f64 N #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 N)) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal 1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 N)))","(/.f64 (-.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64)) (neg.f64 N))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)) N)","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -2 binary64))) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))) (neg.f64 (neg.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (neg.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) N))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (*.f64 N #s(literal -1 binary64))) (*.f64 N N))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 N (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 N (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (neg.f64 N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) N))","(neg.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 (pow.f64 N #s(literal -1 binary64)) N) (pow.f64 N #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))) (*.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (/.f64 N (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal 1 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 #s(literal -1 binary64) N))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 N)) (*.f64 (neg.f64 N) (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))) (*.f64 N N))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 N (neg.f64 N))) (*.f64 (neg.f64 N) (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))) (*.f64 (neg.f64 N) (*.f64 N (neg.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) N) (*.f64 (neg.f64 N) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 (neg.f64 N) N))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 N N)) (*.f64 (neg.f64 N) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) (/.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 N (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))) (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) (*.f64 N (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 N)) (*.f64 N (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))) (*.f64 N (neg.f64 N)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 N (neg.f64 N))) (*.f64 N (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))) (*.f64 N (*.f64 N (neg.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 N N)) (*.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) N) (*.f64 N (/.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 N (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))) N) (*.f64 N (*.f64 N (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 N)) (*.f64 (/.f64 N #s(literal -1/2 binary64)) (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))) (*.f64 (/.f64 N #s(literal -1/2 binary64)) (neg.f64 N)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 N (neg.f64 N))) (*.f64 (/.f64 N #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))) (*.f64 (/.f64 N #s(literal -1/2 binary64)) (*.f64 N (neg.f64 N))))","(/.f64 (-.f64 N (*.f64 (/.f64 N #s(literal -1/2 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 (/.f64 N #s(literal -1/2 binary64)) N))","(/.f64 (-.f64 (*.f64 N N) (*.f64 (/.f64 N #s(literal -1/2 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) (*.f64 (/.f64 N #s(literal -1/2 binary64)) (*.f64 N N)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 (/.f64 N #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 N #s(literal -1/2 binary64)) (/.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 N (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))) (*.f64 (/.f64 N #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 N #s(literal -1/2 binary64)) (*.f64 N (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N)) (neg.f64 N))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) (pow.f64 N #s(literal -1 binary64))) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64))) (pow.f64 N #s(literal -1 binary64))) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N)))","(/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 N #s(literal -3 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N)))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (neg.f64 (neg.f64 N)))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) N)","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) (neg.f64 N)))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) N))","(/.f64 (*.f64 (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) (neg.f64 N)))","(/.f64 (*.f64 (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) N))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) N) (*.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 N N))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) (*.f64 N (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64))) (*.f64 N (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 N))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))))","(neg.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 N)))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N)))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1/2 binary64) N) (neg.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N)))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1/2 binary64)) (pow.f64 N #s(literal -1/2 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) N))","(*.f64 #s(literal 1 binary64) (pow.f64 N #s(literal -1 binary64)))","(pow.f64 (pow.f64 N #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 N)) #s(literal -1 binary64))","(pow.f64 (*.f64 N N) #s(literal -1/2 binary64))","(pow.f64 N #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 N))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 N)))","(/.f64 #s(literal 1 binary64) N)","(neg.f64 (/.f64 #s(literal -1 binary64) N))","(exp.f64 (neg.f64 (log.f64 N)))","(*.f64 (pow.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (fma.f64 N N #s(literal -1 binary64))) (-.f64 N #s(literal 1 binary64)))","(*.f64 (/.f64 N (-.f64 #s(literal 1 binary64) (*.f64 N N))) (-.f64 #s(literal 1 binary64) N))","(*.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(*.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) N)","(*.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))","(*.f64 (neg.f64 N) (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 N (+.f64 #s(literal 1 binary64) N)))","(*.f64 N (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 N (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N) #s(literal -1 binary64))","(pow.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 N)) (neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(/.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 N) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(/.f64 (neg.f64 N) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(neg.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(exp.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (pow.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -4 binary64)))","(*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))) (*.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))) (*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))) (*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))) (neg.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (pow.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -4 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (log.f64 N) #s(literal -1 binary64) (log1p.f64 N))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(fma.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))) (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (neg.f64 N)))","(-.f64 (neg.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))) (log.f64 #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(+.f64 (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(+.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(+.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 #s(literal -1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(/.f64 (-.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 0 binary64)) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) #s(literal 0 binary64)) (+.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64)))))","(/.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (fma.f64 (log1p.f64 N) (log1p.f64 N) (*.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(neg.f64 (-.f64 (log1p.f64 N) (log.f64 N)))","(fma.f64 (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 1 binary64)) (log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 1 binary64)) (neg.f64 (log1p.f64 N)))","(fma.f64 (sqrt.f64 (log.f64 N)) (sqrt.f64 (log.f64 N)) (log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(fma.f64 (sqrt.f64 (log.f64 N)) (sqrt.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 N) (log.f64 N))","(fma.f64 #s(literal -1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (log.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(-.f64 (log.f64 (neg.f64 (neg.f64 N))) (log.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))))","(-.f64 (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)) (log.f64 #s(literal -1 binary64)))","(-.f64 (log.f64 (neg.f64 N)) (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))))","(-.f64 (log.f64 (neg.f64 N)) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(-.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(-.f64 (log.f64 N) (log1p.f64 N))","(-.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(+.f64 (log.f64 (/.f64 N (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 N (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log1p.f64 (neg.f64 N)))","(+.f64 (log.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(+.f64 (log.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (fma.f64 N N (neg.f64 N))))","(+.f64 (neg.f64 (log1p.f64 N)) (log.f64 N))","(+.f64 (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)) (log.f64 #s(literal -1 binary64)))","(+.f64 (log.f64 (neg.f64 N)) (log.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(+.f64 (log.f64 N) (log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (log.f64 N) (neg.f64 (log1p.f64 N)))","(+.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))","(*.f64 (pow.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (fma.f64 N N #s(literal -1 binary64))) (-.f64 N #s(literal 1 binary64)))","(*.f64 (/.f64 N (-.f64 #s(literal 1 binary64) (*.f64 N N))) (-.f64 #s(literal 1 binary64) N))","(*.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(*.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) N)","(*.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))","(*.f64 (neg.f64 N) (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 N (+.f64 #s(literal 1 binary64) N)))","(*.f64 N (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 N (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N) #s(literal -1 binary64))","(pow.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 N)) (neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(/.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 N) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(/.f64 (neg.f64 N) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(neg.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(exp.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (pow.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -4 binary64)))","(*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))) (*.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))) (*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))) (*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))) (neg.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (pow.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -4 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (log.f64 N) #s(literal -1 binary64) (log1p.f64 N))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(fma.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))) (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (neg.f64 N)))","(-.f64 (neg.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))) (log.f64 #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(+.f64 (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(+.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(+.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log.f64 N) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log.f64 N) #s(literal 3/2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (log.f64 N)))","(*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(pow.f64 (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64))) (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (neg.f64 (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log1p.f64 N) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (log.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log1p.f64 N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(fma.f64 (log.f64 N) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(fma.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(+.f64 (*.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(+.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log1p.f64 N)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (log.f64 N))))","(+.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log1p.f64 N))","(*.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 1 binary64))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(exp.f64 (fma.f64 (log.f64 (log1p.f64 N)) #s(literal 3/2 binary64) (*.f64 (log.f64 (log1p.f64 N)) #s(literal 3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)))","(pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (log1p.f64 N) #s(literal 1 binary64))","(log1p.f64 N)","(neg.f64 (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) #s(literal 0 binary64))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 N #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log1p.f64 (neg.f64 N)))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(exp.f64 (log.f64 (log1p.f64 N)))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (log1p.f64 N))","(+.f64 (log1p.f64 N) #s(literal 0 binary64))","(log.f64 (+.f64 #s(literal 1 binary64) N))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))))","(*.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(pow.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(neg.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(neg.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(pow.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(exp.f64 (+.f64 (-.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (+.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (pow.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -4 binary64)))","(*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))) (*.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))) (*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))) (*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))) (neg.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64))) (pow.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -4 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (log.f64 N) #s(literal -1 binary64) (log1p.f64 N))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(fma.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))) (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -2 binary64)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))) (/.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (neg.f64 N)))","(-.f64 (neg.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))) (log.f64 #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(+.f64 (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(+.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(+.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N)) (log1p.f64 N))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(*.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 9 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)))","(fma.f64 (*.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log1p.f64 N) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)))","(fma.f64 (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (log1p.f64 N) (*.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)))","(exp.f64 (fma.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (+.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(+.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log.f64 N)))","(*.f64 (pow.f64 (/.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (/.f64 #s(literal -1 binary64) N))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal 1/4 binary64) N)) (neg.f64 N)) (*.f64 (neg.f64 N) #s(literal -1/3 binary64))) (*.f64 N N))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal 1/4 binary64) N)) N) (*.f64 (neg.f64 N) #s(literal 1/3 binary64))) (*.f64 (neg.f64 N) N))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal 1/4 binary64) N)) (/.f64 N #s(literal 1/3 binary64))) (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) (/.f64 N #s(literal 1/3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) (neg.f64 N)) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1/3 binary64))) (*.f64 (*.f64 N (neg.f64 N)) (neg.f64 N)))","(/.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal 1/3 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N))","(/.f64 (-.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 N #s(literal 1/3 binary64))) (*.f64 (*.f64 N (neg.f64 N)) #s(literal 1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) (/.f64 N #s(literal 1/3 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) N) (neg.f64 N)) (*.f64 N #s(literal -1/3 binary64))) (*.f64 N (neg.f64 N)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) N) (/.f64 N #s(literal 1/3 binary64))) N) (*.f64 N (/.f64 N #s(literal 1/3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (neg.f64 N)) (*.f64 (*.f64 N N) #s(literal -1/3 binary64))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) N) (*.f64 (*.f64 N N) #s(literal 1/3 binary64))) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 N #s(literal 1/3 binary64))) (*.f64 N N)) (*.f64 (*.f64 N N) (/.f64 N #s(literal 1/3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 N)) (*.f64 (/.f64 N (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1/3 binary64))) (*.f64 (/.f64 N (/.f64 #s(literal 1/4 binary64) N)) (neg.f64 N)))","(/.f64 (-.f64 N (*.f64 (/.f64 N (/.f64 #s(literal 1/4 binary64) N)) #s(literal 1/3 binary64))) (*.f64 (/.f64 N (/.f64 #s(literal 1/4 binary64) N)) N))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 N #s(literal 1/3 binary64))) (*.f64 (/.f64 N (/.f64 #s(literal 1/4 binary64) N)) #s(literal 1 binary64))) (*.f64 (/.f64 N (/.f64 #s(literal 1/4 binary64) N)) (/.f64 N #s(literal 1/3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 N)) (*.f64 (*.f64 N (*.f64 N #s(literal 4 binary64))) #s(literal -1/3 binary64))) (*.f64 (*.f64 N (*.f64 N #s(literal 4 binary64))) (neg.f64 N)))","(/.f64 (-.f64 N (*.f64 (*.f64 N (*.f64 N #s(literal 4 binary64))) #s(literal 1/3 binary64))) (*.f64 (*.f64 N (*.f64 N #s(literal 4 binary64))) N))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 N #s(literal 1/3 binary64))) (*.f64 (*.f64 N (*.f64 N #s(literal 4 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 N (*.f64 N #s(literal 4 binary64))) (/.f64 N #s(literal 1/3 binary64))))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1/3 binary64)) (neg.f64 N))","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (pow.f64 N #s(literal -1 binary64))) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64))) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal 6 binary64))) (*.f64 #s(literal 1/27 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) (neg.f64 (neg.f64 N)))","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (neg.f64 N)))","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (neg.f64 N)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) N))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal 1 binary64)) N)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) N) N) (*.f64 N #s(literal 1/3 binary64))) (*.f64 N N))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (*.f64 N (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (*.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (neg.f64 N))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 #s(literal 1/4 binary64) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 (/.f64 #s(literal 1/4 binary64) N) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 N #s(literal -1 binary64)) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (pow.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (pow.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 2 binary64)) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) (*.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) #s(literal 1/9 binary64))) (*.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 3 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))) (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) #s(literal 1/27 binary64))) (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) (neg.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) (neg.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64)))))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))))","(fma.f64 #s(literal -1/4 binary64) (/.f64 #s(literal -1 binary64) N) #s(literal -1/3 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1/4 binary64) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal -1 binary64)) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 2 binary64)) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) (/.f64 #s(literal 1/9 binary64) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 3 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))) (/.f64 #s(literal 1/27 binary64) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))","(+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))","(*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) N))","(pow.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)) (*.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N))) (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 N N #s(literal -1 binary64))) (-.f64 N #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 N N))) (-.f64 #s(literal 1 binary64) N))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (neg.f64 (-.f64 N #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N))) (neg.f64 (-.f64 #s(literal 1 binary64) N)))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) N))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) N #s(literal 1 binary64))","(fma.f64 N #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N)))","(+.f64 #s(literal 1 binary64) N)","(+.f64 N #s(literal 1 binary64))","(*.f64 (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (log.f64 N))","(*.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) #s(literal 1 binary64))","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 3/2 binary64) (*.f64 (log.f64 (log.f64 N)) #s(literal 3/2 binary64))))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64) (log.f64 (log.f64 N))))","(exp.f64 (+.f64 (log.f64 (log.f64 N)) (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (log1p.f64 N) (log1p.f64 N))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (pow.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N)))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)))","(fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N)))","(fma.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)))","(exp.f64 (+.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(+.f64 (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)))","(+.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)))","(+.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N)))","(*.f64 (neg.f64 (log.f64 N)) (neg.f64 (log.f64 N)))","(*.f64 (log.f64 N) (log.f64 N))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(exp.f64 (+.f64 (log.f64 (log.f64 N)) (log.f64 (log.f64 N))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":362.416015625,"type":"rewrite"},{"compiler":[[59039,5585]],"memory":[[13981136,146812736]],"time":235.567138671875,"type":"eval"},{"alts":[["(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.25057005192903,"binary64"],["(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.17542633474434,"binary64"],["(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","fresh",46.44727954047183,"binary64"],["(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","fresh",46.61055083622199,"binary64"],["(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.185820534960634,"binary64"],["(/.f64 (fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log1p.f64 N) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (log.f64 N)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",46.40658001154136,"binary64"],["(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))) (log.f64 N) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (log.f64 N)))","fresh",46.74655866764803,"binary64"],["(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))))) (*.f64 (log.f64 N) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","fresh",46.6554567603106,"binary64"],["(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",47.350046612910006,"binary64"],["(/.f64 (-.f64 (pow.f64 (-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",47.6045950636898,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","fresh",47.32819441014215,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","done",47.323466653972076,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","fresh",47.30077216436641,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","next",47.32852648360092,"binary64"],["(/.f64 #s(approx (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (/.f64 (-.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -4/3 binary64) (fma.f64 (log.f64 N) (/.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (fma.f64 (log.f64 N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 N N)) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal -1/4 binary64) (fma.f64 (/.f64 #s(literal 1/3 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 N N)))))))))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))) N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",2.7833305289234995,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.30454979776813,"binary64"],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","fresh",47.304762443607984,"binary64"],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",47.429901883283684,"binary64"],["(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","fresh",47.22348201718965,"binary64"],["(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","fresh",47.161415100621426,"binary64"],["(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","fresh",47.29966076403235,"binary64"],["(-.f64 (log1p.f64 N) (log.f64 N))","fresh",47.35433261714812,"binary64"],["(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.30473893074149,"binary64"],["(neg.f64 (fma.f64 (sqrt.f64 (log.f64 N)) (sqrt.f64 (log.f64 N)) (neg.f64 (log1p.f64 N))))","fresh",46.397517043236995,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","fresh",45.14751007752103,"binary64"],["(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","fresh",3.503633451194507,"binary64"],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","next",45.478011022850986,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)))) N))","fresh",2.6616504126573415,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))))","next",2.8695820361887026,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -2 binary64))) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))","fresh",2.9301811186969906,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","fresh",3.484465909798855,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","done",2.5860954912126575,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","fresh",2.5860954912126575,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64))) N))","fresh",2.618094631124329,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","fresh",3.513730137590536,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 N)) N) (*.f64 N (neg.f64 N))))","fresh",2.733260928814189,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","fresh",2.7645300699677975,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","next",5.400620081758022,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 N (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)))","fresh",2.7622295457733714,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal -1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N)))","fresh",2.7817607957664574,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","next",2.57047049121456,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","done",11.103125197419944,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","fresh",2.6763957862000636,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))","fresh",2.6251916348815882,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","fresh",2.915538692885128,"binary64"]],"compiler":[[24,13],[30,14],[31,15],[10,6],[25,12],[44,11],[45,20],[50,20],[43,23],[30,19],[25,13],[22,12],[15,9],[27,15],[141,60],[17,11],[41,14],[21,10],[31,14],[31,14],[31,14],[5,4],[23,12],[11,7],[7,6],[23,17],[6,5],[41,24],[67,32],[45,25],[19,15],[23,18],[32,24],[25,19],[21,16],[29,20],[33,22],[27,21],[41,21],[41,21],[25,20],[11,9],[29,21],[26,20],[37,28],[24,13],[30,14],[31,15],[10,6],[25,12],[44,11],[45,20],[50,20],[43,23],[30,19],[25,13],[15,9],[27,15],[141,60],[17,11],[41,14],[21,10],[31,14],[31,14],[31,14],[5,4],[23,12],[11,7],[7,6],[23,17],[6,5],[41,24],[67,32],[45,25],[19,15],[32,24],[25,19],[21,16],[29,20],[33,22],[27,21],[41,21],[41,21],[25,20],[29,21],[26,20],[37,28]],"count":[[1384,45]],"kept":[{"done":[0,0],"fresh":[12,10],"new":[1367,32],"picked":[5,3]}],"memory":[[-6657120,76904064]],"min-error":[[0.21633577546328878,"binary64"]],"time":83.242919921875,"type":"prune"},{"egraph":[[0,8027,578,0.05745919],[4,2885,581,0.046947579],[3,738,583,0.013809717],[2,289,597,0.003995668],[1,157,615,0.001465474],[0,99,618,0.001180198],[0,61,628,0.000617727]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(literal 1 binary64)","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","N","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(/.f64 #s(literal -1/2 binary64) N)","#s(literal -1/2 binary64)","N","#s(literal -1 binary64)","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(/.f64 (+.f64 #s(literal 1 binary64) N) N)","(+.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","N","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N)))))","(-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64))))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64))","(/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","#s(literal 3 binary64)","(*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))","#s(literal -1 binary64)","(pow.f64 N #s(literal -3 binary64))","#s(literal -3 binary64)","(+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))","#s(literal 2 binary64)","(+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N)))","(pow.f64 N #s(literal -2 binary64))","#s(literal -2 binary64)","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","(/.f64 #s(literal -1 binary64) N)","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","(log1p.f64 N)","N","#s(literal 4 binary64)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(log.f64 N)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(+.f64 (log.f64 N) (log1p.f64 N))","#s(literal -1 binary64)","(fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","#s(literal 2 binary64)"]],"locations":[["(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","cost-diff",0],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","cost-diff",0],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","cost-diff",0],["(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","cost-diff",2],["(*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))","cost-diff",1],["(-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64))))","cost-diff",1],["(+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))","cost-diff",3],["(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","cost-diff",4],["(+.f64 #s(literal 1 binary64) N)","cost-diff",0],["(/.f64 (+.f64 #s(literal 1 binary64) N) N)","cost-diff",0],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","cost-diff",0],["#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","cost-diff",0],["(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","cost-diff",0],["(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","cost-diff",0],["(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","cost-diff",2]],"memory":[[-3049248,30990368]],"method":["egg-herbie"],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","#s(literal 1 binary64)","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","N","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(/.f64 #s(literal -1/2 binary64) N)","#s(literal -1/2 binary64)","N","#s(literal -1 binary64)","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(/.f64 (+.f64 #s(literal 1 binary64) N) N)","(+.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","N","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 (pow.f64 N #s(literal -3 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64))) (fma.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 N #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N)))))","(/.f64 (+.f64 (pow.f64 N #s(literal -3 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64))) (fma.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 N #s(literal -2 binary64))))","(-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64))))","(+.f64 (pow.f64 N #s(literal -3 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64))","(/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","#s(literal 3 binary64)","(*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))","(neg.f64 (pow.f64 N #s(literal -3 binary64)))","#s(literal -1 binary64)","(pow.f64 N #s(literal -3 binary64))","#s(literal -3 binary64)","(+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))","(fma.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 N #s(literal -2 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))","#s(literal 2 binary64)","(+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N)))","(+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 N #s(literal -2 binary64)))","(pow.f64 N #s(literal -2 binary64))","#s(literal -2 binary64)","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) N)","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","(log1p.f64 N)","N","#s(literal 4 binary64)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(log.f64 N)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(+.f64 (log.f64 N) (log1p.f64 N))","#s(literal -1 binary64)","(fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":221.256103515625,"type":"simplify"},{"compiler":[[546,51]],"locations":[["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","accuracy",0.5201950195368841],["(pow.f64 (log.f64 N) #s(literal 4 binary64))","accuracy",0.9353031251802899],["(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","accuracy",0.9362605958749638],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","accuracy",46.41754414244552],["(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","accuracy",0.33041000976844204],["(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))","accuracy",0.5052337890737681],["(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64))","accuracy",0.7388040528217029],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))))","accuracy",2.5177533213026098],["(+.f64 #s(literal 1 binary64) N)","accuracy",0.0],["(/.f64 (+.f64 #s(literal 1 binary64) N) N)","accuracy",0.01171875],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","accuracy",45.54201248042199],["(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","accuracy",0.0078125],["(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","accuracy",0.09375],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","accuracy",2.5177533213026098],["#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","accuracy",11.264200116197395],["(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","accuracy",0.07421875],["(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","accuracy",0.10546875],["(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","accuracy",0.28125],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","accuracy",2.5177533213026098]],"memory":[[-7218736,77916352]],"mixsample":[[33.462158203125,"ival-div",0],[23.6630859375,"adjust",800],[0.037841796875,"ival-pow2",400],[0.7177734375,"ival-div",400],[0.0751953125,"const",400],[0.1435546875,"ival-assert",0],[13.75048828125,"ival-sub",0],[0.09619140625,"ival-sub",400],[8.248779296875,"const",0],[4.6015625,"ival-log1p",400],[42.1767578125,"ival-pow",0],[9.88720703125,"ival-add",0],[0.064208984375,"ival-mult",400],[11.194091796875,"ival-mult",0],[2.75439453125,"ival-log",400],[0.5185546875,"ival-add",400],[15.8671875,"ival-log",0],[0.335693359375,"ival-true",0],[7.93359375,"ival-log1p",0],[2.965087890625,"ival-pow",400],[1.266845703125,"exact",0],[9.107421875,"ival-pow2",0]],"outcomes":[[231.204345703125,1,"valid",183],[37.107177734375,0,"valid",73]],"time":328.371826171875,"type":"localize"},{"count":[[26,157]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(/.f64 (+.f64 #s(literal 1 binary64) N) N)","(+.f64 #s(literal 1 binary64) N)","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","(+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))","(-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))"]],"memory":[[4905312,28129952]],"outputs":[["(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(* -4 (pow N 4))","(* (pow N 4) (- (* -16/3 N) 4))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1/2 N))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* 1/3 N) 1/2)))))","(/ 1 N)","(/ (+ 1 N) N)","1","(+ 1 N)","(/ 1/4 (pow N 5))","(/ (+ 1/4 (* -1/3 N)) (pow N 5))","(/ (+ 1/4 (* N (- (* 1/2 N) 1/3))) (pow N 5))","(/ 1/16 (pow N 8))","(/ (+ 1/16 (* -1/6 N)) (pow N 8))","(/ (+ 1/16 (* N (- (* 13/36 N) 1/6))) (pow N 8))","(/ (+ 1/16 (* N (- (* N (+ 13/36 (* -1/12 N))) 1/6))) (pow N 8))","(/ -1/64 (pow N 12))","(/ (- (* 1/16 N) 1/64) (pow N 12))","(/ (- (* N (+ 1/16 (* -17/96 N))) 1/64) (pow N 12))","(/ (- (* N (+ 1/16 (* N (- (* 31/108 N) 17/96)))) 1/64) (pow N 12))","(/ -1 (pow N 3))","(* -1 (pow (log N) 3))","(+ (* -1 (pow (log N) 3)) (* N (pow (log N) 2)))","(+ (* -1 (pow (log N) 3)) (* N (- (* -1 (* N (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(+ (* -1 (pow (log N) 3)) (* N (- (* N (- (* -1 (* N (+ (* -1 (/ (+ (log N) (* 1/2 (pow (log N) 2))) (log N))) (+ (* -1/2 (log N)) (* -1/3 (pow (log N) 2)))))) (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ 1 (+ (* -1 (log N)) (* 1/3 (pow (log N) 2)))) (pow (log N) 2))) (+ (* -1 (/ (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))) (log N))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(* -1 (pow (log N) 4))","(- (pow N 4) (pow (log N) 4))","(- (* (pow N 4) (+ 1 (* -2 N))) (pow (log N) 4))","(- (* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2)))) (pow (log N) 4))","(pow N 4)","(* (pow N 4) (+ 1 (* -2 N)))","(* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2))))","(* (pow N 4) (+ 1 (* N (- (* N (+ 17/6 (* -7/2 N))) 2))))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(/ (+ 1/16 (* N (- (* N (+ 13/36 (* -1/3 N))) 1/6))) (pow N 8))","(pow (log N) 4)","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","N","(* N (+ 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(+ 1 (/ 1 N))","(* N (+ 1 (/ 1 N)))","(/ 1/2 (pow N 3))","(/ (- 1/2 (* 1/3 (/ 1 N))) (pow N 3))","(/ (- (+ 1/2 (/ 1/4 (pow N 2))) (* 1/3 (/ 1 N))) (pow N 3))","(/ 1 (pow N 2))","(/ (+ 1 (* 1/2 (/ 1 N))) (pow N 2))","(/ (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))) (pow N 2))","(/ (+ 1 (+ (* -1 (/ (+ 1/12 (* 1/12 (/ 1 N))) (pow N 2))) (* 1/2 (/ 1 N)))) (pow N 2))","(/ 1 (pow N 3))","(/ (- 1 (* 1/8 (/ 1 (pow N 3)))) (pow N 3))","(/ (- (+ 1 (/ 1/4 (pow N 4))) (* 1/8 (/ 1 (pow N 3)))) (pow N 3))","(/ (- (+ 1 (/ 1/4 (pow N 4))) (+ (* 1/8 (/ 1 (pow N 3))) (* 17/48 (/ 1 (pow N 5))))) (pow N 3))","(* 2 (/ (pow (log (/ 1 N)) 2) N))","(/ (- (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))) (* -1 (/ (log (/ 1 N)) N))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2)))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2)))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (log (/ 1 N)))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (log (/ 1 N)))) (* 1/2 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 1/4 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2))))))))) N)","(/ (- (+ 1 (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) (+ (* -1/4 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (pow (log (/ 1 N)) 3))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (pow (log (/ 1 N)) 3)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ 1 (+ (* -2 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))))))) N)","(* -4 (/ (pow (log (/ 1 N)) 3) N))","(/ (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (* 4 (/ (pow (log (/ 1 N)) 2) N)))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (* 4 (/ (pow (log (/ 1 N)) 2) N)))))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (+ 1 (log (/ 1 N))) 2) (pow N 3))))))))) N)","(pow (log (/ 1 N)) 4)","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (pow (log (/ 1 N)) 4))","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))","(+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 3))) (+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(/ -1/8 (pow N 6))","(/ (- (* 1/4 (/ 1 N)) 1/8) (pow N 6))","(/ (- (* 1/4 (/ 1 N)) (+ 1/8 (/ 17/48 (pow N 2)))) (pow N 6))","(/ (- (+ (* 1/4 (/ 1 N)) (* 31/108 (/ 1 (pow N 3)))) (+ 1/8 (/ 17/48 (pow N 2)))) (pow N 6))","(/ 1/4 (pow N 4))","(/ (- 1/4 (* 1/3 (/ 1 N))) (pow N 4))","(/ (- (+ 1/4 (/ 13/36 (pow N 2))) (* 1/3 (/ 1 N))) (pow N 4))","(/ (- (+ 1/4 (/ 13/36 (pow N 2))) (+ (* 1/3 (/ 1 N)) (* 1/6 (/ 1 (pow N 3))))) (pow N 4))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) (pow N 3)))","(* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) (pow N 3)))","(/ (+ 1 (* -1 (/ (- (* 1/12 (/ 1 N)) 1/2) N))) (pow N 2))","(/ (+ 1 (* -1 (/ (- (+ (/ 1/12 (pow N 2)) (* 1/12 (/ 1 N))) 1/2) N))) (pow N 2))","(* -1 (/ (- (* 1/8 (/ 1 (pow N 3))) 1) (pow N 3)))","(* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/8) (pow N 3))) 1) (pow N 3)))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 17/48 (/ 1 N)) 1/4) N)) 1/8) (pow N 3))) 1) (pow N 3)))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 1/2 (/ (* (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) N)) (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) N)) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)","(+ (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/ (- (* -1 (/ (- (* 17/48 (/ 1 N)) 1/4) N)) 1/8) (pow N 6))","(/ (- (* -1 (/ (- (* -1 (/ (- (* 31/108 (/ 1 N)) 17/48) N)) 1/4) N)) 1/8) (pow N 6))","(/ (+ 1/4 (* -1 (/ (- 1/3 (* 13/36 (/ 1 N))) N))) (pow N 4))","(/ (+ 1/4 (* -1 (/ (+ 1/3 (* -1 (/ (- 13/36 (* 1/6 (/ 1 N))) N))) N))) (pow N 4))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))"]],"series":[[20.242919921875,"((/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (- (log (+ N 1)) (log N)) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (log (/ (+ 1 N) N)) (/ (+ 1 N) N) (+ 1 N) (* (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) (/ -1 N)) (+ (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 2) (+ (pow N -2) (* (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) (/ -1 N)))) (- (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 3) (* -1 (pow N -3))) (* -1 (pow N -3)) (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (/ (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (+ (* (log N) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (log (+ 1 N)) 4) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (- (log (+ N 1)) (log N)) (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 3) (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 2) (pow (log N) 4) (pow (log (+ 1 N)) 2))","N","-inf"],[21.64306640625,"((/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (- (log (+ N 1)) (log N)) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (log (/ (+ 1 N) N)) (/ (+ 1 N) N) (+ 1 N) (* (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) (/ -1 N)) (+ (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 2) (+ (pow N -2) (* (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) (/ -1 N)))) (- (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 3) (* -1 (pow N -3))) (* -1 (pow N -3)) (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (/ (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (+ (* (log N) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (log (+ 1 N)) 4) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (- (log (+ N 1)) (log N)) (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 3) (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 2) (pow (log N) 4) (pow (log (+ 1 N)) 2))","N","inf"],[11.322021484375,"((/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (- (log (+ N 1)) (log N)) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (log (/ (+ 1 N) N)) (/ (+ 1 N) N) (+ 1 N) (* (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) (/ -1 N)) (+ (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 2) (+ (pow N -2) (* (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) (/ -1 N)))) (- (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 3) (* -1 (pow N -3))) (* -1 (pow N -3)) (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (/ (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (+ (* (log N) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (log (+ 1 N)) 4) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (- (log (+ N 1)) (log N)) (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 3) (pow (/ (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) N) 2) (pow (log N) 4) (pow (log (+ 1 N)) 2))","N","0"]],"time":58.10595703125,"type":"series"},{"count":[[157,156]],"egraph":[[0,8438,5700,0.118599812],[1,2601,5929,0.029300438],[0,851,6963,0.009587748]],"inputs":[["(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(* -4 (pow N 4))","(* (pow N 4) (- (* -16/3 N) 4))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1/2 N))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* 1/3 N) 1/2)))))","(/ 1 N)","(/ (+ 1 N) N)","1","(+ 1 N)","(/ 1/4 (pow N 5))","(/ (+ 1/4 (* -1/3 N)) (pow N 5))","(/ (+ 1/4 (* N (- (* 1/2 N) 1/3))) (pow N 5))","(/ 1/16 (pow N 8))","(/ (+ 1/16 (* -1/6 N)) (pow N 8))","(/ (+ 1/16 (* N (- (* 13/36 N) 1/6))) (pow N 8))","(/ (+ 1/16 (* N (- (* N (+ 13/36 (* -1/12 N))) 1/6))) (pow N 8))","(/ -1/64 (pow N 12))","(/ (- (* 1/16 N) 1/64) (pow N 12))","(/ (- (* N (+ 1/16 (* -17/96 N))) 1/64) (pow N 12))","(/ (- (* N (+ 1/16 (* N (- (* 31/108 N) 17/96)))) 1/64) (pow N 12))","(/ -1 (pow N 3))","(* -1 (pow (log N) 3))","(+ (* -1 (pow (log N) 3)) (* N (pow (log N) 2)))","(+ (* -1 (pow (log N) 3)) (* N (- (* -1 (* N (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(+ (* -1 (pow (log N) 3)) (* N (- (* N (- (* -1 (* N (+ (* -1 (/ (+ (log N) (* 1/2 (pow (log N) 2))) (log N))) (+ (* -1/2 (log N)) (* -1/3 (pow (log N) 2)))))) (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ 1 (+ (* -1 (log N)) (* 1/3 (pow (log N) 2)))) (pow (log N) 2))) (+ (* -1 (/ (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))) (log N))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(* -1 (pow (log N) 4))","(- (pow N 4) (pow (log N) 4))","(- (* (pow N 4) (+ 1 (* -2 N))) (pow (log N) 4))","(- (* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2)))) (pow (log N) 4))","(pow N 4)","(* (pow N 4) (+ 1 (* -2 N)))","(* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2))))","(* (pow N 4) (+ 1 (* N (- (* N (+ 17/6 (* -7/2 N))) 2))))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(/ (+ 1/16 (* N (- (* N (+ 13/36 (* -1/3 N))) 1/6))) (pow N 8))","(pow (log N) 4)","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","N","(* N (+ 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(+ 1 (/ 1 N))","(* N (+ 1 (/ 1 N)))","(/ 1/2 (pow N 3))","(/ (- 1/2 (* 1/3 (/ 1 N))) (pow N 3))","(/ (- (+ 1/2 (/ 1/4 (pow N 2))) (* 1/3 (/ 1 N))) (pow N 3))","(/ 1 (pow N 2))","(/ (+ 1 (* 1/2 (/ 1 N))) (pow N 2))","(/ (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))) (pow N 2))","(/ (+ 1 (+ (* -1 (/ (+ 1/12 (* 1/12 (/ 1 N))) (pow N 2))) (* 1/2 (/ 1 N)))) (pow N 2))","(/ 1 (pow N 3))","(/ (- 1 (* 1/8 (/ 1 (pow N 3)))) (pow N 3))","(/ (- (+ 1 (/ 1/4 (pow N 4))) (* 1/8 (/ 1 (pow N 3)))) (pow N 3))","(/ (- (+ 1 (/ 1/4 (pow N 4))) (+ (* 1/8 (/ 1 (pow N 3))) (* 17/48 (/ 1 (pow N 5))))) (pow N 3))","(* 2 (/ (pow (log (/ 1 N)) 2) N))","(/ (- (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))) (* -1 (/ (log (/ 1 N)) N))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2)))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2)))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (log (/ 1 N)))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (log (/ 1 N)))) (* 1/2 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 1/4 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2))))))))) N)","(/ (- (+ 1 (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) (+ (* -1/4 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (pow (log (/ 1 N)) 3))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (pow (log (/ 1 N)) 3)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ 1 (+ (* -2 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))))))) N)","(* -4 (/ (pow (log (/ 1 N)) 3) N))","(/ (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (* 4 (/ (pow (log (/ 1 N)) 2) N)))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (* 4 (/ (pow (log (/ 1 N)) 2) N)))))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (+ 1 (log (/ 1 N))) 2) (pow N 3))))))))) N)","(pow (log (/ 1 N)) 4)","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (pow (log (/ 1 N)) 4))","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))","(+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 3))) (+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(/ -1/8 (pow N 6))","(/ (- (* 1/4 (/ 1 N)) 1/8) (pow N 6))","(/ (- (* 1/4 (/ 1 N)) (+ 1/8 (/ 17/48 (pow N 2)))) (pow N 6))","(/ (- (+ (* 1/4 (/ 1 N)) (* 31/108 (/ 1 (pow N 3)))) (+ 1/8 (/ 17/48 (pow N 2)))) (pow N 6))","(/ 1/4 (pow N 4))","(/ (- 1/4 (* 1/3 (/ 1 N))) (pow N 4))","(/ (- (+ 1/4 (/ 13/36 (pow N 2))) (* 1/3 (/ 1 N))) (pow N 4))","(/ (- (+ 1/4 (/ 13/36 (pow N 2))) (+ (* 1/3 (/ 1 N)) (* 1/6 (/ 1 (pow N 3))))) (pow N 4))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) (pow N 3)))","(* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) (pow N 3)))","(/ (+ 1 (* -1 (/ (- (* 1/12 (/ 1 N)) 1/2) N))) (pow N 2))","(/ (+ 1 (* -1 (/ (- (+ (/ 1/12 (pow N 2)) (* 1/12 (/ 1 N))) 1/2) N))) (pow N 2))","(* -1 (/ (- (* 1/8 (/ 1 (pow N 3))) 1) (pow N 3)))","(* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/8) (pow N 3))) 1) (pow N 3)))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 17/48 (/ 1 N)) 1/4) N)) 1/8) (pow N 3))) 1) (pow N 3)))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 1/2 (/ (* (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) N)) (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) N)) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)","(+ (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/ (- (* -1 (/ (- (* 17/48 (/ 1 N)) 1/4) N)) 1/8) (pow N 6))","(/ (- (* -1 (/ (- (* -1 (/ (- (* 31/108 (/ 1 N)) 17/48) N)) 1/4) N)) 1/8) (pow N 6))","(/ (+ 1/4 (* -1 (/ (- 1/3 (* 13/36 (/ 1 N))) N))) (pow N 4))","(/ (+ 1/4 (* -1 (/ (+ 1/3 (* -1 (/ (- 13/36 (* 1/6 (/ 1 N))) N))) N))) (pow N 4))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))"]],"memory":[[2179344,61693936]],"method":["egg-herbie"],"outputs":[["(/ -1/4 (pow N 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(* -4 (pow N 4))","(*.f64 #s(literal -4 binary64) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* -16/3 N) 4))","(*.f64 (fma.f64 #s(literal -16/3 binary64) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(*.f64 (fma.f64 (fma.f64 #s(literal 8/9 binary64) N #s(literal -16/3 binary64)) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -112/27 binary64) N #s(literal 8/9 binary64)) N #s(literal -16/3 binary64)) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ -1/4 (pow N 3))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(+ N (* -1 (log N)))","(-.f64 N (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* -1/2 N))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* 1/3 N) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ (+ 1 N) N)","(/.f64 (+.f64 #s(literal 1 binary64) N) N)","1","#s(literal 1 binary64)","(+ 1 N)","(+.f64 #s(literal 1 binary64) N)","(/ 1/4 (pow N 5))","(/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 5 binary64)))","(/ (+ 1/4 (* -1/3 N)) (pow N 5))","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (pow.f64 N #s(literal 5 binary64)))","(/ (+ 1/4 (* N (- (* 1/2 N) 1/3))) (pow N 5))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) N #s(literal -1/3 binary64)) N #s(literal 1/4 binary64)) (pow.f64 N #s(literal 5 binary64)))","(/ 1/16 (pow N 8))","(/.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal 8 binary64)))","(/ (+ 1/16 (* -1/6 N)) (pow N 8))","(/.f64 (fma.f64 #s(literal -1/6 binary64) N #s(literal 1/16 binary64)) (pow.f64 N #s(literal 8 binary64)))","(/ (+ 1/16 (* N (- (* 13/36 N) 1/6))) (pow N 8))","(/.f64 (fma.f64 (fma.f64 #s(literal 13/36 binary64) N #s(literal -1/6 binary64)) N #s(literal 1/16 binary64)) (pow.f64 N #s(literal 8 binary64)))","(/ (+ 1/16 (* N (- (* N (+ 13/36 (* -1/12 N))) 1/6))) (pow N 8))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/12 binary64) N #s(literal 13/36 binary64)) N #s(literal -1/6 binary64)) N #s(literal 1/16 binary64)) (pow.f64 N #s(literal 8 binary64)))","(/ -1/64 (pow N 12))","(/.f64 #s(literal -1/64 binary64) (pow.f64 N #s(literal 12 binary64)))","(/ (- (* 1/16 N) 1/64) (pow N 12))","(/.f64 (fma.f64 #s(literal 1/16 binary64) N #s(literal -1/64 binary64)) (pow.f64 N #s(literal 12 binary64)))","(/ (- (* N (+ 1/16 (* -17/96 N))) 1/64) (pow N 12))","(/.f64 (fma.f64 (fma.f64 #s(literal -17/96 binary64) N #s(literal 1/16 binary64)) N #s(literal -1/64 binary64)) (pow.f64 N #s(literal 12 binary64)))","(/ (- (* N (+ 1/16 (* N (- (* 31/108 N) 17/96)))) 1/64) (pow N 12))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 31/108 binary64) N #s(literal -17/96 binary64)) N #s(literal 1/16 binary64)) N #s(literal -1/64 binary64)) (pow.f64 N #s(literal 12 binary64)))","(/ -1 (pow N 3))","(/.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)))","(* -1 (pow (log N) 3))","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))","(+ (* -1 (pow (log N) 3)) (* N (pow (log N) 2)))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(+ (* -1 (pow (log N) 3)) (* N (- (* -1 (* N (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(fma.f64 (fma.f64 (neg.f64 N) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(+ (* -1 (pow (log N) 3)) (* N (- (* N (- (* -1 (* N (+ (* -1 (/ (+ (log N) (* 1/2 (pow (log N) 2))) (log N))) (+ (* -1/2 (log N)) (* -1/3 (pow (log N) 2)))))) (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (-.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/3 binary64) (*.f64 #s(literal -1/2 binary64) (log.f64 N))) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64) (log.f64 N)) (log.f64 N))) N (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64) (log.f64 N)))) N (pow.f64 (log.f64 N) #s(literal 2 binary64))) N (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (neg.f64 N) (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ 1 (+ (* -1 (log N)) (* 1/3 (pow (log N) 2)))) (pow (log N) 2))) (+ (* -1 (/ (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))) (log N))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (log.f64 N)) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (log.f64 N))) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) N (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(* -1 (pow (log N) 4))","(neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(- (pow N 4) (pow (log N) 4))","(-.f64 (pow.f64 N #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(- (* (pow N 4) (+ 1 (* -2 N))) (pow (log N) 4))","(-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(- (* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2)))) (pow (log N) 4))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/6 binary64) N #s(literal -2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow N 4)","(pow.f64 N #s(literal 4 binary64))","(* (pow N 4) (+ 1 (* -2 N)))","(*.f64 (fma.f64 #s(literal -2 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 17/6 binary64) N #s(literal -2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (+ 1 (* N (- (* N (+ 17/6 (* -7/2 N))) 2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -7/2 binary64) N #s(literal 17/6 binary64)) N #s(literal -2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ 1/4 (pow N 2))","(/.f64 #s(literal 1/4 binary64) (*.f64 N N))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N) N)","(/ 1/4 N)","(/.f64 #s(literal 1/4 binary64) N)","(/ (+ 1/4 (* -1/3 N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(/ (+ 1/16 (* N (- (* N (+ 13/36 (* -1/3 N))) 1/6))) (pow N 8))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 13/36 binary64)) N #s(literal -1/6 binary64)) N #s(literal 1/16 binary64)) (pow.f64 N #s(literal 8 binary64)))","(pow (log N) 4)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(pow N 2)","(*.f64 N N)","(* (pow N 2) (+ 1 (* -1 N)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) N) N)","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) N #s(literal -1 binary64)) N #s(literal 1 binary64)) N) N)","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/6 binary64) N #s(literal 11/12 binary64)) N #s(literal -1 binary64)) N #s(literal 1 binary64)) N) N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64)) N)) N)","N","(* N (+ 1 (* 1/2 (/ 1 N))))","(+.f64 #s(literal 1/2 binary64) N)","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N))","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","(*.f64 (+.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N))) N)","(- 1 (* 1/2 (/ 1 N)))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64)) N))","(/ -1/2 N)","(/.f64 #s(literal -1/2 binary64) N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64)) N)","(+ 1 (/ 1 N))","(+.f64 (/.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))","(* N (+ 1 (/ 1 N)))","(+.f64 #s(literal 1 binary64) N)","(/ 1/2 (pow N 3))","(/.f64 #s(literal 1/2 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- 1/2 (* 1/3 (/ 1 N))) (pow N 3))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (+ 1/2 (/ 1/4 (pow N 2))) (* 1/3 (/ 1 N))) (pow N 3))","(/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))","(/ 1 (pow N 2))","(/.f64 (/.f64 #s(literal 1 binary64) N) N)","(/ (+ 1 (* 1/2 (/ 1 N))) (pow N 2))","(/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N) N)","(/ (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))) (pow N 2))","(/.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N)) (*.f64 N N))","(/ (+ 1 (+ (* -1 (/ (+ 1/12 (* 1/12 (/ 1 N))) (pow N 2))) (* 1/2 (/ 1 N)))) (pow N 2))","(/.f64 (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/12 binary64) N) #s(literal -1/12 binary64)) N) N) (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64))) (*.f64 N N))","(/ 1 (pow N 3))","(/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- 1 (* 1/8 (/ 1 (pow N 3)))) (pow N 3))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 N #s(literal 3 binary64)))","(/ (- (+ 1 (/ 1/4 (pow N 4))) (* 1/8 (/ 1 (pow N 3)))) (pow N 3))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1/8 binary64) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 N #s(literal 3 binary64)))","(/ (- (+ 1 (/ 1/4 (pow N 4))) (+ (* 1/8 (/ 1 (pow N 3))) (* 17/48 (/ 1 (pow N 5))))) (pow N 3))","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1/8 binary64) (pow.f64 N #s(literal 3 binary64)))) (/.f64 #s(literal 17/48 binary64) (pow.f64 N #s(literal 5 binary64)))) (pow.f64 N #s(literal 3 binary64)))","(* 2 (/ (pow (log (/ 1 N)) 2) N))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal 2 binary64))","(/ (- (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))) (* -1 (/ (log (/ 1 N)) N))) N)","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64) (-.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N))) N) (/.f64 (log.f64 N) N))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2)))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2)))))) N)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)))) (*.f64 (*.f64 (neg.f64 (log.f64 N)) N) N)) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (neg.f64 (log.f64 N)) N))) (-.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N)) (neg.f64 (log.f64 N))) (*.f64 (*.f64 (neg.f64 (log.f64 N)) N) N)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (/.f64 (neg.f64 (log.f64 N)) N) N) #s(literal 1/2 binary64) (/.f64 (log.f64 N) N))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (log (/ 1 N)))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (log (/ 1 N)))) (* 1/2 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 1/4 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2))))))))) N)","(/.f64 (-.f64 (-.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)))) (*.f64 (*.f64 (neg.f64 (log.f64 N)) N) N)) (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 11/12 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N))) N))) (/.f64 (log.f64 N) N)) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)))) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N)) (neg.f64 (log.f64 N))) (neg.f64 (log.f64 N)))) (*.f64 (log.f64 N) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N)) (neg.f64 (log.f64 N))) (*.f64 (*.f64 (neg.f64 (log.f64 N)) N) N))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N)) (neg.f64 (log.f64 N))) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 (/.f64 (neg.f64 (log.f64 N)) N) N) #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 1/3 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))))) N)","(/ (- (+ 1 (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) N)","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N)) (/.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) N)","(/.f64 (-.f64 (fma.f64 #s(literal -1/4 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N)) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)))) (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) N))) #s(literal 1 binary64)) (*.f64 #s(literal -1/4 binary64) (fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))) (*.f64 N N)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (+.f64 (/.f64 (fma.f64 #s(literal 2 binary64) (log.f64 N) (fma.f64 (*.f64 #s(literal 2 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) N)) (/.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) (+ (* -1/4 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (pow (log (/ 1 N)) 3))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (pow (log (/ 1 N)) 3)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ 1 (+ (* -2 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))))))) N)","(/.f64 (-.f64 (fma.f64 #s(literal -1/4 binary64) (+.f64 (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 11/12 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)))) (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) N))) #s(literal 1 binary64)) (fma.f64 #s(literal -1/4 binary64) (fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))) (pow.f64 N #s(literal 3 binary64))) (/.f64 (fma.f64 #s(literal 2 binary64) (log.f64 N) (fma.f64 (*.f64 #s(literal 2 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (/.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (fma.f64 #s(literal 2 binary64) (log.f64 N) (fma.f64 (*.f64 #s(literal 2 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 3 binary64))))) (fma.f64 #s(literal -1/4 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (/.f64 #s(literal 6 binary64) N)) (/.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (log.f64 N)) (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (+.f64 (fma.f64 #s(literal 2/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (log.f64 N))) #s(literal 1 binary64))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 3 binary64))))) (*.f64 #s(literal -1/4 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 #s(literal 6 binary64) N) (/.f64 (fma.f64 #s(literal 2 binary64) (log.f64 N) (fma.f64 (*.f64 #s(literal 2 binary64) (log.f64 N)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) N))))))) N)","(* -4 (/ (pow (log (/ 1 N)) 3) N))","(*.f64 (/.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) #s(literal -4 binary64))","(/ (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (* 4 (/ (pow (log (/ 1 N)) 2) N)))) N)","(/.f64 (fma.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -4 binary64) (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N)) #s(literal 2 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal 4 binary64)))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (* 4 (/ (pow (log (/ 1 N)) 2) N)))))) N)","(/.f64 (fma.f64 #s(literal -4 binary64) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 (neg.f64 (log.f64 N)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (*.f64 (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N))) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal 4 binary64)))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (+ 1 (log (/ 1 N))) 2) (pow N 3))))))))) N)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (fma.f64 #s(literal -4 binary64) (fma.f64 (neg.f64 (log.f64 N)) (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 11/12 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64) (fma.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (*.f64 (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N))) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal 4 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64)))))))) N)","(pow (log (/ 1 N)) 4)","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (pow (log (/ 1 N)) 4))","(fma.f64 (/.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) #s(literal -4 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))","(fma.f64 (/.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) #s(literal -4 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) N) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N)) (fma.f64 (/.f64 #s(literal 4 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))))","(+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 3))) (+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))))","(fma.f64 #s(literal -4 binary64) (fma.f64 (neg.f64 (log.f64 N)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N)) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (/.f64 (*.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) (fma.f64 (/.f64 #s(literal 4 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))))","(/ -1/3 N)","(/.f64 #s(literal -1/3 binary64) N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","-1/3","#s(literal -1/3 binary64)","(- (* 1/4 (/ 1 N)) 1/3)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/ -1/8 (pow N 6))","(/.f64 #s(literal -1/8 binary64) (pow.f64 N #s(literal 6 binary64)))","(/ (- (* 1/4 (/ 1 N)) 1/8) (pow N 6))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/8 binary64)) (pow.f64 N #s(literal 6 binary64)))","(/ (- (* 1/4 (/ 1 N)) (+ 1/8 (/ 17/48 (pow N 2)))) (pow N 6))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/8 binary64)) (/.f64 #s(literal 17/48 binary64) (*.f64 N N))) (pow.f64 N #s(literal 6 binary64)))","(/ (- (+ (* 1/4 (/ 1 N)) (* 31/108 (/ 1 (pow N 3)))) (+ 1/8 (/ 17/48 (pow N 2)))) (pow N 6))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 31/108 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/4 binary64) N)) (+.f64 (/.f64 #s(literal 17/48 binary64) (*.f64 N N)) #s(literal 1/8 binary64))) (pow.f64 N #s(literal 6 binary64)))","(/ 1/4 (pow N 4))","(/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- 1/4 (* 1/3 (/ 1 N))) (pow N 4))","(/.f64 (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/3 binary64) N)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (+ 1/4 (/ 13/36 (pow N 2))) (* 1/3 (/ 1 N))) (pow N 4))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 13/36 binary64) (*.f64 N N)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1/3 binary64) N)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (+ 1/4 (/ 13/36 (pow N 2))) (+ (* 1/3 (/ 1 N)) (* 1/6 (/ 1 (pow N 3))))) (pow N 4))","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 13/36 binary64) (*.f64 N N)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1/3 binary64) N)) (/.f64 #s(literal 1/6 binary64) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 N #s(literal 4 binary64)))","(pow (log (/ 1 N)) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (fma.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 (log.f64 N) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 1 binary64) N) N)))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 (log.f64 N) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 1 binary64) N) N)) (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64)))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal 1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal 1 binary64)) (neg.f64 N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) (neg.f64 N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) (neg.f64 N))","(* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) (pow N 3)))","(/.f64 (+.f64 (/.f64 #s(literal -1/3 binary64) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) (pow N 3)))","(/.f64 (neg.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64))) (pow.f64 N #s(literal 3 binary64)))","(/ (+ 1 (* -1 (/ (- (* 1/12 (/ 1 N)) 1/2) N))) (pow N 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/2 binary64)) N)) N) N)","(/ (+ 1 (* -1 (/ (- (+ (/ 1/12 (pow N 2)) (* 1/12 (/ 1 N))) 1/2) N))) (pow N 2))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) #s(literal 1/2 binary64)) N)) (*.f64 N N))","(* -1 (/ (- (* 1/8 (/ 1 (pow N 3))) 1) (pow N 3)))","(/.f64 (+.f64 (/.f64 #s(literal -1/8 binary64) (pow.f64 N #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/8) (pow N 3))) 1) (pow N 3)))","(/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/8 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 N #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 17/48 (/ 1 N)) 1/4) N)) 1/8) (pow N 3))) 1) (pow N 3)))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 17/48 binary64) N) #s(literal 1/4 binary64)) N) #s(literal -1 binary64) #s(literal -1/8 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 (pow.f64 N #s(literal 3 binary64))))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(*.f64 (/.f64 #s(literal 4 binary64) N) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal -4 binary64) (/.f64 (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64)))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal -4 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -4 binary64) #s(literal -4 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64)))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) N) #s(literal -1 binary64) (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal -4 binary64) (/.f64 (fma.f64 (/.f64 (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -4 binary64) #s(literal -4 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (fma.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (-.f64 (/.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64)) #s(literal -4 binary64) #s(literal -4 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (fma.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64)) #s(literal 2 binary64) #s(literal 11/6 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (-.f64 (fma.f64 (/.f64 (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64)))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (*.f64 #s(literal 4/3 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))))) (/.f64 (-.f64 (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -4 binary64) #s(literal -4 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64)))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (neg.f64 N)) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64)))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))))) N) #s(literal -1 binary64) (fma.f64 (fma.f64 (neg.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))))))) (neg.f64 N))) (neg.f64 N))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal -2 binary64) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal -2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) (/.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) N) #s(literal -1 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 1/2 (/ (* (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) N)) (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal -2 binary64) (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (-.f64 (/.f64 (-.f64 (*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (fma.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64)) #s(literal 2 binary64) #s(literal 11/6 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/2 binary64) (fma.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) (/.f64 (*.f64 (-.f64 (*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) (/.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (*.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))))) (/.f64 (+.f64 (-.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -2/3 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 1 binary64) #s(literal -1 binary64)))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (neg.f64 (*.f64 (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))))) (neg.f64 N)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) (/.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (neg.f64 N)) (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (neg.f64 N))) (neg.f64 N))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N))","(*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) N) #s(literal 4 binary64))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) N)) (neg.f64 N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (neg.f64 N))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) N)) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64) (/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (fma.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64)) #s(literal 2 binary64) #s(literal 11/6 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64)))) (neg.f64 N)))) N)) (neg.f64 N))) (neg.f64 N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))","(+ (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) N) #s(literal 4 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)) (/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) N)) N))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (neg.f64 N))) (neg.f64 N))) N))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (neg.f64 N))","(/ (- (* -1 (/ (- (* 17/48 (/ 1 N)) 1/4) N)) 1/8) (pow N 6))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 17/48 binary64) N) #s(literal 1/4 binary64)) N) #s(literal -1 binary64) #s(literal -1/8 binary64)) (pow.f64 N #s(literal 6 binary64)))","(/ (- (* -1 (/ (- (* -1 (/ (- (* 31/108 (/ 1 N)) 17/48) N)) 1/4) N)) 1/8) (pow N 6))","(/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 31/108 binary64) N) #s(literal 17/48 binary64)) N) #s(literal -1 binary64) #s(literal -1/4 binary64)) N) #s(literal -1 binary64) #s(literal -1/8 binary64)) (pow.f64 N #s(literal 6 binary64)))","(/ (+ 1/4 (* -1 (/ (- 1/3 (* 13/36 (/ 1 N))) N))) (pow N 4))","(/.f64 (-.f64 #s(literal 1/4 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 13/36 binary64) N)) N)) (pow.f64 N #s(literal 4 binary64)))","(/ (+ 1/4 (* -1 (/ (+ 1/3 (* -1 (/ (- 13/36 (* 1/6 (/ 1 N))) N))) N))) (pow N 4))","(/.f64 (-.f64 #s(literal 1/4 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 (-.f64 #s(literal 13/36 binary64) (/.f64 #s(literal 1/6 binary64) N)) N)) N)) (pow.f64 N #s(literal 4 binary64)))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N) #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) N)) N))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) N)) (neg.f64 N))) N))"]],"stop":[["iter limit",1],["node limit",1]],"time":324.97509765625,"type":"simplify"},{"count":[[26,870]],"egraph":[[0,8769,372,0.072380487],[2,3227,376,0.041415789],[1,425,376,0.012477318],[0,99,406,0.00313392],[0,61,416,0.000584594]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(/.f64 (+.f64 #s(literal 1 binary64) N) N)","(+.f64 #s(literal 1 binary64) N)","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","(+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))","(-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))"]],"memory":[[463200,70429936]],"outputs":[["(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) N) (pow.f64 (pow.f64 (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) N) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(pow.f64 (exp.f64 (-.f64 (log.f64 N) (log1p.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))) (neg.f64 N))","(/.f64 (neg.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 N (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (*.f64 N (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) #s(literal -1 binary64)) N)","(/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (neg.f64 N))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) N)","(/.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 N (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 N (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 N (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 N (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 N (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 N (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (/.f64 #s(literal -1 binary64) N) (neg.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (neg.f64 (neg.f64 N)))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(/.f64 #s(literal -1 binary64) (/.f64 N (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(fma.f64 (exp.f64 (log.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 N (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) N) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (pow.f64 (sqrt.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) N) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (pow.f64 (/.f64 (pow.f64 N #s(literal -1 binary64)) N) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (pow.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (sqrt.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) (sqrt.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 #s(literal -1 binary64) N) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 (pow.f64 N #s(literal -1 binary64)) N) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal -2 binary64)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (pow.f64 N #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","(exp.f64 (*.f64 (-.f64 (log.f64 N) (log1p.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (pow.f64 N #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(*.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(*.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) N)","(*.f64 (*.f64 N #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 N) (pow.f64 (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 N (/.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 N (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(pow.f64 (/.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 N))) (neg.f64 (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 N)) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 N)) (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(/.f64 (/.f64 N (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 N) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 (neg.f64 N) (*.f64 #s(literal 1 binary64) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(/.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(/.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)))","(/.f64 N (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(neg.f64 (/.f64 N (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(exp.f64 (neg.f64 (*.f64 (-.f64 (log.f64 N) (log1p.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (-.f64 (log.f64 N) (log1p.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) N) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (/.f64 N (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64))","(fma.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (/.f64 #s(literal -1 binary64) (+.f64 (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N))","(*.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (neg.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (neg.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 N))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -2 binary64)))) (neg.f64 (+.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (/.f64 #s(literal -1 binary64) N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) #s(literal 3 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (/.f64 #s(literal -1 binary64) N))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))))) (neg.f64 (neg.f64 (neg.f64 N))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) N)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (*.f64 N #s(literal -1 binary64)))) (neg.f64 (*.f64 N N)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) (*.f64 N #s(literal -1 binary64))) N)) (neg.f64 (*.f64 N (*.f64 N #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) (neg.f64 N)) N)) (neg.f64 (*.f64 N (neg.f64 N))))","(/.f64 (-.f64 (neg.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) #s(literal 1 binary64)) (neg.f64 N))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal 1 binary64)) N)","(/.f64 (-.f64 (pow.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -2 binary64))) (+.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (/.f64 #s(literal -1 binary64) N)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) #s(literal 3 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (/.f64 #s(literal -1 binary64) N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 N (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 N (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) N))","(/.f64 (-.f64 (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (*.f64 N #s(literal -1 binary64))) (*.f64 N N))","(/.f64 (-.f64 (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) (*.f64 N #s(literal -1 binary64))) N) (*.f64 N (*.f64 N #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) (neg.f64 N)) N) (*.f64 N (neg.f64 N)))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 N (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 N (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) (neg.f64 N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) N))","(neg.f64 (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (neg.f64 N)))","(fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal -1 binary64) N)))","(fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(-.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (/.f64 #s(literal -1 binary64) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (neg.f64 (/.f64 #s(literal -1 binary64) N)))","(+.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)))))","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","(+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))) #s(literal 1 binary64))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (log.f64 N) #s(literal -1 binary64) (log1p.f64 N))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(-.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 N #s(literal -1 binary64)))) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (log.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (log1p.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log.f64 (*.f64 (+.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))) (log.f64 (neg.f64 (neg.f64 N))))","(-.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) N)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) N)))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (neg.f64 N)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (log1p.f64 N) (log.f64 N))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (/.f64 #s(literal -1 binary64) N)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","(*.f64 (pow.f64 (/.f64 N (fma.f64 N N #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1 binary64) (*.f64 N N))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (+.f64 N #s(literal 1 binary64)))","(*.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) N))","(*.f64 (+.f64 N #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (+.f64 N #s(literal 1 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (neg.f64 (-.f64 N #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 N #s(literal -1 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) N)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (neg.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 N))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))) (neg.f64 (neg.f64 (neg.f64 N))))","(/.f64 (neg.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) N)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) N)))","(/.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64))) (-.f64 N #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 N #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) N))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64))) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) N)","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (neg.f64 (fma.f64 N N (neg.f64 N))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N))) (neg.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) N))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) N) N))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) N))","(/.f64 (fma.f64 N N #s(literal -1 binary64)) (fma.f64 N N (neg.f64 N)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (*.f64 N (-.f64 #s(literal 1 binary64) N)))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (+.f64 N #s(literal 1 binary64)) N)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (+.f64 N #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (+.f64 N #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (+.f64 N #s(literal 1 binary64))))","(neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) N))","(neg.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) (neg.f64 N)))","(exp.f64 (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 N #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (neg.f64 (-.f64 N #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N))) (neg.f64 (-.f64 #s(literal 1 binary64) N)))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) N))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 N #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) N #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N)))","(+.f64 N #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) N)","(*.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (/.f64 #s(literal -1 binary64) N) N))","(*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 #s(literal -1 binary64) (*.f64 N N)))","(*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64)))","(pow.f64 (/.f64 N (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 N N) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 N #s(literal -1 binary64)) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 N) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 N #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 (*.f64 N N)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) N) #s(literal 1 binary64))) (neg.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (*.f64 N (neg.f64 N))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 1 binary64))) (neg.f64 (*.f64 N #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 1 binary64))) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (*.f64 (*.f64 N #s(literal -1 binary64)) (neg.f64 N))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (*.f64 N N)))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 N) (*.f64 N #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))) (neg.f64 (*.f64 N N)))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 N) N)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))) (neg.f64 (*.f64 N (*.f64 N #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))) (neg.f64 (*.f64 N (neg.f64 N))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 (*.f64 (*.f64 N #s(literal -1 binary64)) (*.f64 N N))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 N N) (*.f64 N #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 N N))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) N) #s(literal 1 binary64)) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 1 binary64)) (*.f64 N #s(literal -1 binary64)))","(/.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 1 binary64)) (neg.f64 N))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) (neg.f64 (*.f64 N #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) N)) (neg.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 N (neg.f64 N)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 (*.f64 N #s(literal -1 binary64)) (neg.f64 N)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 N N))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (*.f64 (neg.f64 N) N))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (*.f64 (neg.f64 N) (*.f64 N #s(literal -1 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (*.f64 N N))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (*.f64 N (*.f64 N #s(literal -1 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (*.f64 N (neg.f64 N)))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 (*.f64 N #s(literal -1 binary64)) (*.f64 N N)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (*.f64 (*.f64 N N) (*.f64 N #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) N)","(/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 (*.f64 (*.f64 N #s(literal -1 binary64)) N)))","(/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 (neg.f64 (*.f64 N N))))","(/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 (*.f64 (neg.f64 N) N)))","(/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 N N))","(/.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (*.f64 N #s(literal -1 binary64)))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (neg.f64 N))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 N N) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 N #s(literal -1 binary64)) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 N #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 N) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 #s(literal -1 binary64) (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N))","(/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 (*.f64 N N)))","(/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N #s(literal -1 binary64)) N))","(/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (neg.f64 N) N))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)))","(/.f64 #s(literal 1 binary64) (/.f64 N (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 N N) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 N #s(literal -1 binary64)) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 N) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 N #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N)))","(*.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) #s(literal 3 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64))))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64))) (-.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) #s(literal 3 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64)))) (+.f64 (pow.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (*.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (*.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 3 binary64))) (fma.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -1 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 N #s(literal -1 binary64)) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (pow.f64 N #s(literal -1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))))","(fma.f64 (-.f64 (pow.f64 N #s(literal -4 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64)))) (pow.f64 (fma.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (-.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 N #s(literal -2 binary64))) (pow.f64 N #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -2 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))))","(fma.f64 (pow.f64 N #s(literal -2 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1 binary64) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 #s(literal -1 binary64) N) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (pow.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (/.f64 #s(literal -1 binary64) N) N) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 #s(literal -1 binary64) (*.f64 N N)) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))) (/.f64 (pow.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))))","(+.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 N #s(literal -2 binary64)))","(+.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))","(+.f64 (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))","(+.f64 (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))))","(+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))","(+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (pow.f64 N #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 6 binary64)) (pow.f64 N #s(literal -6 binary64))) (pow.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 9 binary64)) (pow.f64 N #s(literal -18 binary64)) (pow.f64 N #s(literal -9 binary64))) (pow.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64))) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 6 binary64)) (pow.f64 N #s(literal -6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64))))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 9 binary64)) (pow.f64 N #s(literal -18 binary64)) (pow.f64 N #s(literal -9 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 6 binary64)) (pow.f64 N #s(literal -6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 9 binary64)) (pow.f64 N #s(literal -18 binary64)) (pow.f64 N #s(literal -9 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 6 binary64)) (pow.f64 N #s(literal -6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 9 binary64)) (pow.f64 N #s(literal -18 binary64)) (pow.f64 N #s(literal -9 binary64)))) (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (-.f64 (pow.f64 N #s(literal -6 binary64)) (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (pow.f64 N #s(literal -3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 9 binary64)) (pow.f64 N #s(literal -18 binary64)) (pow.f64 N #s(literal -9 binary64)))) (neg.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 6 binary64)) (pow.f64 N #s(literal -6 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64))))","(/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 9 binary64)) (pow.f64 N #s(literal -18 binary64)) (pow.f64 N #s(literal -9 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (-.f64 (pow.f64 N #s(literal -6 binary64)) (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (pow.f64 N #s(literal -3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 9 binary64)) (pow.f64 N #s(literal -18 binary64)) (pow.f64 N #s(literal -9 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64))) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 6 binary64)) (pow.f64 N #s(literal -6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64))))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 9 binary64)) (pow.f64 N #s(literal -18 binary64)) (pow.f64 N #s(literal -9 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64))) (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 6 binary64)) (pow.f64 N #s(literal -6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64))))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 9 binary64)) (pow.f64 N #s(literal -18 binary64)) (pow.f64 N #s(literal -9 binary64)))))","(fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 3/2 binary64)) (pow.f64 N #s(literal -3/2 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (pow.f64 (sqrt.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (pow.f64 (pow.f64 N #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 N #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(fma.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 N #s(literal -3/2 binary64))) (pow.f64 N #s(literal -3/2 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (pow.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal -3/2 binary64)) (pow.f64 (pow.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)) #s(literal 3/2 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 N #s(literal -1 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (pow.f64 N #s(literal -3/2 binary64)) (pow.f64 N #s(literal -3/2 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -3/2 binary64)) (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -3/2 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -2 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal -3 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (pow.f64 (neg.f64 N) #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 N #s(literal -3 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 N #s(literal -2 binary64)) (pow.f64 N #s(literal -1 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 N) #s(literal -3 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (pow.f64 N #s(literal -3 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 N #s(literal -3 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (pow.f64 N #s(literal -3 binary64)))","(-.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 6 binary64)) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64)))) (/.f64 (pow.f64 N #s(literal -6 binary64)) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 9 binary64)) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64)))))) (/.f64 (neg.f64 (pow.f64 N #s(literal -9 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 6 binary64)) (pow.f64 N #s(literal -12 binary64)) (+.f64 (pow.f64 N #s(literal -6 binary64)) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 9 binary64)))))))","(-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64)))","(+.f64 (pow.f64 N #s(literal -3 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (pow.f64 N #s(literal -3 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3/2 binary64))) (pow.f64 N #s(literal -3/2 binary64)))","(*.f64 (neg.f64 (pow.f64 N #s(literal -3/2 binary64))) (pow.f64 N #s(literal -3/2 binary64)))","(*.f64 (pow.f64 N #s(literal -3/2 binary64)) (*.f64 (pow.f64 N #s(literal -3/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -3/2 binary64)) (neg.f64 (pow.f64 N #s(literal -3/2 binary64))))","(*.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) N))","(*.f64 (/.f64 #s(literal -1 binary64) N) (pow.f64 N #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 N) #s(literal -3 binary64)))","(pow.f64 (*.f64 (*.f64 N N) (*.f64 N #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 N #s(literal -1 binary64)) #s(literal -3 binary64))","(pow.f64 (neg.f64 N) #s(literal -3 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) N) #s(literal 3 binary64))","(/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (*.f64 N #s(literal -1 binary64))) #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (neg.f64 N)) #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (*.f64 N #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 N #s(literal -1 binary64)) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(neg.f64 (pow.f64 N #s(literal -3 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 N #s(literal -3 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal 3 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))))) (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))))) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))))) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (-.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(pow.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(pow.f64 (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 8 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 8 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (log1p.f64 N) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(fma.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 8 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 12 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(+.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (log1p.f64 N))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(*.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 (log1p.f64 N)) #s(literal 3 binary64) (log.f64 (log1p.f64 N))))","(exp.f64 (+.f64 (log.f64 (log1p.f64 N)) (*.f64 (log.f64 (log1p.f64 N)) #s(literal 3 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(*.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (/.f64 #s(literal -1 binary64) N))","(*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)) (pow.f64 N #s(literal -1 binary64)))) (neg.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (pow.f64 N #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal 6 binary64))) (*.f64 #s(literal 1/27 binary64) (pow.f64 N #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))) (neg.f64 (neg.f64 (neg.f64 N))))","(/.f64 (neg.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal 1 binary64))) (neg.f64 N))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) N)))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) N) N) (*.f64 N #s(literal 1/3 binary64)))) (neg.f64 (*.f64 N N)))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1/3 binary64)) (neg.f64 N))","(/.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (pow.f64 N #s(literal -1 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64))) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal 6 binary64))) (*.f64 #s(literal 1/27 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64))) (neg.f64 (*.f64 N (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) (neg.f64 (*.f64 N (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) (neg.f64 (neg.f64 N)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal 1 binary64)) N)","(/.f64 (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) N))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) N) N) (*.f64 N #s(literal 1/3 binary64))) (*.f64 N N))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)) (*.f64 N (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (*.f64 N (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (neg.f64 N))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 #s(literal 1/4 binary64) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 (/.f64 #s(literal 1/4 binary64) N) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 N #s(literal -1 binary64)) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(*.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)) (pow.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64))) (neg.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (-.f64 #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64)))))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) #s(literal -1/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1/4 binary64) #s(literal -1/3 binary64))","(fma.f64 #s(literal -1/4 binary64) (/.f64 #s(literal -1 binary64) N) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal -1 binary64)) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) (/.f64 #s(literal 1/9 binary64) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(-.f64 (/.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64))) (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))) (/.f64 #s(literal 1/27 binary64) (fma.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))","(+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)) (pow.f64 N #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))))))","(*.f64 (pow.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 3/2 binary64)) (pow.f64 N #s(literal -3/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal 3 binary64)))","(*.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (pow.f64 (neg.f64 N) #s(literal -3 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal -3/2 binary64)) (pow.f64 (pow.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 N #s(literal -1 binary64)) N) #s(literal 3 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal -6 binary64)))","(*.f64 (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -3/2 binary64)) (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -3/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal -3 binary64)))","(*.f64 (pow.f64 N #s(literal -3 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)))","(*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)))","(pow.f64 (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 3 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -3 binary64))","(pow.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) #s(literal 3/2 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))) (neg.f64 N))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))) (neg.f64 (*.f64 N N)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 (*.f64 N N)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 N))","(/.f64 (pow.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 N) N) #s(literal 3 binary64)))","(/.f64 (pow.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 N N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 N N) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) #s(literal 3 binary64)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (neg.f64 N))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) N)","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (*.f64 N N))","(/.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N))","(/.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 N N))","(/.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)","(/.f64 (neg.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) (neg.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (neg.f64 (pow.f64 N #s(literal 6 binary64))))","(/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (*.f64 N N)) #s(literal 3 binary64)))","(/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 (*.f64 N (neg.f64 N)) #s(literal 3 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64)))","(/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (neg.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (neg.f64 N)) #s(literal 3 binary64)))","(/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (pow.f64 N #s(literal -3 binary64)) (pow.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 3 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (*.f64 N N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64)) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 3 binary64)))","(neg.f64 (pow.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)))","(exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 3 binary64)) (*.f64 (log.f64 N) #s(literal 3 binary64))))","(exp.f64 (fma.f64 (log.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal 3/2 binary64) (*.f64 (log.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal 3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64))))","(*.f64 (pow.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 N #s(literal -1 binary64)) N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal -4 binary64)))","(*.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -2 binary64)))","(*.f64 (pow.f64 N #s(literal -2 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N))","(*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (pow.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)))","(pow.f64 (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))","(pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N))) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N))) (neg.f64 N))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (neg.f64 N)))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 (*.f64 N N)))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 1 binary64))) (neg.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 N))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (*.f64 (neg.f64 N) N)))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (*.f64 N (neg.f64 N))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N))))","(/.f64 (neg.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 N) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 (neg.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (neg.f64 (*.f64 N N)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))) (neg.f64 (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 (neg.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64))) (neg.f64 (pow.f64 N #s(literal 4 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 N N))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 N N) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) (neg.f64 N))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) N)","(/.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N))","(/.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 N N))","(/.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 1 binary64)) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N)) (neg.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 (neg.f64 N) N))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 N (neg.f64 N)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (*.f64 (neg.f64 N) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (*.f64 N (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 N N)))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (*.f64 (*.f64 N N) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (*.f64 N N))","(/.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 2 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (log.f64 N))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(*.f64 (log1p.f64 N) (log1p.f64 N))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":270.09912109375,"type":"rewrite"},{"compiler":[[71951,6057]],"memory":[[5896848,148507984]],"time":222.81494140625,"type":"eval"},{"alts":[["(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","next",47.25057005192903,"binary64"],["(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.17542633474434,"binary64"],["(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","fresh",46.44727954047183,"binary64"],["(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","fresh",46.61055083622199,"binary64"],["(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.185820534960634,"binary64"],["(/.f64 (fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log1p.f64 N) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (log.f64 N)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",46.40658001154136,"binary64"],["(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))))) (*.f64 (log.f64 N) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","fresh",46.6554567603106,"binary64"],["(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",47.350046612910006,"binary64"],["(/.f64 (-.f64 (pow.f64 (-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",47.6045950636898,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","fresh",47.32819441014215,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","done",47.323466653972076,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","fresh",47.30077216436641,"binary64"],["(/.f64 (*.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",46.27587356807451,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","done",47.32852648360092,"binary64"],["(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",46.81464224468434,"binary64"],["(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","fresh",47.22348201718965,"binary64"],["(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","fresh",47.161415100621426,"binary64"],["(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","next",47.29966076403235,"binary64"],["(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.30473893074149,"binary64"],["(neg.f64 (fma.f64 (sqrt.f64 (log.f64 N)) (sqrt.f64 (log.f64 N)) (neg.f64 (log1p.f64 N))))","fresh",46.397517043236995,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","fresh",45.14751007752103,"binary64"],["(log.f64 #s(approx (/ (+ 1 N) N) (+.f64 (/.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))))","fresh",45.54201248042199,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","fresh",3.484465909798855,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","fresh",2.5860954912126575,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","fresh",3.513730137590536,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","next",2.7645300699677975,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","done",5.400620081758022,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","fresh",3.1067992235117354,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","next",4.940234049265766,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","next",2.314200314051784,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","fresh",3.166056762692712,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","done",11.103125197419944,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","fresh",2.6251916348815882,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","fresh",2.915538692885128,"binary64"]],"compiler":[[24,13],[30,14],[31,15],[10,6],[25,12],[44,11],[50,20],[43,23],[30,19],[25,13],[22,12],[15,9],[32,15],[27,15],[34,17],[31,14],[31,14],[31,14],[23,12],[11,7],[7,6],[12,9],[19,15],[32,24],[21,16],[33,22],[27,21],[37,28],[29,23],[43,33],[39,30],[11,9],[25,19],[37,28],[24,13],[30,14],[31,15],[10,6],[25,12],[44,11],[50,20],[43,23],[30,19],[25,13],[15,9],[32,15],[34,17],[31,14],[31,14],[31,14],[23,12],[11,7],[7,6],[12,9],[19,15],[32,24],[21,16],[33,22],[37,28],[29,23],[43,33],[39,30],[25,19],[37,28]],"count":[[1315,34]],"kept":[{"done":[3,2],"fresh":[37,22],"new":[1270,8],"picked":[5,2]}],"memory":[[-1622112,65216416]],"min-error":[[0.1836491212380116,"binary64"]],"time":45.675048828125,"type":"prune"},{"egraph":[[0,8226,478,0.048171923],[4,5040,482,0.032233993],[3,1750,486,0.021143178],[2,423,510,0.006191826],[1,177,550,0.001642928],[0,98,562,0.000911206],[0,61,579,0.000603798]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))))","#s(literal 1 binary64)","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))","(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)","(-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N))","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))","#s(literal 1/12 binary64)","(/.f64 #s(literal 1/24 binary64) N)","#s(literal 1/24 binary64)","N","#s(literal -1 binary64)","(neg.f64 N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))","#s(literal 1 binary64)","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))","(+.f64 #s(literal 1/2 binary64) N)","#s(literal 1/2 binary64)","N","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N))","(-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal 1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","(*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))","(*.f64 N (neg.f64 N))","(neg.f64 N)","#s(literal -1 binary64)","(*.f64 (*.f64 N (neg.f64 N)) N)","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","#s(literal -1 binary64)","(/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","#s(literal 1 binary64)","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))"]],"locations":[["(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","cost-diff",0],["(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","cost-diff",4],["(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","cost-diff",8],["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","cost-diff",0],["(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","cost-diff",0],["(/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","cost-diff",1],["(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","cost-diff",6],["(*.f64 (*.f64 N (neg.f64 N)) N)","cost-diff",2],["(-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64)))","cost-diff",2],["(*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))","cost-diff",3],["(*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","cost-diff",3],["(+.f64 #s(literal 1/2 binary64) N)","cost-diff",0],["#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))","cost-diff",0],["(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","cost-diff",0],["(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","cost-diff",1],["(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","cost-diff",5]],"memory":[[6492400,27950080]],"method":["egg-herbie"],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (-.f64 N (-.f64 (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N) #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (-.f64 N (-.f64 (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N) #s(literal 1/2 binary64)))))","#s(literal 1 binary64)","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (-.f64 N (-.f64 (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N) #s(literal 1/2 binary64))))","(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(-.f64 N (-.f64 (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N) #s(literal 1/2 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N) #s(literal 1/2 binary64)) N) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)","(-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N))","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))","#s(literal 1/12 binary64)","(/.f64 #s(literal 1/24 binary64) N)","#s(literal 1/24 binary64)","N","#s(literal -1 binary64)","(neg.f64 N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))","#s(literal 1 binary64)","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))","(+.f64 #s(literal 1/2 binary64) N)","#s(literal 1/2 binary64)","N","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) (-.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal -1/3 binary64))) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N))","(/.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) (-.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal -1/3 binary64))) (pow.f64 N #s(literal 3 binary64)))","(-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64)))","(fma.f64 N (-.f64 #s(literal 1/2 binary64) N) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))","(*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(fma.f64 #s(literal 1/2 binary64) N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))","(+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","(*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))","(*.f64 N N)","(*.f64 N (neg.f64 N))","(*.f64 (neg.f64 N) N)","(neg.f64 N)","#s(literal -1 binary64)","(*.f64 (*.f64 N (neg.f64 N)) N)","(pow.f64 (neg.f64 N) #s(literal 3 binary64))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","#s(literal -1 binary64)","(/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","#s(literal 1 binary64)","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":179.14501953125,"type":"simplify"},{"compiler":[[506,52]],"locations":[["(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","accuracy",0.53515625],["(pow.f64 (log.f64 N) #s(literal 2 binary64))","accuracy",0.5420112793053261],["(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","accuracy",0.5459175293053261],["(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","accuracy",46.91924678277157],["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","accuracy",0.5201950195368841],["(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","accuracy",0.53515625],["(pow.f64 (log.f64 N) #s(literal 2 binary64))","accuracy",0.5420112793053261],["(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","accuracy",46.91924678277157],["(*.f64 (*.f64 N (neg.f64 N)) N)","accuracy",0.234375],["(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","accuracy",0.28125],["(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N))","accuracy",0.33822250976844204],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","accuracy",2.5177533213026098],["(+.f64 #s(literal 1/2 binary64) N)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))","accuracy",0.07421875],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","accuracy",2.5177533213026098],["#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))","accuracy",4.936791201543776],["(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","accuracy",0.3203125],["(/.f64 #s(literal 1/24 binary64) N)","accuracy",0.3515625],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","accuracy",2.5177533213026098],["#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))","accuracy",2.523142411106263]],"memory":[[-8634016,81162576]],"mixsample":[[133.269287109375,"adjust",800],[34.845947265625,"ival-div",0],[2.767822265625,"ival-div",400],[3.6953125,"ival-pow2",400],[0.15185546875,"const",400],[0.164306640625,"ival-assert",0],[18.538818359375,"ival-sub",0],[0.109130859375,"ival-sub",400],[16.770263671875,"const",0],[4.0439453125,"ival-log1p",400],[11.400390625,"ival-add",0],[23.10205078125,"ival-mult",0],[1.29736328125,"ival-mult",400],[2.8583984375,"ival-log",400],[0.5234375,"ival-add",400],[5.277587890625,"ival-log",0],[0.37646484375,"ival-true",0],[8.288330078125,"ival-log1p",0],[0.9384765625,"exact",0],[11.3837890625,"ival-pow2",0],[1.593505859375,"ival-neg",0]],"outcomes":[[312.468505859375,1,"valid",191],[30.43359375,0,"valid",65]],"time":418.06884765625,"type":"localize"},{"count":[[27,142]],"inputs":[["(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))","(+.f64 #s(literal 1/2 binary64) N)","(*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))","(-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64)))","(*.f64 (*.f64 N (neg.f64 N)) N)","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))","(/.f64 #s(literal 1/24 binary64) N)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))"]],"memory":[[643664,26047888]],"outputs":[["(/ 1/24 (pow N 2))","(/ (+ 1/24 (* -1/12 N)) (pow N 2))","(/ (+ 1/24 (* N (- (* 1/2 N) 1/12))) (pow N 2))","(/ (+ 1/24 (* N (- (* N (+ 1/2 N)) 1/12))) (pow N 2))","(/ -1/24 (pow N 3))","(/ (- (* 1/12 N) 1/24) (pow N 3))","(/ (- (* N (+ 1/12 (* -1/2 N))) 1/24) (pow N 3))","(/ (- (* N (+ 1/12 (* N (- (* -1 N) 1/2)))) 1/24) (pow N 3))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(* -4 (pow N 4))","(* (pow N 4) (- (* -16/3 N) 4))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","1/2","(+ 1/2 N)","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(/ (+ 1/4 (* N (- (* 1/2 N) 1/3))) N)","(pow N 2)","(/ (+ 1/4 (* N (- (* N (+ 1/2 (* -1 N))) 1/3))) N)","(* -1 (pow N 3))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (+ (* -1 (+ 1/2 (/ 1 (log N)))) (/ 1 (log N)))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (+ (* -1 (+ 1/2 (/ 1 (log N)))) (+ (* 1/3 N) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ 1/2 (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (+ (* -1 (+ 1/2 (/ 1 (log N)))) (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))))))))","(/ (pow N 2) (log N))","(* (pow N 2) (+ (* -1 (* N (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (* 11/12 (/ 1 (log N)))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (+ (* 11/12 (/ 1 (log N))) (* N (- (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (pow (log N) 2))) (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (* 1/2 (/ 1 (pow (log N) 3))) (+ (* 1/2 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))) (+ (* 5/6 (/ 1 (log N))) (* 11/12 (/ 1 (pow (log N) 2))))))))))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(/ 1/24 N)","(/ -1/24 (pow N 2))","(/ (- (* 1/12 N) 1/24) (pow N 2))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(pow (log N) 2)","(+ (* 2 (* N (log N))) (pow (log N) 2))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (* -1 (log N)))))) (pow (log N) 2))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (+ (* -1 (log N)) (* N (- (* 2/3 (log N)) 1))))))) (pow (log N) 2))","N","(* N (+ 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","-1","(* -1 (+ 1 (* 1/2 (/ 1 N))))","(- (/ 1/12 (pow N 2)) (+ 1 (* 1/2 (/ 1 N))))","(- (/ 1/12 (pow N 2)) (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* 1/2 N)","(* N (- 1/2 (* 1/3 (/ 1 N))))","(* N (- (+ 1/2 (/ 1/4 (pow N 2))) (* 1/3 (/ 1 N))))","(* -1 (pow N 2))","(* (pow N 2) (- (* 1/2 (/ 1 N)) 1))","(* (pow N 2) (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))))","(* (pow N 2) (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))))","(+ (* -1/2 (log (/ 1 N))) (* 1/2 (log (/ 1 N))))","(+ (* -1/2 (log (/ 1 N))) (+ (* 1/2 (log (/ 1 N))) (/ 1 N)))","(+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* 1/2 (log (/ 1 N))) (+ (/ 1/8 (pow N 2)) (+ (/ 1 N) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))))","(- (+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* -1 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (pow N 3))) (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/2 (log (/ 1 N))) (+ (/ 1/8 (pow N 2)) (+ (/ 1 N) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N))))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(* 1/2 (log (/ 1 N)))","(+ (* 1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* 1/2 (log (/ 1 N))) (* 1/4 (/ 1 N))))","(+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* -1 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (pow N 3))) (+ (* 1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))))","(* -1/2 (log (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (* 3/4 (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(/ 1/12 N)","(/ (- 1/12 (* 1/24 (/ 1 N))) N)","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(* 4 (pow (log (/ 1 N)) 2))","(+ (* -4 (/ (log (/ 1 N)) N)) (* 4 (pow (log (/ 1 N)) 2)))","(+ (* -4 (/ (log (/ 1 N)) N)) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))","(- (+ (* -4 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))) (/ 1 (pow N 3)))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)","(- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(* -1 (* N (- (* 1/3 (/ 1 N)) 1/2)))","(* -1 (* N (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2)))","(* (pow N 2) (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1))","(* (pow N 2) (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(+ (* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(+ (* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (- (* 1/24 (/ 1 N)) 1/12) N))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)","(+ (* 2 (/ (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (+ (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -2/3 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N)))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))"]],"series":[[14.548095703125,"((* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+ 1/2 N) (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1) (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (* (* N (neg N)) N) (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2))) (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (log (+ 1 N)) 2) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2)) (- (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2))) (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/ 1/24 N) (/ (- 1/12 (/ 1/24 N)) N) (- (log (+ N 1)) (log N)) (/ (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (* (* N (neg N)) N)) (/ (- (/ 1/4 N) 1/3) N) (pow (log N) 2) (pow (+ (log N) (log (+ 1 N))) 2))","N","-inf"],[12.657958984375,"((* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+ 1/2 N) (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1) (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (* (* N (neg N)) N) (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2))) (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (log (+ 1 N)) 2) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2)) (- (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2))) (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/ 1/24 N) (/ (- 1/12 (/ 1/24 N)) N) (- (log (+ N 1)) (log N)) (/ (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (* (* N (neg N)) N)) (/ (- (/ 1/4 N) 1/3) N) (pow (log N) 2) (pow (+ (log N) (log (+ 1 N))) 2))","N","inf"],[12.39599609375,"((* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+ 1/2 N) (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1) (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (* (* N (neg N)) N) (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2))) (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (log (+ 1 N)) 2) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2)) (- (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ (* (+ (log N) (log (+ 1 N))) (pow (log N) 2)) (pow (+ (log N) (log (+ 1 N))) 2))) (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/ 1/24 N) (/ (- 1/12 (/ 1/24 N)) N) (- (log (+ N 1)) (log N)) (/ (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (* (* N (neg N)) N)) (/ (- (/ 1/4 N) 1/3) N) (pow (log N) 2) (pow (+ (log N) (log (+ 1 N))) 2))","N","0"]],"time":44.385009765625,"type":"series"},{"count":[[142,141]],"egraph":[[0,8305,5440,0.105256795],[2,7340,5708,0.027723747],[1,2219,5718,0.025301343],[0,707,6424,0.007304062]],"inputs":[["(/ 1/24 (pow N 2))","(/ (+ 1/24 (* -1/12 N)) (pow N 2))","(/ (+ 1/24 (* N (- (* 1/2 N) 1/12))) (pow N 2))","(/ (+ 1/24 (* N (- (* N (+ 1/2 N)) 1/12))) (pow N 2))","(/ -1/24 (pow N 3))","(/ (- (* 1/12 N) 1/24) (pow N 3))","(/ (- (* N (+ 1/12 (* -1/2 N))) 1/24) (pow N 3))","(/ (- (* N (+ 1/12 (* N (- (* -1 N) 1/2)))) 1/24) (pow N 3))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(* -4 (pow N 4))","(* (pow N 4) (- (* -16/3 N) 4))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","1/2","(+ 1/2 N)","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(/ (+ 1/4 (* N (- (* 1/2 N) 1/3))) N)","(pow N 2)","(/ (+ 1/4 (* N (- (* N (+ 1/2 (* -1 N))) 1/3))) N)","(* -1 (pow N 3))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (+ (* -1 (+ 1/2 (/ 1 (log N)))) (/ 1 (log N)))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (+ (* -1 (+ 1/2 (/ 1 (log N)))) (+ (* 1/3 N) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ 1/2 (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (+ (* -1 (+ 1/2 (/ 1 (log N)))) (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))))))))","(/ (pow N 2) (log N))","(* (pow N 2) (+ (* -1 (* N (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (* 11/12 (/ 1 (log N)))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (+ (* 11/12 (/ 1 (log N))) (* N (- (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (pow (log N) 2))) (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (* 1/2 (/ 1 (pow (log N) 3))) (+ (* 1/2 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))) (+ (* 5/6 (/ 1 (log N))) (* 11/12 (/ 1 (pow (log N) 2))))))))))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(/ 1/24 N)","(/ -1/24 (pow N 2))","(/ (- (* 1/12 N) 1/24) (pow N 2))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(pow (log N) 2)","(+ (* 2 (* N (log N))) (pow (log N) 2))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (* -1 (log N)))))) (pow (log N) 2))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (+ (* -1 (log N)) (* N (- (* 2/3 (log N)) 1))))))) (pow (log N) 2))","N","(* N (+ 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","-1","(* -1 (+ 1 (* 1/2 (/ 1 N))))","(- (/ 1/12 (pow N 2)) (+ 1 (* 1/2 (/ 1 N))))","(- (/ 1/12 (pow N 2)) (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* 1/2 N)","(* N (- 1/2 (* 1/3 (/ 1 N))))","(* N (- (+ 1/2 (/ 1/4 (pow N 2))) (* 1/3 (/ 1 N))))","(* -1 (pow N 2))","(* (pow N 2) (- (* 1/2 (/ 1 N)) 1))","(* (pow N 2) (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))))","(* (pow N 2) (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))))","(+ (* -1/2 (log (/ 1 N))) (* 1/2 (log (/ 1 N))))","(+ (* -1/2 (log (/ 1 N))) (+ (* 1/2 (log (/ 1 N))) (/ 1 N)))","(+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* 1/2 (log (/ 1 N))) (+ (/ 1/8 (pow N 2)) (+ (/ 1 N) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))))","(- (+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* -1 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (pow N 3))) (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/2 (log (/ 1 N))) (+ (/ 1/8 (pow N 2)) (+ (/ 1 N) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N))))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(* 1/2 (log (/ 1 N)))","(+ (* 1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* 1/2 (log (/ 1 N))) (* 1/4 (/ 1 N))))","(+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* -1 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (pow N 3))) (+ (* 1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))))","(* -1/2 (log (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (* 3/4 (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(/ 1/12 N)","(/ (- 1/12 (* 1/24 (/ 1 N))) N)","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(* 4 (pow (log (/ 1 N)) 2))","(+ (* -4 (/ (log (/ 1 N)) N)) (* 4 (pow (log (/ 1 N)) 2)))","(+ (* -4 (/ (log (/ 1 N)) N)) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))","(- (+ (* -4 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))) (/ 1 (pow N 3)))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)","(- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(* -1 (* N (- (* 1/3 (/ 1 N)) 1/2)))","(* -1 (* N (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2)))","(* (pow N 2) (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1))","(* (pow N 2) (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(+ (* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(+ (* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (- (* 1/24 (/ 1 N)) 1/12) N))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)","(+ (* 2 (/ (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (+ (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -2/3 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N)))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))"]],"memory":[[958688,55453040]],"method":["egg-herbie"],"outputs":[["(/ 1/24 (pow N 2))","(/.f64 (/.f64 #s(literal 1/24 binary64) N) N)","(/ (+ 1/24 (* -1/12 N)) (pow N 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/12 binary64) N #s(literal 1/24 binary64)) N) N)","(/ (+ 1/24 (* N (- (* 1/2 N) 1/12))) (pow N 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)","(/ (+ 1/24 (* N (- (* N (+ 1/2 N)) 1/12))) (pow N 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)","(/ -1/24 (pow N 3))","(/.f64 #s(literal -1/24 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* 1/12 N) 1/24) (pow N 3))","(/.f64 (fma.f64 #s(literal 1/12 binary64) N #s(literal -1/24 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/12 (* -1/2 N))) 1/24) (pow N 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/12 binary64)) N #s(literal -1/24 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/12 (* N (- (* -1 N) 1/2)))) 1/24) (pow N 3))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1/2 binary64)) N #s(literal 1/12 binary64)) N #s(literal -1/24 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N) (log.f64 N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N) (log.f64 N))","(/ -1/4 (pow N 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* -4 (pow N 4))","(*.f64 #s(literal -4 binary64) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* -16/3 N) 4))","(*.f64 (fma.f64 #s(literal -16/3 binary64) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(*.f64 (fma.f64 (fma.f64 #s(literal 8/9 binary64) N #s(literal -16/3 binary64)) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -112/27 binary64) N #s(literal 8/9 binary64)) N #s(literal -16/3 binary64)) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","1/2","#s(literal 1/2 binary64)","(+ 1/2 N)","(+.f64 #s(literal 1/2 binary64) N)","(/ 1/4 N)","(/.f64 #s(literal 1/4 binary64) N)","(/ (+ 1/4 (* -1/3 N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(/ (+ 1/4 (* N (- (* 1/2 N) 1/3))) N)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) N #s(literal -1/3 binary64)) N #s(literal 1/4 binary64)) N)","(pow N 2)","(*.f64 N N)","(/ (+ 1/4 (* N (- (* N (+ 1/2 (* -1 N))) 1/3))) N)","(/.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1/2 binary64) N) N #s(literal -1/3 binary64)) N #s(literal 1/4 binary64)) N)","(* -1 (pow N 3))","(neg.f64 (pow.f64 N #s(literal 3 binary64)))","(+ N (* -1 (log N)))","(-.f64 N (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* N (+ (* -1 (+ 1/2 (/ 1 (log N)))) (/ 1 (log N)))))))","(-.f64 (fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal -1 binary64) (log.f64 N)) #s(literal -1/2 binary64)) N (/.f64 N (log.f64 N))) N N) (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* N (+ (* -1 (+ 1/2 (/ 1 (log N)))) (+ (* 1/3 N) (/ 1 (log N))))))))","(-.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N (+.f64 (/.f64 #s(literal -1 binary64) (log.f64 N)) #s(literal -1/2 binary64))) N (/.f64 N (log.f64 N))) N N) (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ 1/2 (/ 1 (log N))))))))","(-.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) N (/.f64 N (log.f64 N))) (neg.f64 N) N) (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* N (+ (* -1 (+ 1/2 (/ 1 (log N)))) (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))))))))","(-.f64 (fma.f64 (fma.f64 (+.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (log.f64 N))) N (+.f64 (/.f64 #s(literal -1 binary64) (log.f64 N)) #s(literal -1/2 binary64))) (*.f64 N N) N) (log.f64 N))","(/ (pow N 2) (log N))","(*.f64 (/.f64 N (log.f64 N)) N)","(* (pow N 2) (+ (* -1 (* N (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (+.f64 (/.f64 N (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 N (log.f64 N)))) (*.f64 N N))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (* 11/12 (/ 1 (log N)))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(*.f64 (fma.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (log.f64 N)) (+.f64 (/.f64 #s(literal 11/12 binary64) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) N (/.f64 #s(literal -1 binary64) (log.f64 N))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) N (/.f64 #s(literal 1 binary64) (log.f64 N))) (*.f64 N N))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (+ (* 11/12 (/ 1 (log N))) (* N (- (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (pow (log N) 2))) (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (* 1/2 (/ 1 (pow (log N) 3))) (+ (* 1/2 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))) (+ (* 5/6 (/ 1 (log N))) (* 11/12 (/ 1 (pow (log N) 2))))))))))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(fma.f64 (-.f64 (fma.f64 (+.f64 (fma.f64 (-.f64 (-.f64 (-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (log.f64 N)) #s(literal 1/2 binary64) (+.f64 (/.f64 #s(literal 11/12 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 5/6 binary64) (log.f64 N))))) N (+.f64 (/.f64 #s(literal 11/12 binary64) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (log.f64 N))) N (/.f64 #s(literal -1 binary64) (log.f64 N))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 N #s(literal 3 binary64)) (*.f64 (/.f64 N (log.f64 N)) N))","(* (pow N 2) (+ 1 (* -1 N)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) N) N)","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) N #s(literal -1 binary64)) N #s(literal 1 binary64)) N) N)","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/6 binary64) N #s(literal 11/12 binary64)) N #s(literal -1 binary64)) N #s(literal 1 binary64)) N) N)","(log N)","(log.f64 N)","(+ (log N) (* -1 N))","(-.f64 (log.f64 N) N)","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(fma.f64 (fma.f64 (+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 1/3 binary64)) N (/.f64 N (pow.f64 (log.f64 N) #s(literal 2 binary64))))) #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(/ 1/24 N)","(/.f64 #s(literal 1/24 binary64) N)","(/ -1/24 (pow N 2))","(/.f64 #s(literal -1/24 binary64) (*.f64 N N))","(/ (- (* 1/12 N) 1/24) (pow N 2))","(/.f64 (/.f64 (fma.f64 #s(literal 1/12 binary64) N #s(literal -1/24 binary64)) N) N)","(/ 1/4 (pow N 2))","(/.f64 #s(literal 1/4 binary64) (*.f64 N N))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N) N)","(pow (log N) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(+ (* 2 (* N (log N))) (pow (log N) 2))","(*.f64 (log.f64 N) (fma.f64 #s(literal 2 binary64) N (log.f64 N)))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (* -1 (log N)))))) (pow (log N) 2))","(fma.f64 (fma.f64 #s(literal 2 binary64) (log.f64 N) (fma.f64 (neg.f64 N) (log.f64 N) N)) N (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(+ (* N (+ (* 2 (log N)) (* N (+ 1 (+ (* -1 (log N)) (* N (- (* 2/3 (log N)) 1))))))) (pow (log N) 2))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) N (-.f64 #s(literal 1 binary64) (log.f64 N))) N (*.f64 #s(literal 2 binary64) (log.f64 N))) N (pow.f64 (log.f64 N) #s(literal 2 binary64)))","N","(* N (+ 1 (* 1/2 (/ 1 N))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal 1 binary64)) N)","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N)) #s(literal 1 binary64)) N)","-1","#s(literal -1 binary64)","(* -1 (+ 1 (* 1/2 (/ 1 N))))","(+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))","(- (/ 1/12 (pow N 2)) (+ 1 (* 1/2 (/ 1 N))))","(-.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N))","(- (/ 1/12 (pow N 2)) (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))))","(-.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) (*.f64 N N)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) N)))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal 1 binary64)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) #s(literal 1 binary64)) N)","(* 1/2 N)","(*.f64 #s(literal 1/2 binary64) N)","(* N (- 1/2 (* 1/3 (/ 1 N))))","(*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N)","(* N (- (+ 1/2 (/ 1/4 (pow N 2))) (* 1/3 (/ 1 N))))","(*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N)","(* -1 (pow N 2))","(*.f64 (neg.f64 N) N)","(* (pow N 2) (- (* 1/2 (/ 1 N)) 1))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N) N)","(* (pow N 2) (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N) #s(literal 1 binary64)) (*.f64 N N))","(* (pow N 2) (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))))","(*.f64 (+.f64 (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (*.f64 N N))","(+ (* -1/2 (log (/ 1 N))) (* 1/2 (log (/ 1 N))))","#s(literal 0 binary64)","(+ (* -1/2 (log (/ 1 N))) (+ (* 1/2 (log (/ 1 N))) (/ 1 N)))","(+.f64 #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) N))","(+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* 1/2 (log (/ 1 N))) (+ (/ 1/8 (pow N 2)) (+ (/ 1 N) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))))","(-.f64 (fma.f64 #s(literal 1/2 binary64) (log.f64 N) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (neg.f64 (log.f64 N))) (fma.f64 #s(literal -1/2 binary64) (log.f64 N) (+.f64 (+.f64 (/.f64 (/.f64 #s(literal -3/8 binary64) (log.f64 N)) (*.f64 N N)) (/.f64 #s(literal 1 binary64) N)) (/.f64 #s(literal 1/8 binary64) (*.f64 N N)))))) (/.f64 (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) N) N))","(- (+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* -1 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (pow N 3))) (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/2 (log (/ 1 N))) (+ (/ 1/8 (pow N 2)) (+ (/ 1 N) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N))))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(-.f64 (-.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (log.f64 N) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) N) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))) (fma.f64 #s(literal -1/2 binary64) (log.f64 N) (+.f64 (+.f64 (/.f64 (/.f64 #s(literal -3/8 binary64) (log.f64 N)) (*.f64 N N)) (/.f64 #s(literal 1 binary64) N)) (/.f64 #s(literal 1/8 binary64) (*.f64 N N)))))) (/.f64 (-.f64 (/.f64 #s(literal -1/16 binary64) (log.f64 N)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) (log.f64 N)) #s(literal 1/12 binary64))) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) N) N)) (fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal -3/8 binary64) (log.f64 N)) #s(literal 1/8 binary64))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1/2 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal -3/16 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))))","(* 1/2 (log (/ 1 N)))","(*.f64 #s(literal -1/2 binary64) (log.f64 N))","(+ (* 1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(fma.f64 #s(literal -1/2 binary64) (log.f64 N) (/.f64 #s(literal 1/4 binary64) N))","(+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* 1/2 (log (/ 1 N))) (* 1/4 (/ 1 N))))","(-.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) (/.f64 #s(literal 1/4 binary64) N)) (/.f64 (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) N) N))","(+ (* -1 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (pow N 2))) (+ (* -1 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (pow N 3))) (+ (* 1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))))","(-.f64 (-.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) (/.f64 #s(literal 1/4 binary64) N)) (/.f64 (-.f64 (/.f64 #s(literal -1/16 binary64) (log.f64 N)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) (log.f64 N)) #s(literal 1/12 binary64))) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) N) N))","(* -1/2 (log (/ 1 N)))","(*.f64 #s(literal 1/2 binary64) (log.f64 N))","(+ (* -1/2 (log (/ 1 N))) (* 3/4 (/ 1 N)))","(fma.f64 #s(literal 1/2 binary64) (log.f64 N) (/.f64 #s(literal 3/4 binary64) N))","(+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))","(fma.f64 #s(literal 1/2 binary64) (log.f64 N) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (neg.f64 (log.f64 N))) (+.f64 (+.f64 (/.f64 #s(literal 3/4 binary64) N) (/.f64 (/.f64 #s(literal -3/8 binary64) (log.f64 N)) (*.f64 N N))) (/.f64 #s(literal 1/8 binary64) (*.f64 N N)))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(-.f64 (fma.f64 #s(literal 1/2 binary64) (log.f64 N) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) N) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))) (+.f64 (+.f64 (/.f64 #s(literal 3/4 binary64) N) (/.f64 (/.f64 #s(literal -3/8 binary64) (log.f64 N)) (*.f64 N N))) (/.f64 #s(literal 1/8 binary64) (*.f64 N N))))) (fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal -3/8 binary64) (log.f64 N)) #s(literal 1/8 binary64))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1/2 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal -3/16 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))))","(pow (log (/ 1 N)) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 #s(literal -1 binary64) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 1 binary64) N) N)))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 #s(literal -1 binary64) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 1 binary64) N) N)) (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64)))))","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(fma.f64 #s(literal 1/2 binary64) (log.f64 N) (/.f64 #s(literal -1/4 binary64) N))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(fma.f64 #s(literal 1/2 binary64) (log.f64 N) (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) N) N) (/.f64 #s(literal 1/4 binary64) N)))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(-.f64 (fma.f64 #s(literal 1/2 binary64) (log.f64 N) (+.f64 (/.f64 (/.f64 #s(literal -1/16 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (*.f64 N N)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) (neg.f64 (log.f64 N))) (+.f64 (+.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/8 binary64) (log.f64 N)) N) N) (/.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal 3 binary64)))) (/.f64 #s(literal 1/4 binary64) N))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N)) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (neg.f64 (log.f64 N))) #s(literal 1 binary64))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/.f64 (-.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (neg.f64 (log.f64 N))) (/.f64 (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) (neg.f64 (log.f64 N))) (*.f64 N N))) (+.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N)))) #s(literal 1 binary64))) (fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal -3/8 binary64) (log.f64 N)) #s(literal 1/8 binary64))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 N N)) (neg.f64 (log.f64 N))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 11/12 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (neg.f64 (log.f64 N))) (/.f64 (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) (neg.f64 (log.f64 N))) (*.f64 N N))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/16 binary64) (log.f64 N)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) (log.f64 N)) #s(literal 1/12 binary64))) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N)))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal -1/8 binary64) (log.f64 N))) (neg.f64 (log.f64 N))) (+.f64 (/.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N))) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N)))))))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 2/3 binary64) (log.f64 N) #s(literal -1 binary64)) (log.f64 N)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal -3/8 binary64) (log.f64 N)) #s(literal 1/8 binary64))) (log.f64 N)) (/.f64 #s(literal -3/16 binary64) (log.f64 N)))) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (+.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal -3/8 binary64) (log.f64 N)) #s(literal 1/8 binary64))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) (log.f64 N)) (*.f64 N N))) #s(literal 1/4 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (/.f64 #s(literal -3/8 binary64) (log.f64 N))) #s(literal -1/2 binary64) #s(literal -1/16 binary64)) (*.f64 N N)) (neg.f64 (log.f64 N)))))) N)","(/ 1/12 N)","(/.f64 #s(literal 1/12 binary64) N)","(/ (- 1/12 (* 1/24 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(/ -1/3 N)","(/.f64 #s(literal -1/3 binary64) N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(* 4 (pow (log (/ 1 N)) 2))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))","(+ (* -4 (/ (log (/ 1 N)) N)) (* 4 (pow (log (/ 1 N)) 2)))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (log.f64 N)) N))","(+ (* -4 (/ (log (/ 1 N)) N)) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -4 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64) (/.f64 (/.f64 #s(literal 1 binary64) N) N))))","(- (+ (* -4 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 4 (pow (log (/ 1 N)) 2)) (/ 1 (pow N 2)))))) (/ 1 (pow N 3)))","(-.f64 (fma.f64 #s(literal -4/3 binary64) (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -4 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64) (/.f64 (/.f64 #s(literal 1 binary64) N) N))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N) #s(literal 1 binary64)) (neg.f64 N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(* -1 (* N (- (* 1/3 (/ 1 N)) 1/2)))","(*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N)","(* -1 (* N (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2)))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64)) (neg.f64 N))","(* (pow N 2) (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N) #s(literal 1 binary64)) (*.f64 N N))","(* (pow N 2) (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1))","(*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (*.f64 N N))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","#s(literal 0 binary64)","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(fma.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N) #s(literal 0 binary64))","(+ (* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))))) (neg.f64 N))) (neg.f64 N))","(+ (* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (fma.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) #s(literal -1/2 binary64) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (neg.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))))) N)) (+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))","(+.f64 (/.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) N) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))) (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) N) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 N)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))) (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/3 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) N)) (neg.f64 N)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))","(+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (neg.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))))) N) #s(literal -1 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (+.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/3 binary64) (fma.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) #s(literal -1/2 binary64) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (neg.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))))) N)) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (neg.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))))) N) #s(literal -1 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N) #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (neg.f64 N))) N))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) N)) (neg.f64 N))) N))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) N))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) N) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N) (/.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) N) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)) N))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))) N) #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(*.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (fma.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) #s(literal -1/2 binary64) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (neg.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))))) N)) (+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))) (/.f64 (-.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))) #s(literal -2/3 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 1/2 binary64) (/.f64 #s(literal 11/12 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 5 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (fma.f64 (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (neg.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) #s(literal -1/3 binary64) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/3 binary64) (fma.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) #s(literal -1/2 binary64) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (neg.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))))) N)) (fma.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) #s(literal -1/2 binary64) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (neg.f64 (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64))))) N)) (+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (-.f64 (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (- (* 1/24 (/ 1 N)) 1/12) N))","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/.f64 (neg.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) N)","(pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)","(pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))","(+ (* 2 (/ (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(fma.f64 (/.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) N) #s(literal 2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(-.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (-.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal 4 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal -4 binary64))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64) #s(literal 1 binary64)) N)) N))","(+ (* -1 (/ (+ (* -2 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (+ (* -1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (* -1 (/ (+ 1 (* -2/3 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) N)))) N))) N)) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))","(-.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (-.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal 4 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal -4 binary64))) (/.f64 (-.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64) #s(literal 1 binary64)) (/.f64 (fma.f64 #s(literal 4/3 binary64) (log.f64 (/.f64 #s(literal -1 binary64) N)) (fma.f64 (log.f64 #s(literal -1 binary64)) #s(literal -4/3 binary64) #s(literal 1 binary64))) N)) N)) N))"]],"stop":[["iter limit",1],["node limit",1]],"time":288.843994140625,"type":"simplify"},{"count":[[27,737]],"egraph":[[0,9097,367,0.069402287],[2,3903,367,0.042288849],[1,453,409,0.013715141],[0,98,435,0.003193356],[0,61,452,0.00073398]],"inputs":[["(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))","(+.f64 #s(literal 1/2 binary64) N)","(*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))","(-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64)))","(*.f64 (*.f64 N (neg.f64 N)) N)","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))","(/.f64 #s(literal 1/24 binary64) N)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))"]],"memory":[[2671024,64730160]],"outputs":[["(*.f64 (*.f64 (neg.f64 N) (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N))) #s(literal -1 binary64))","(*.f64 (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) N)","(*.f64 (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))) N)","(*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (neg.f64 (neg.f64 N)))","(*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))","(*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N))","(*.f64 #s(literal -1 binary64) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 N)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 N)) (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 N) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 N) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))))","(neg.f64 (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) N))","(fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N)))","(fma.f64 (neg.f64 N) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 (neg.f64 N)))","(fma.f64 (neg.f64 N) #s(literal -1 binary64) (*.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N)))","(fma.f64 (neg.f64 N) #s(literal -1 binary64) (*.f64 (neg.f64 N) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)))","(fma.f64 #s(literal -1 binary64) (neg.f64 N) (*.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N)))","(fma.f64 #s(literal -1 binary64) (neg.f64 N) (*.f64 (neg.f64 N) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)))","(-.f64 #s(literal 0 binary64) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) N))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N)) (neg.f64 (neg.f64 N)))","(+.f64 (*.f64 (neg.f64 N) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (neg.f64 (neg.f64 N)))","(+.f64 (neg.f64 (neg.f64 N)) (*.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N)))","(+.f64 (neg.f64 (neg.f64 N)) (*.f64 (neg.f64 N) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)))","(*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)))","(pow.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))))","(fma.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (*.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N))) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N))))","(-.f64 (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1/2 binary64)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))))) #s(literal -1 binary64))","(pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))))) #s(literal -1 binary64))","(pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal 1 binary64))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))","(/.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 N N)) (pow.f64 (-.f64 #s(literal 1/2 binary64) N) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) N) (-.f64 #s(literal 1/4 binary64) (*.f64 N N))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 N N))) (neg.f64 (-.f64 #s(literal 1/2 binary64) N)))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 N N)) (-.f64 #s(literal 1/2 binary64) N))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 N N (-.f64 #s(literal 1/4 binary64) (*.f64 N #s(literal 1/2 binary64)))))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) N) (-.f64 #s(literal 1/4 binary64) (*.f64 N N))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(fma.f64 #s(literal 1 binary64) N #s(literal 1/2 binary64))","(fma.f64 N #s(literal 1 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 (*.f64 N N) (-.f64 N #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (-.f64 N #s(literal 1/2 binary64))))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) N)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1/2 binary64) N)))","(+.f64 N #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) N)","(*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N)","(*.f64 N (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) N) (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))","(/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64)) #s(literal 1/8 binary64)) N) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))","(/.f64 (*.f64 N (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64)))) (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))","(/.f64 (*.f64 N (+.f64 (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))","(fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N (*.f64 N #s(literal 1/2 binary64)))","(fma.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (*.f64 N #s(literal 1/2 binary64)))","(fma.f64 N #s(literal 1/2 binary64) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N))","(fma.f64 N #s(literal 1/2 binary64) (*.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))","(fma.f64 #s(literal 1/2 binary64) N (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N))","(fma.f64 #s(literal 1/2 binary64) N (*.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))","(+.f64 (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) (*.f64 N #s(literal 1/2 binary64)))","(+.f64 (*.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (*.f64 N #s(literal 1/2 binary64)))","(+.f64 (*.f64 N #s(literal 1/2 binary64)) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N))","(+.f64 (*.f64 N #s(literal 1/2 binary64)) (*.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))","(*.f64 (neg.f64 (neg.f64 N)) (neg.f64 (neg.f64 N)))","(*.f64 (neg.f64 (neg.f64 N)) N)","(*.f64 (*.f64 N N) #s(literal 1 binary64))","(*.f64 (*.f64 (neg.f64 N) N) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 N N))","(*.f64 (neg.f64 N) (neg.f64 N))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 N) N))","(*.f64 N (neg.f64 (neg.f64 N)))","(*.f64 N N)","(pow.f64 (neg.f64 (neg.f64 N)) #s(literal 2 binary64))","(pow.f64 (neg.f64 N) #s(literal 2 binary64))","(pow.f64 N #s(literal 2 binary64))","(neg.f64 (*.f64 (neg.f64 N) N))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 N) N))","(exp.f64 (*.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64))) (pow.f64 (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 N (-.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (neg.f64 (neg.f64 N))))","(pow.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N)) (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))) (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64)))) (neg.f64 (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (-.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (*.f64 (neg.f64 N) N)))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N)))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (*.f64 (neg.f64 N) N)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64))) (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N)) (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64)))))","(fma.f64 (*.f64 N N) #s(literal -1 binary64) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N))","(fma.f64 (*.f64 (neg.f64 N) N) #s(literal 1 binary64) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N))","(fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 N) N) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N))","(fma.f64 (neg.f64 N) (neg.f64 (neg.f64 N)) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N))","(fma.f64 (neg.f64 N) N (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N))","(fma.f64 #s(literal -1 binary64) (*.f64 N N) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N))","(fma.f64 N (neg.f64 (neg.f64 (neg.f64 N))) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N))","(fma.f64 N (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (*.f64 (neg.f64 N) N))","(fma.f64 N (neg.f64 N) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (-.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (*.f64 (neg.f64 N) N))) (/.f64 (pow.f64 N #s(literal 4 binary64)) (-.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (*.f64 (neg.f64 N) N))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N))) (/.f64 (pow.f64 N #s(literal 4 binary64)) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)))) (/.f64 (pow.f64 N #s(literal 6 binary64)) (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)))))","(-.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (*.f64 N N))","(+.f64 (*.f64 (neg.f64 N) N) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N))","(+.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (*.f64 (neg.f64 N) N))","(*.f64 (*.f64 N N) (neg.f64 N))","(*.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64))","(*.f64 (*.f64 (neg.f64 N) N) N)","(*.f64 (neg.f64 N) (*.f64 N N))","(*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)))","(*.f64 N (*.f64 (neg.f64 N) N))","(pow.f64 (neg.f64 N) #s(literal 3 binary64))","(/.f64 (pow.f64 (-.f64 #s(literal 0 binary64) (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 0 binary64) (fma.f64 N N (*.f64 #s(literal 0 binary64) N))) #s(literal 3 binary64)))","(/.f64 (neg.f64 (pow.f64 N #s(literal 6 binary64))) (pow.f64 (+.f64 #s(literal 0 binary64) N) #s(literal 3 binary64)))","(neg.f64 (pow.f64 N #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 N)) #s(literal 3 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N))) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N)))) (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 N)) (log.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))))","(-.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (/.f64 (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (/.f64 (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (/.f64 (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (/.f64 (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (/.f64 (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal 1 binary64) N))) (log.f64 (neg.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log1p.f64 N) (log.f64 N))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(log.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) N)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 N)) (log.f64 N))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)))","(*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))","(*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal -2 binary64)))","(/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(neg.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (-.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64)) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(*.f64 (log1p.f64 N) (pow.f64 (*.f64 (log1p.f64 N) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) #s(literal 1 binary64)))","(*.f64 (log1p.f64 N) (log1p.f64 N))","(*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(exp.f64 (+.f64 (log.f64 (log1p.f64 N)) (log.f64 (log1p.f64 N))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (pow.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","(*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(*.f64 (log.f64 N) (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","(pow.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))","(/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 #s(literal -1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(exp.f64 (-.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (+.f64 (-.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (+.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N))) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N)))) (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 N)) (log.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))))","(-.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (/.f64 (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (/.f64 (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (/.f64 (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (/.f64 (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (/.f64 (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal 1 binary64) N))) (log.f64 (neg.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log1p.f64 N) (log.f64 N))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(log.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) N)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(neg.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (-.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64)) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal 1 binary64))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))","(/.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))) #s(literal -1 binary64))))","(*.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1/24 binary64))","(*.f64 #s(literal -1/24 binary64) (pow.f64 (neg.f64 N) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/24 binary64) N))","(*.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 N #s(literal 24 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 N #s(literal 24 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1/24 binary64) (neg.f64 N))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 N #s(literal 24 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 N #s(literal 24 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 N #s(literal 24 binary64))))","(/.f64 #s(literal 1/24 binary64) (neg.f64 (neg.f64 N)))","(/.f64 #s(literal 1/24 binary64) N)","(neg.f64 (/.f64 #s(literal -1/24 binary64) N))","(exp.f64 (*.f64 (log.f64 (*.f64 N #s(literal 24 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/144 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/1728 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)))","(*.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) (pow.f64 (neg.f64 N) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N))","(*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) (pow.f64 N #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/12 binary64) (/.f64 #s(literal -1/24 binary64) N)) (neg.f64 N))","(/.f64 (/.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) #s(literal -1 binary64)) N)","(/.f64 (*.f64 (-.f64 #s(literal 1/144 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64))) (pow.f64 N #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1/1728 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64))) (pow.f64 N #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(/.f64 (-.f64 (*.f64 #s(literal 1/1728 binary64) (pow.f64 N #s(literal -3 binary64))) (/.f64 #s(literal 1/13824 binary64) (pow.f64 N #s(literal 6 binary64)))) (+.f64 (pow.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))) (neg.f64 (neg.f64 N)))","(/.f64 (*.f64 (-.f64 #s(literal 1/144 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) N))","(/.f64 (*.f64 (-.f64 #s(literal 1/1728 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64)) N))","(/.f64 (*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) #s(literal 1 binary64)) N)","(/.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) N) (*.f64 N (/.f64 #s(literal 1/24 binary64) N))) (*.f64 N N))","(/.f64 (-.f64 #s(literal 1/144 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64))) (*.f64 N (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64))))","(/.f64 (-.f64 #s(literal 1/1728 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64))) (*.f64 N (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64))))","(/.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) (neg.f64 N))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)))))","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(neg.f64 (/.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N))","(fma.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(fma.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N))) (/.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N))))","(-.f64 (/.f64 (*.f64 #s(literal 1/1728 binary64) (pow.f64 N #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N))))) (/.f64 (/.f64 #s(literal 1/13824 binary64) (pow.f64 N #s(literal 6 binary64))) (+.f64 (pow.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/12 binary64) N) (*.f64 N N)) (/.f64 (*.f64 N (/.f64 #s(literal 1/24 binary64) N)) (*.f64 N N)))","(-.f64 (/.f64 #s(literal 1/144 binary64) (*.f64 N (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64)) (*.f64 N (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)))))","(-.f64 (/.f64 #s(literal 1/1728 binary64) (*.f64 N (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64)) (*.f64 N (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64)))))","(-.f64 (/.f64 (/.f64 #s(literal 1/144 binary64) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64))) N) (/.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64))) N))","(-.f64 (/.f64 (/.f64 #s(literal 1/1728 binary64) (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64))) N) (/.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64))) N))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 N)) (/.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N))","(-.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal 1/12 binary64) N) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (neg.f64 N) N) #s(literal -1 binary64)) (pow.f64 (/.f64 N (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) N) (neg.f64 N)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (pow.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) N) (neg.f64 N)))","(*.f64 (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N))) (pow.f64 N #s(literal -3 binary64)))","(*.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) (/.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(pow.f64 (/.f64 N (/.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) N) (neg.f64 N))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)))) #s(literal -1 binary64))","(/.f64 (-.f64 (neg.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N)) (*.f64 (neg.f64 N) N)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) N) (*.f64 (neg.f64 N) N))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)))) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)))) (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) #s(literal 1 binary64)) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))) #s(literal 2 binary64))) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64))) (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) #s(literal 3 binary64)) (/.f64 (neg.f64 (pow.f64 N #s(literal 6 binary64))) (pow.f64 N #s(literal 9 binary64)))) (+.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) N) (neg.f64 N))) (neg.f64 N))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N)) (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64))) (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (pow.f64 (neg.f64 N) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (*.f64 N N))) (pow.f64 N #s(literal 6 binary64)))","(/.f64 (/.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) N) (neg.f64 N)) N)","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64))) (*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N))) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (/.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) N) (neg.f64 N))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 N #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N))))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N))) (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(neg.f64 (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) (pow.f64 N #s(literal 3 binary64))))","(fma.f64 (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (/.f64 N (*.f64 (neg.f64 N) N)) (neg.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))","(fma.f64 (/.f64 N (*.f64 (neg.f64 N) N)) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (neg.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))","(fma.f64 (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (*.f64 (neg.f64 N) N)) (/.f64 N N) (neg.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))","(fma.f64 (/.f64 N N) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (*.f64 (neg.f64 N) N)) (neg.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))","(fma.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (/.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))","(fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))","(fma.f64 N (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 (neg.f64 N) #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) #s(literal 2 binary64)) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64))) (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))))) (/.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))) #s(literal 2 binary64)) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64))) (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))))))) (/.f64 (/.f64 (neg.f64 (pow.f64 N #s(literal 6 binary64))) (pow.f64 N #s(literal 9 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))))))))","(-.f64 (/.f64 (*.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) (pow.f64 (neg.f64 N) #s(literal 3 binary64))) (pow.f64 N #s(literal 6 binary64))) (/.f64 (*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (*.f64 N N)) (pow.f64 N #s(literal 6 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N)))) (/.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64))))) (/.f64 (pow.f64 N #s(literal 6 binary64)) (*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N))) (pow.f64 (neg.f64 N) #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 N #s(literal 4 binary64)) (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 N N))) (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 3 binary64)) (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 N) #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 N #s(literal 6 binary64)) (+.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N)) (pow.f64 N #s(literal 3 binary64))))","(-.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N (*.f64 (neg.f64 N) N))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) (/.f64 N (pow.f64 (neg.f64 N) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (neg.f64 N) N) (pow.f64 N #s(literal -3 binary64)))))","(*.f64 (pow.f64 (/.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 #s(literal 1/9 binary64) (/.f64 #s(literal 1/12 binary64) N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (pow.f64 (neg.f64 N) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1/3 binary64)) (neg.f64 N))","(/.f64 (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal -1 binary64)) N)","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (pow.f64 N #s(literal -1 binary64))) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 #s(literal 1/9 binary64) (/.f64 #s(literal 1/12 binary64) N))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64))) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal 6 binary64))) (*.f64 #s(literal 1/27 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) (neg.f64 (neg.f64 N)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal 1 binary64)) N)","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 #s(literal 1/9 binary64) (/.f64 #s(literal 1/12 binary64) N))) N))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) N) N) (*.f64 N #s(literal 1/3 binary64))) (*.f64 N N))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (*.f64 N (+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (*.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 #s(literal 1/9 binary64) (/.f64 #s(literal 1/12 binary64) N)))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (neg.f64 N))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 #s(literal 1/4 binary64) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 (/.f64 #s(literal 1/4 binary64) N) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 N #s(literal -1 binary64)) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(-.f64 (/.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))) (/.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))))","(-.f64 (/.f64 (/.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal 6 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))))) (/.f64 (*.f64 #s(literal 1/27 binary64) (pow.f64 N #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))))))","(-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) N) N) (*.f64 N N)) (/.f64 (*.f64 N #s(literal 1/3 binary64)) (*.f64 N N)))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 2 binary64)) (*.f64 N (+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) (/.f64 #s(literal 1/9 binary64) (*.f64 N (+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 3 binary64)) (*.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 #s(literal 1/9 binary64) (/.f64 #s(literal 1/12 binary64) N))))) (/.f64 #s(literal 1/27 binary64) (*.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 #s(literal 1/9 binary64) (/.f64 #s(literal 1/12 binary64) N))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N) (/.f64 (/.f64 #s(literal 1/9 binary64) (+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))","(-.f64 (/.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 3 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 #s(literal 1/9 binary64) (/.f64 #s(literal 1/12 binary64) N)))) N) (/.f64 (/.f64 #s(literal 1/27 binary64) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 #s(literal 1/9 binary64) (/.f64 #s(literal 1/12 binary64) N)))) N))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 N)) (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))","(-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(*.f64 (neg.f64 (log.f64 N)) (neg.f64 (log.f64 N)))","(*.f64 (log.f64 N) (log.f64 N))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(exp.f64 (+.f64 (log.f64 (log.f64 N)) (log.f64 (log.f64 N))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(/.f64 (pow.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N)))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)))","(fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(exp.f64 (+.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(+.f64 (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N)))","(+.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)))","(+.f64 (*.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":318.012939453125,"type":"rewrite"},{"compiler":[[36778,3713]],"memory":[[-2112176,87361536]],"time":115.5751953125,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",46.50899551121813,"binary64"],["(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","done",47.25057005192903,"binary64"],["(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",47.272266853227926,"binary64"],["(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",46.44727954047183,"binary64"],["(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 N)) (log.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",47.25966139101953,"binary64"],["(fma.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.25210494435821,"binary64"],["(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","fresh",46.61055083622199,"binary64"],["(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.185820534960634,"binary64"],["(/.f64 (fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log1p.f64 N) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (log.f64 N)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",46.40658001154136,"binary64"],["(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))))) (*.f64 (log.f64 N) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","fresh",46.6554567603106,"binary64"],["(/.f64 (-.f64 (pow.f64 (-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",47.6045950636898,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","done",47.323466653972076,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","fresh",47.30077216436641,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","done",47.32852648360092,"binary64"],["(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",46.81464224468434,"binary64"],["(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",47.30473893074149,"binary64"],["(neg.f64 (fma.f64 (sqrt.f64 (log.f64 N)) (sqrt.f64 (log.f64 N)) (neg.f64 (log1p.f64 N))))","fresh",46.397517043236995,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","fresh",45.14751007752103,"binary64"],["(log.f64 #s(approx (/ (+ 1 N) N) (+.f64 (/.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))))","fresh",45.54201248042199,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","fresh",2.702291970323747,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","fresh",3.484465909798855,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","fresh",2.5860954912126575,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","fresh",3.513730137590536,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","done",5.400620081758022,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (*.f64 (neg.f64 N) N)) (*.f64 (*.f64 N (neg.f64 N)) N)))","fresh",11.227223105695726,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N))))))","fresh",2.2513151763184434,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","fresh",5.001112807517592,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","fresh",3.1067992235117354,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","done",4.940234049265766,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64)) (neg.f64 N)))))","fresh",2.3142003140517713,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))))","fresh",2.314200314051784,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 #s(approx (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))) (neg.f64 N)))))","fresh",4.979959455604235,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)))))","fresh",2.3831528746426223,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal 1 binary64)) N)))))","fresh",3.166056762692712,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","done",11.103125197419944,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (exp.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))) #s(literal -1 binary64))))","fresh",5.2210603507485995,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","fresh",2.915538692885128,"binary64"],["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))","fresh",61.902484466734876,"binary64"]],"compiler":[[2349,454],[22,11],[24,13],[24,13],[29,13],[23,11],[27,15],[10,6],[25,12],[44,11],[50,20],[30,19],[22,12],[15,9],[27,15],[34,17],[23,12],[11,7],[7,6],[12,9],[44,34],[19,15],[32,24],[21,16],[27,21],[38,26],[43,32],[35,27],[37,28],[29,23],[43,33],[42,33],[50,38],[58,42],[56,41],[11,9],[44,34],[37,28],[33,17]],"count":[[840,38]],"kept":[{"done":[4,4],"fresh":[25,16],"new":[806,16],"picked":[5,2]}],"memory":[[2205760,54508048]],"min-error":[[0.16737539984759478,"binary64"]],"time":50.428955078125,"type":"prune"},{"accuracy":[0.37579418177173507],"baseline":[2.2513151763184434],"branch":[["N",0.37579418177173507,2,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",0.3757941817717352,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[74,2]],"inputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (*.f64 (neg.f64 N) N)) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 #s(approx (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal 1 binary64)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64))) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 N)) N) (*.f64 N (neg.f64 N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal -1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N)))","(log.f64 #s(approx (/ (+ 1 N) N) (+.f64 (/.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 N (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N)))","#s(approx (- (log (+ N 1)) (log N)) #s(approx (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)))) N))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (exp.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))) #s(literal -1 binary64))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -2 binary64))) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))","(neg.f64 (fma.f64 (sqrt.f64 (log.f64 N)) (sqrt.f64 (log.f64 N)) (neg.f64 (log1p.f64 N))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 N)) (log.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))) (log.f64 N) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (log.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(-.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))))) (*.f64 (log.f64 N) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log1p.f64 N) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (log.f64 N)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(approx (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (/.f64 (-.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -4/3 binary64) (fma.f64 (log.f64 N) (/.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (fma.f64 (log.f64 N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 N N)) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal -1/4 binary64) (fma.f64 (/.f64 #s(literal 1/3 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 N N)))))))))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))) N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))"]],"memory":[[-4234944,20075216]],"oracle":[62.533152118609635],"outputs":[["(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N))))))"]],"repr":["binary64"],"time":33.405029296875,"times":[[15.51806640625,"N"],[12.8291015625,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[0.4160732222913668],"baseline":[2.2513151763184434],"branch":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",0.41607322229136684,2,"binary64"],["N",0.4160732222913668,2,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[30,2]],"inputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (*.f64 (neg.f64 N) N)) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 #s(approx (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal 1 binary64)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64))) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 N)) N) (*.f64 N (neg.f64 N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal -1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N)))","(log.f64 #s(approx (/ (+ 1 N) N) (+.f64 (/.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))"]],"memory":[[1209344,9014816]],"oracle":[61.902484466734876],"outputs":[["(log.f64 #s(approx (/ (+ 1 N) N) (+.f64 (/.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N))))))"]],"repr":["binary64"],"time":14.119873046875,"times":[[5.822998046875,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"],[6.608154296875,"N"]],"type":"regimes"},{"accuracy":[2.2513151763184434],"baseline":[2.2513151763184434],"branch":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",2.2513151763184442,1,"binary64"],["N",2.2513151763184434,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[28,1]],"inputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (*.f64 (neg.f64 N) N)) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 #s(approx (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal 1 binary64)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64))) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 N)) N) (*.f64 N (neg.f64 N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal -1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N)))"]],"memory":[[-718720,8554720]],"oracle":[61.902484466734876],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N))))))"]],"repr":["binary64"],"time":13.3681640625,"times":[[5.7568359375,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"],[6.030029296875,"N"]],"type":"regimes"},{"accuracy":[2.314200314051784],"baseline":[2.314200314051784],"branch":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",2.3142003140517846,1,"binary64"],["N",2.314200314051784,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[20,1]],"inputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (*.f64 (neg.f64 N) N)) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 #s(approx (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal 1 binary64)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))))"]],"memory":[[-1281584,6810592]],"oracle":[61.902484466734876],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))))"]],"repr":["binary64"],"time":9.890869140625,"times":[[4.1689453125,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"],[4.56494140625,"N"]],"type":"regimes"},{"accuracy":[2.383152874642623],"baseline":[2.3831528746426223],"branch":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",2.383152874642623,1,"binary64"],["N",2.383152874642623,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[19,1]],"inputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (*.f64 (neg.f64 N) N)) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 #s(approx (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal 1 binary64)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (+.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))"]],"memory":[[6671184,6671184]],"oracle":[61.902484466734876],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)))))"]],"repr":["binary64"],"time":9.4560546875,"times":[[3.743896484375,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"],[4.453857421875,"N"]],"type":"regimes"},{"accuracy":[3.106799223511735],"baseline":[3.1067992235117354],"branch":[["N",3.106799223511735,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",3.1067992235117354,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[13,1]],"inputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (*.f64 (neg.f64 N) N)) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 #s(approx (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal 1 binary64)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))"]],"memory":[[-2888464,5340800]],"oracle":[61.902484466734876],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))"]],"repr":["binary64"],"time":9.06298828125,"times":[[4.43115234375,"N"],[3.5771484375,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[4.940234049265765],"baseline":[4.940234049265766],"branch":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",4.940234049265765,1,"binary64"],["N",4.940234049265768,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[8,1]],"inputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (* (+ 1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (* (* N (neg N)) -1)) (*.f64 (neg.f64 N) N)) (*.f64 (*.f64 N (neg.f64 N)) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 #s(approx (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))"]],"memory":[[-3976240,4290272]],"oracle":[61.902484466734876],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))"]],"repr":["binary64"],"time":5.4619140625,"times":[[2.4169921875,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"],[2.37890625,"N"]],"type":"regimes"},{"accuracy":[11.103125197419944],"baseline":[11.103125197419944],"branch":[["N",11.103125197419953,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",11.103125197419944,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[2,1]],"inputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))"]],"memory":[[2976672,2976672]],"oracle":[61.902484466734876],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))"]],"repr":["binary64"],"time":2.93603515625,"times":[[1.321044921875,"N"],[1.202880859375,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[61.90248446673482],"baseline":[61.902484466734876],"branch":[["N",61.90248446673482,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",61.902484466734876,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[1,1]],"inputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))"]],"link":["."],"memory":[[2800704,2800704]],"name":["2log (problem 3.3.6)"],"oracle":[61.902484466734876],"outputs":[["#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))"]],"repr":["binary64"],"time":2.882080078125,"times":[[1.06201171875,"N"],[1.2109375,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"bstep":[[5.553955078125,905.1626354410662,1367.9118288687728]],"compiler":[[43,33],[7,7],[43,33],[7,7],[43,33],[7,7],[43,33],[7,7],[9,7],[1,1]],"memory":[[-9236912,2033920]],"method":["binary-search"],"mixsample":[[0.295166015625,"ival-sub",0],[0.034912109375,"ival-true",0],[0.69140625,"ival-log",0],[0.88671875,"ival-log1p",0],[0.032470703125,"ival-assert",0]],"outcomes":[[3.09228515625,0,"valid",64]],"stop":[["narrow-enough",1]],"time":7.7099609375,"type":"bsearch"},{"bstep":[[2.822021484375,752.832428305951,821.5000528664837]],"compiler":[[43,33],[12,10],[43,33],[12,10],[9,7],[1,1]],"memory":[[1041968,1041968]],"method":["binary-search"],"mixsample":[[0.14794921875,"ival-sub",0],[0.016845703125,"ival-true",0],[0.33837890625,"ival-log",0],[0.477783203125,"ival-log1p",0],[0.0126953125,"ival-assert",0]],"outcomes":[[1.523193359375,0,"valid",32]],"stop":[["narrow-enough",1]],"time":3.5888671875,"type":"bsearch"},{"egraph":[[5,7260,349,0.018649892],[4,1923,349,0.031068537],[3,690,354,0.009582997],[2,301,355,0.003871872],[1,159,357,0.002113499],[0,94,358,0.001477706]],"inputs":[["(if (<=.f64 N #s(literal 960 binary64)) (neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N)))))))","(if (<=.f64 N #s(literal 820 binary64)) (log.f64 #s(approx (/ (+ 1 N) N) (+.f64 (/.f64 #s(literal 1 binary64) N) #s(literal 1 binary64)))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N)))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))"]],"memory":[[2997232,10794704]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 N #s(literal 960 binary64)) (neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N)))))))","(if (<=.f64 N #s(literal 960 binary64)) (neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))) #s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) N)) #s(literal -1 binary64))))","(if (<=.f64 N #s(literal 820 binary64)) (log.f64 #s(approx (/ (+ 1 N) N) (+.f64 (/.f64 #s(literal 1 binary64) N) #s(literal 1 binary64)))) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N)))))))","(if (<=.f64 N #s(literal 820 binary64)) (log.f64 #s(approx (/ (+ 1 N) N) (+.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64)))) #s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) N)) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) (neg.f64 (neg.f64 N))))))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) N)) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N))) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N)))))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (neg N)) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) N) N))) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N)))))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (+.f64 #s(literal 1/2 binary64) N) (*.f64 (/.f64 #s(literal -1/12 binary64) (*.f64 N N)) N))) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 N #s(literal -1 binary64)))","#s(approx (+ (* (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) 1) (/ -1 (/ (+ (log N) (log (+ 1 N))) (pow (log N) 2)))) #s(literal 0 binary64))"]],"stop":[["node limit",1]],"time":87.06103515625,"type":"simplify"},{"compiler":[[360,99]],"memory":[[2311552,2311552]],"stop":[["fuel",1]],"time":3.257080078125,"type":"soundness"},{"compiler":[[360,99],[360,99],[27,19],[27,19],[7,6],[7,6]],"memory":[[-1470864,38878448]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[]],"time":63.8759765625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01806640625,"type":"end"}]