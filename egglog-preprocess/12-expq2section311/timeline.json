[{"memory":[[11408,11408]],"time":0.02880859375,"type":"start"},{"compiler":[[11,7]],"memory":[[422880,422880]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.00036709150299429893,"valid":0.7514363066293299}],[11,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0007341830059885979,"valid":0.7510692151263356}],[10,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0014683660119771957,"valid":0.750335032120347}],[9,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0029367320239543915,"valid":0.7488666661083698}],[8,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.005873464047908783,"valid":0.7459299340844154}],[7,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.011746928095817566,"valid":0.7400564700365067}],[6,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.023493856191635132,"valid":0.7283095419406891}],[5,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.046987712383270264,"valid":0.704815685749054}],[4,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.09397542476654053,"valid":0.6578279733657837}],[3,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.18795084953308105,"valid":0.5638525485992432}],[2,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.3759016990661621,"valid":0.3759016990661621}],[1,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.7518033981323242,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.7518033981323242,"valid":0.0}]],"time":1.695068359375,"type":"analyze"},{"bogosity":[{"infinite":9.106145810711291e-5,"invalid":0.0,"precondition":0.24819660186767578,"valid":0.7517123366742171}],"memory":[[12694400,182021120]],"mixsample":[[83.796630859375,"ival-div",0],[113.70458984375,"ival-exp",0],[30.71875,"ival->",0],[10.416748046875,"exact",0],[84.31298828125,"ival-expm1",0],[4.68359375,"ival-assert",0]],"outcomes":[[514.421875,0,"valid",8256]],"time":775.343994140625,"type":"sample"},{"compiler":[[7,5],[17,7],[17,7]],"confusion":[[174,0,0,82]],"explanations":[["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",174,0,[],[[2]]]],"fperrors":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))",174,0,false,0,false],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,174],[0,82]],"maybe-confusion":[[174,0,0,0,0,82]],"memory":[[-4793168,31639200]],"mixsample":[[3.885498046875,"ival-div",0],[0.50146484375,"ival-true",0],[5.677490234375,"ival-exp",0],[3.490966796875,"ival-expm1",0],[0.380859375,"exact",0],[0.189208984375,"ival-assert",0]],"outcomes":[[26.315673828125,0,"valid",512]],"time":72.72509765625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,5]],"egraph":[[0,14,5,0.0001169],[2,14,7,0.000100094],[1,13,7,0.000102961],[0,8,7,0.000252004],[0,5,7,9.545e-5]],"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"memory":[[-2596720,14793520]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":159.119873046875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.074951171875,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","next",41.41390938849735,"binary64"]],"compiler":[[7,5]],"memory":[[309280,309280]],"time":0.693115234375,"type":"prune"},{"egraph":[[0,14,11,0.000130928],[2,14,15,0.000136118],[1,13,15,0.00015865],[0,8,15,0.000192298],[0,5,15,9.7677e-5]],"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)","x","(-.f64 (exp.f64 x) #s(literal 1 binary64))","#s(literal 1 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2]],"memory":[[506256,506256]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp.f64 x)","x","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":7.5810546875,"type":"simplify"},{"compiler":[[17,7]],"locations":[["(exp.f64 x)","accuracy",0.0],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.0078125],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",40.2938589723152]],"memory":[[-1527952,6344944]],"mixsample":[[1.943359375,"ival-div",0],[0.1669921875,"ival-true",0],[2.8828125,"ival-exp",0],[1.929443359375,"ival-expm1",0],[0.175048828125,"exact",0],[0.104248046875,"ival-assert",0]],"outcomes":[[14.783447265625,0,"valid",256]],"time":20.574951171875,"type":"localize"},{"count":[[3,15]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)"]],"memory":[[721488,721488]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)"]],"series":[[0.593017578125,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","-inf"],[0.666015625,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","inf"],[0.530029296875,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","0"]],"time":2.036865234375,"type":"series"},{"count":[[15,14]],"egraph":[[0,10260,87,0.072324036],[15,6870,105,0.031694163],[14,6130,105,0.020824909],[13,5581,105,0.014365126],[12,5216,105,0.012325257],[11,4930,105,0.010816286],[10,3369,105,0.015886954],[9,1981,105,0.012387837],[8,1506,105,0.013727556],[7,1088,105,0.008874506],[6,994,111,0.006084307],[5,972,111,0.006461228],[4,829,111,0.005419244],[3,574,111,0.005013203],[2,258,111,0.002098554],[1,122,111,0.000855031],[0,44,111,0.000768612]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)"]],"memory":[[2886512,32528688]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(- (exp x) 1)","(expm1.f64 x)","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp x)","(exp.f64 x)"]],"stop":[["iter limit",1],["node limit",1]],"time":324.4541015625,"type":"simplify"},{"count":[[3,351]],"egraph":[[0,8818,9,0.072747159],[3,1809,13,0.028723169],[2,188,13,0.006845536],[1,33,13,0.00085621],[0,8,13,0.000620603],[0,5,13,8.8929e-5]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)"]],"memory":[[4175904,55956688]],"outputs":[["(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 (*.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 (*.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (expm1.f64 x))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (expm1.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 x))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 x))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 x)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (expm1.f64 x) (expm1.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))))))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)))) (neg.f64 (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 3 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64))) (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (exp.f64 x))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))) (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 (*.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (expm1.f64 (*.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (expm1.f64 (*.f64 x #s(literal 9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (expm1.f64 x)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 x) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (exp.f64 x) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)))","(expm1.f64 (*.f64 x #s(literal 1 binary64)))","(expm1.f64 x)","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))) (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (exp.f64 x))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (exp.f64 x))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))) (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 (neg.f64 (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x))) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (/.f64 (neg.f64 (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (pow.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (exp.f64 x)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (exp.f64 x))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 x) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 #s(literal -1 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(*.f64 (neg.f64 (exp.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (expm1.f64 x)))","(*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log1p.f64 (neg.f64 (exp.f64 (neg.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 (expm1.f64 (neg.f64 x))) (neg.f64 (expm1.f64 (neg.f64 x)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (fma.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (-.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (-.f64 (*.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (-.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (-.f64 (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (*.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (*.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (expm1.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (expm1.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (expm1.f64 x)))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (/.f64 (neg.f64 (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (*.f64 (neg.f64 (expm1.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (/.f64 (neg.f64 (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (*.f64 (neg.f64 (expm1.f64 x)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (expm1.f64 x)) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (exp.f64 x)))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (expm1.f64 (neg.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) (exp.f64 x))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (expm1.f64 x)))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 x))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x))) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 (*.f64 (exp.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (expm1.f64 x))))","(/.f64 (*.f64 (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)))","(/.f64 (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))))","(/.f64 (*.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(/.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (exp.f64 (neg.f64 x))))","(/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(/.f64 (neg.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x)))","(/.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (expm1.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 x) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (expm1.f64 x))) (*.f64 (exp.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)) (*.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (neg.f64 x))))","(/.f64 (exp.f64 x) (expm1.f64 x))","(neg.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (exp.f64 x) (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(exp.f64 (-.f64 (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64)) (neg.f64 x)))","(exp.f64 (fma.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64) x))","(exp.f64 (+.f64 x (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log1p.f64 (neg.f64 (exp.f64 (neg.f64 x)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(+.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))","(pow.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (exp.f64 x))))))","(/.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(/.f64 (exp.f64 x) #s(literal 1 binary64))","(neg.f64 (neg.f64 (exp.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (exp.f64 x)))","(exp.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 x #s(literal 1 binary64)))","(exp.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":268.64794921875,"type":"rewrite"},{"compiler":[[9463,1223]],"memory":[[-146688,37721392]],"time":48.048095703125,"type":"eval"},{"alts":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","next",0.00390625,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","next",20.11633331223943,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","next",20.042485755438328,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","next",20.093280064789926,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","next",20.08434900256687,"binary64"]],"compiler":[[5,5],[21,15],[16,12],[11,8],[13,10],[5,5],[21,15],[16,12],[11,8],[13,10]],"count":[[386,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[385,5],"picked":[1,0]}],"memory":[[-650176,16022400]],"min-error":[[0.0,"binary64"]],"time":8.884033203125,"type":"prune"},{"egraph":[[0,300,136,0.001620224],[9,300,144,0.001223654],[8,294,144,0.00137141],[7,264,144,0.001559882],[6,204,144,0.001365736],[5,171,144,0.000820537],[4,165,144,0.000702553],[3,136,144,0.000713792],[2,85,144,0.00061118],[1,56,144,0.000440179],[0,35,144,0.000403789],[0,22,144,0.000246149]],"inputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","#s(literal -1 binary64)","(expm1.f64 (neg.f64 x))","(neg.f64 x)","x","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(literal 1/12 binary64)","x","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)"]],"locations":[["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(neg.f64 x)","cost-diff",0],["(expm1.f64 (neg.f64 x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","cost-diff",0]],"memory":[[1804944,1804944]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","#s(literal -1 binary64)","(expm1.f64 (neg.f64 x))","(neg.f64 x)","x","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(literal 1/12 binary64)","x","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":19.681884765625,"type":"simplify"},{"compiler":[[121,23]],"locations":[["(*.f64 x x)","accuracy",0.0],["(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",0.05078125],["(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","accuracy",0.05859375],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","accuracy",20.11633331223943],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","accuracy",0.0],["(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",0.08984375],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","accuracy",20.042485755438328],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","accuracy",0.0],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",20.08434900256687],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","accuracy",20.093280064789926],["(neg.f64 x)","accuracy",0.0],["(expm1.f64 (neg.f64 x))","accuracy",0.0],["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","accuracy",0.00390625]],"memory":[[-2813216,23216944]],"mixsample":[[8.0380859375,"ival-div",0],[6.14306640625,"ival-add",0],[3.4775390625,"ival-exp",0],[9.05224609375,"ival-mult",0],[4.93798828125,"ival-expm1",0],[0.162109375,"ival-assert",0],[0.344970703125,"ival-true",0],[9.744873046875,"const",0],[0.640380859375,"exact",0],[2.09521484375,"ival-neg",0]],"outcomes":[[72.27294921875,0,"valid",256]],"time":94.700927734375,"type":"localize"},{"count":[[13,31]],"inputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(expm1.f64 (neg.f64 x))","(neg.f64 x)","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)"]],"memory":[[3099760,3099760]],"outputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","1/12","(+ 1/12 (* -1/720 (pow x 2)))","(pow x 2)","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(/ (exp x) (- (exp x) 1))","1/2","(+ 1/2 (/ 1 x))","(* 1/12 x)","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))"]],"series":[[2.158935546875,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (neg x) (/ (exp x) (- (exp x) 1)) (/ 1 x) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) (- (exp x) 1)) (+ (* (+ (* (* x x) -1/720) 1/12) x) (+ 1/2 (/ 1 x))) (+ (* (* x x) -1/720) 1/12) (* x x))","x","-inf"],[2.885986328125,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (neg x) (/ (exp x) (- (exp x) 1)) (/ 1 x) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) (- (exp x) 1)) (+ (* (+ (* (* x x) -1/720) 1/12) x) (+ 1/2 (/ 1 x))) (+ (* (* x x) -1/720) 1/12) (* x x))","x","inf"],[1.625,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (neg x) (/ (exp x) (- (exp x) 1)) (/ 1 x) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) (- (exp x) 1)) (+ (* (+ (* (* x x) -1/720) 1/12) x) (+ 1/2 (/ 1 x))) (+ (* (* x x) -1/720) 1/12) (* x x))","x","0"]],"time":7.3740234375,"type":"series"},{"count":[[31,31]],"egraph":[[0,8297,202,0.0810134],[4,6452,237,0.033058528],[3,2120,254,0.026266873],[2,705,267,0.006440191],[1,250,277,0.002308814],[0,98,278,0.000975412]],"inputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","1/12","(+ 1/12 (* -1/720 (pow x 2)))","(pow x 2)","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(/ (exp x) (- (exp x) 1))","1/2","(+ 1/2 (/ 1 x))","(* 1/12 x)","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))"]],"memory":[[-9952160,25201296]],"method":["egg-herbie"],"outputs":[["(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/720 binary64) (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/2 x) 1))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","1/12","#s(literal 1/12 binary64)","(+ 1/12 (* -1/720 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(pow x 2)","(*.f64 x x)","(/ -1 (- (exp (neg x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (neg x)) 1)","(expm1.f64 (neg.f64 x))","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (/ 1 x))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(* 1/12 x)","(*.f64 #s(literal 1/12 binary64) x)","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(* -1/720 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/720 binary64))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/720 binary64)) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(* -1/720 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/720 binary64))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(/ -1 (- (exp (* -1 x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (* -1 x)) 1)","(expm1.f64 (neg.f64 x))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (neg.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) (fma.f64 (*.f64 #s(literal 1/720 binary64) x) x #s(literal -1/12 binary64)))) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":302.60498046875,"type":"simplify"},{"count":[[13,437]],"egraph":[[0,8297,101,0.12968955],[2,1132,101,0.053592056],[1,150,109,0.006660503],[0,35,109,0.002143692],[0,22,109,0.000399744]],"inputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(expm1.f64 (neg.f64 x))","(neg.f64 x)","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)"]],"memory":[[4023456,60956224]],"outputs":[["(*.f64 (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (exp.f64 x))","(*.f64 (neg.f64 (exp.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (expm1.f64 x)))","(*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (neg.f64 x))))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(neg.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (exp.f64 (neg.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (exp.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (exp.f64 x) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 (neg.f64 (exp.f64 (neg.f64 x)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 x))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 x))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (exp.f64 (neg.f64 x))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (expm1.f64 (neg.f64 x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))))","(*.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(*.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x)))","(*.f64 (expm1.f64 (neg.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (neg.f64 x))))","(pow.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 x))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1 binary64))","(/.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (neg.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 (exp.f64 x) (expm1.f64 x)))","(neg.f64 (neg.f64 (expm1.f64 (neg.f64 x))))","(fma.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(fma.f64 (/.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (/.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) x))","(expm1.f64 (neg.f64 x))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (neg.f64 x))))","(-.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 x)))","(*.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))))","(*.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))))","(*.f64 x #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) x)","(/.f64 (neg.f64 (neg.f64 (*.f64 x x))) (neg.f64 x))","(/.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 x x #s(literal 0 binary64))))","(/.f64 (neg.f64 (*.f64 x x)) x)","(/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 0 binary64) (neg.f64 x)))))","(/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 x x #s(literal 0 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (neg.f64 (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal 0 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(neg.f64 x)","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) #s(literal 0 binary64))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (*.f64 x x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 x x #s(literal 0 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x #s(literal 0 binary64))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (exp.f64 x))))","(-.f64 #s(literal 0 binary64) x)","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(+.f64 (neg.f64 x) #s(literal 0 binary64))","(log.f64 (exp.f64 (neg.f64 x)))","#s(approx (/ (exp x) (- (exp x) 1)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))","(exp.f64 (neg.f64 (log.f64 x)))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))) (+.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) x))","(+.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1/144 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))))","(*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))))))","(*.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(literal -1/12 binary64) (*.f64 x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64)))) #s(literal 1/4 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)))) (-.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) (-.f64 #s(literal 1/4 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))) (*.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1/144 binary64) (*.f64 x x)))) (neg.f64 (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (*.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x (*.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (neg.f64 x) (*.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)) x (*.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) x))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)) (neg.f64 x) (*.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) (*.f64 x (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (*.f64 x (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)))) (*.f64 x (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1/144 binary64) (*.f64 x x))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(literal -1/12 binary64) (*.f64 x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(literal -1/12 binary64) (*.f64 x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)) (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1/144 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(literal -1/12 binary64) (*.f64 x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64))))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(fma.f64 x #s(literal 1/12 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))) (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(+.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))","(+.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(+.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 1/12 binary64) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))","(+.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))","(*.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64)))) #s(literal 1/4 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)))) (-.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) (-.f64 #s(literal 1/4 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))) (*.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (*.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) x))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (neg.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) x (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) x))","(/.f64 (fma.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (neg.f64 x) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) (neg.f64 x)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (*.f64 x (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (neg.f64 x) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 x) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (neg.f64 x) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (pow.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal -1 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (pow.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (pow.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal -1 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64))))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 x (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(+.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(*.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) (pow.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (pow.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))) (*.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (fma.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal 1/144 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (neg.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))","(/.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))))","(/.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x))) (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)))))","(fma.f64 (*.f64 #s(literal -1/720 binary64) x) x #s(literal 1/12 binary64))","(fma.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(fma.f64 x (*.f64 #s(literal -1/720 binary64) x) #s(literal 1/12 binary64))","(-.f64 (/.f64 #s(literal 1/144 binary64) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (neg.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(+.f64 (*.f64 #s(literal -1/720 binary64) (*.f64 x x)) #s(literal 1/12 binary64))","(+.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 x x)","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 x) #s(literal 0 binary64) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(+.f64 (*.f64 (neg.f64 x) #s(literal 0 binary64)) (*.f64 x x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":388.1220703125,"type":"rewrite"},{"compiler":[[17573,1892]],"memory":[[1017984,53543888]],"time":76.52099609375,"type":"eval"},{"alts":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","done",0.00390625,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","next",6.440297101034764,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",7.7277524385107395,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","next",11.161652720238745,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.11633331223943,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.042485755438328,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","next",62.19665106240517,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","done",20.093280064789926,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","done",20.08434900256687,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","next",61.95910899505782,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","next",62.03704299744866,"binary64"]],"compiler":[[5,5],[20,15],[17,13],[14,11],[21,15],[16,12],[18,13],[11,8],[13,10],[21,15],[15,11],[20,15],[17,13],[14,11],[18,13],[21,15],[15,11]],"count":[[581,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[576,6],"picked":[5,5]}],"memory":[[-8111424,24954000]],"min-error":[[0.0,"binary64"]],"time":92.840087890625,"type":"prune"},{"egraph":[[0,5149,199,0.043361043],[25,5149,215,0.04177711],[24,5148,215,0.041824599],[23,5136,215,0.042654084],[22,5107,215,0.048950354],[21,5107,215,0.022603015],[20,5095,215,0.024289209],[19,5080,215,0.023068723],[18,5070,215,0.026027146],[17,5037,215,0.026490532],[16,4993,215,0.024159934],[15,4935,215,0.021989109],[14,4852,215,0.022170898],[13,4793,215,0.022020643],[12,4686,215,0.017061545],[11,4405,215,0.024826747],[10,4383,215,0.014112693],[9,4336,215,0.013941537],[8,4187,215,0.015330654],[7,3308,215,0.02353867],[6,2028,215,0.022220479],[5,1062,215,0.012233206],[4,448,215,0.004108557],[3,224,215,0.001933648],[2,115,215,0.000936426],[1,72,215,0.000601758],[0,48,215,0.00053498],[0,34,215,0.000301667]],"inputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(literal 1/12 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(literal 1/12 binary64)","x","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","#s(literal 1/2 binary64)","x"]],"locations":[["(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","cost-diff",0],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","cost-diff",0],["(*.f64 #s(literal 1/12 binary64) x)","cost-diff",0],["#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","cost-diff",0],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","cost-diff",0]],"memory":[[-706448,15687088]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(literal 1/12 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(literal 1/12 binary64)","x","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","#s(literal 1/2 binary64)","x"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":686.22998046875,"type":"simplify"},{"compiler":[[146,29]],"locations":[["(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","accuracy",0.0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","accuracy",0.00390625],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","accuracy",0.00390625],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","accuracy",11.158728867768641],["(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","accuracy",0.08984375],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","accuracy",20.042485755438328],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","accuracy",43.023078263797906],["(*.f64 #s(literal 1/12 binary64) x)","accuracy",0.28515625],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","accuracy",20.042485755438328],["#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","accuracy",42.819926517014395],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","accuracy",20.08434900256687],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","accuracy",43.023078263797906],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","accuracy",0.0234375],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","accuracy",0.02734375],["(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","accuracy",0.078125],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",6.440145262730096]],"memory":[[3113808,26527680]],"mixsample":[[7.9189453125,"ival-div",0],[9.747314453125,"ival-add",0],[3.383544921875,"ival-exp",0],[13.605224609375,"ival-mult",0],[4.524658203125,"ival-expm1",0],[0.18505859375,"ival-assert",0],[0.307861328125,"ival-true",0],[11.665283203125,"const",0],[0.55224609375,"exact",0],[1.890625,"ival-neg",0]],"outcomes":[[75.728271484375,0,"valid",256]],"time":104.494873046875,"type":"localize"},{"count":[[16,46]],"inputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))"]],"memory":[[3221456,3221456]],"outputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -1/6 x))) 1)","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(* 1/12 x)","-1/6","(- (* 1/24 x) 1/6)","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(* 1/24 (pow x 3))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(/ (exp x) (- (exp x) 1))","1/2","(+ 1/2 (/ 1 x))","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/2 (pow x 2))","(* (pow x 2) (- 1/2 (/ 1 x)))","(* 1/2 x)","(* x (- 1/2 (/ 1 x)))","(* 1/24 x)","(* x (- 1/24 (* 1/6 (/ 1 x))))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* x (- (/ 1 x) 1/2)))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))"]],"series":[[5.551025390625,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (* 1/12 x) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* 1/2 x) -1) x) (+ (* 1/2 x) -1) (+ (* 1/24 x) -1/6))","x","-inf"],[3.51416015625,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (* 1/12 x) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* 1/2 x) -1) x) (+ (* 1/2 x) -1) (+ (* 1/24 x) -1/6))","x","inf"],[2.35888671875,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (* 1/12 x) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* 1/2 x) -1) x) (+ (* 1/2 x) -1) (+ (* 1/24 x) -1/6))","x","0"]],"time":12.4501953125,"type":"series"},{"count":[[46,46]],"egraph":[[0,8057,305,0.087040901],[3,2568,352,0.030309238],[2,918,360,0.012218064],[1,340,370,0.003082827],[0,124,383,0.001219248]],"inputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -1/6 x))) 1)","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(* 1/12 x)","-1/6","(- (* 1/24 x) 1/6)","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(* 1/24 (pow x 3))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(/ (exp x) (- (exp x) 1))","1/2","(+ 1/2 (/ 1 x))","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/2 (pow x 2))","(* (pow x 2) (- 1/2 (/ 1 x)))","(* 1/2 x)","(* x (- 1/2 (/ 1 x)))","(* 1/24 x)","(* x (- 1/24 (* 1/6 (/ 1 x))))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* x (- (/ 1 x) 1/2)))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))"]],"memory":[[5362608,35470048]],"method":["egg-herbie"],"outputs":[["(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/2 x) 1))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -1/6 x))) 1)","(fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(* 1/12 x)","(*.f64 #s(literal 1/12 binary64) x)","-1/6","#s(literal -1/6 binary64)","(- (* 1/24 x) 1/6)","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(/ -1 (- (exp (neg x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (neg x)) 1)","(expm1.f64 (neg.f64 x))","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (-.f64 #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (/ 1 x))","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/12 binary64) x (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (- 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (- 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (- 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(/ -1 (- (exp (* -1 x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (* -1 x)) 1)","(expm1.f64 (neg.f64 x))","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(neg.f64 (fma.f64 #s(literal -1/12 binary64) x (-.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(* -1 (* x (- (/ 1 x) 1/2)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":224.0849609375,"type":"simplify"},{"count":[[16,278]],"egraph":[[0,8526,171,0.079697616],[2,1474,187,0.034061731],[1,202,187,0.006306993],[0,48,187,0.001608574],[0,34,187,0.000297012]],"inputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))"]],"memory":[[-9529744,52990304]],"outputs":[["(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x (neg.f64 x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","(*.f64 x #s(literal 1/12 binary64))","(/.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal -1 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(*.f64 (-.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))) (*.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (fma.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (*.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64))) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)) (-.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))) (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(fma.f64 x #s(literal 1/12 binary64) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (neg.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(+.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(+.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (neg.f64 x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)","(-.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) x)","(+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/2 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/2 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/144 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))) (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal 1/36 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(/.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)) (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/144 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64))","(+.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":337.306884765625,"type":"rewrite"},{"compiler":[[9717,1424]],"memory":[[6739200,31747952]],"time":49.613037109375,"type":"eval"},{"alts":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","done",0.00390625,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","fresh",38.8961363975933,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","next",6.440297101034764,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","done",6.440297101034764,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",6.440297101034764,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","next",6.440297101034764,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",7.7277524385107395,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","done",11.161652720238745,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","next",6.440297101034764,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","fresh",48.31525783659884,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","next",47.29614019319766,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","next",52.834204531432384,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.11633331223943,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.042485755438328,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","done",62.19665106240517,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","done",20.093280064789926,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","done",20.08434900256687,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","done",61.95910899505782,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","done",62.03704299744866,"binary64"]],"compiler":[[5,5],[50,21],[22,17],[20,15],[27,20],[31,24],[23,18],[14,11],[24,18],[33,26],[32,25],[19,16],[21,15],[16,12],[18,13],[11,8],[13,10],[21,15],[15,11],[50,21],[22,17],[27,20],[31,24],[23,18],[24,18],[33,26],[32,25],[19,16]],"count":[[323,19]],"kept":[{"done":[5,5],"fresh":[1,0],"new":[312,9],"picked":[5,5]}],"memory":[[-7660480,18617568]],"min-error":[[0.0,"binary64"]],"time":26.074951171875,"type":"prune"},{"egraph":[[0,8172,494,0.054568245],[6,7404,520,0.017109531],[5,5130,520,0.025685059],[4,3063,520,0.025430386],[3,1041,520,0.014762947],[2,301,520,0.004945971],[1,144,532,0.001774001],[0,85,545,0.000912251],[0,54,567,0.000557677]],"inputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))","(*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)","#s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","x","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","#s(literal 1 binary64)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))","(fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))","#s(literal 1/576 binary64)","(*.f64 x x)","x","#s(literal -1/36 binary64)","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","#s(literal 1 binary64)","(neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)"]],"locations":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","cost-diff",0],["(neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","cost-diff",1],["(neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))","cost-diff",1],["(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","cost-diff",2],["(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","cost-diff",0],["(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","cost-diff",2],["#s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x))","cost-diff",0],["(*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","cost-diff",0],["#s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","cost-diff",4]],"memory":[[8424096,29592592]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))","(*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)","#s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","x","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","#s(literal 1 binary64)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 (fma.f64 (fma.f64 (/.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 (/.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64))","(fma.f64 (/.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal 1/2 binary64))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))","(fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))","(fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))","#s(literal 1/576 binary64)","(*.f64 x x)","x","#s(literal -1/36 binary64)","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","#s(literal 1 binary64)","(neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":222.001953125,"type":"simplify"},{"compiler":[[417,42]],"locations":[["(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","accuracy",0.0859375],["(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","accuracy",0.08984375],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",6.440145262730096],["(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","accuracy",8.511029993996214],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","accuracy",0.02734375],["(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","accuracy",0.078125],["(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","accuracy",0.24653199676985338],["#s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","accuracy",6.440145262730096],["(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","accuracy",0.0859375],["(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)","accuracy",0.21875],["#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))","accuracy",6.440145262730096],["#s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x))","accuracy",42.10038448191417],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","accuracy",0.00390625],["(*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)","accuracy",0.00390625],["#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))","accuracy",11.158728867768641],["#s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))","accuracy",42.700470827854204],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","accuracy",0.03125],["(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","accuracy",0.078125],["(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","accuracy",0.24653199676985338],["#s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x))","accuracy",6.440145262730096]],"memory":[[-7971568,46333952]],"mixsample":[[8.61767578125,"ival-div",0],[9.37109375,"ival-add",0],[51.46142578125,"ival-mult",0],[2.087158203125,"ival-expm1",0],[0.096923828125,"ival-assert",0],[0.24658203125,"ival-true",0],[15.345947265625,"const",0],[0.443359375,"exact",0],[3.3623046875,"ival-neg",0]],"outcomes":[[116.302978515625,0,"valid",256]],"time":152.89208984375,"type":"localize"},{"count":[[27,75]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))","(*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)","#s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","#s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))","(neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))"]],"memory":[[4679376,4679376]],"outputs":[["-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -1/6 x))) 1)","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -1/12 x) 1/2)) 1)","(- (* x (- (* x (- (* -1/144 (pow x 2)) 1/12)) 1/2)) 1)","-1/6","(- (* 1/24 x) 1/6)","1/36","(+ 1/36 (* -1/576 (pow x 2)))","(- (* -1/24 x) 1/6)","(* -1/6 x)","(* x (- (* 1/24 x) 1/6))","(* -1/6 (pow x 2))","(* (pow x 2) (- (* 1/24 x) 1/6))","1/6","(+ 1/6 (* 1/24 x))","-6","(- (* 3/2 x) 6)","(- (* x (+ 3/2 (* -3/8 x))) 6)","(- (* x (+ 3/2 (* x (- (* 3/32 x) 3/8)))) 6)","(* 1/24 (pow x 3))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(* 1/2 (pow x 2))","(* (pow x 2) (- 1/2 (/ 1 x)))","(* 1/2 x)","(* x (- 1/2 (/ 1 x)))","(/ 24 (pow x 3))","(/ (+ 24 (* 96 (/ 1 x))) (pow x 3))","(/ (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (pow x 3))","(/ (- (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (* 192 (/ 1 (pow x 3)))) (pow x 3))","(* 1/24 x)","(* x (- 1/24 (* 1/6 (/ 1 x))))","(* -1/576 (pow x 2))","(* (pow x 2) (- (* 1/36 (/ 1 (pow x 2))) 1/576))","(* -1/24 x)","(* -1 (* x (+ 1/24 (* 1/6 (/ 1 x)))))","(* 1/24 (pow x 2))","(* (pow x 2) (- 1/24 (* 1/6 (/ 1 x))))","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(/ -24 x)","(/ (- (* 96 (/ 1 x)) 24) x)","(/ (- (* 96 (/ 1 x)) (+ 24 (/ 384 (pow x 2)))) x)","(/ (- (+ (* 96 (/ 1 x)) (* 1536 (/ 1 (pow x 3)))) (+ 24 (/ 384 (pow x 2)))) x)","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(* -1 (* x (- (/ 1 x) 1/2)))","(* -1 (/ (- (* -1 (/ (+ 96 (* 96 (/ 1 x))) x)) 24) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 96 (* -1 (/ (- (* 192 (/ 1 x)) 96) x))) x)) 24) (pow x 3)))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (/ (- 24 (* 96 (/ 1 x))) x))","(* -1 (/ (+ 24 (* -1 (/ (- 96 (* 384 (/ 1 x))) x))) x))","(* -1 (/ (+ 24 (* -1 (/ (+ 96 (* -1 (/ (- 384 (* 1536 (/ 1 x))) x))) x))) x))"]],"series":[[2.93798828125,"((/ 1 (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (/ 1 (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))) x) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* 1/2 x) -1) x) (+ (* 1/2 x) -1) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ x (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1)) (* (neg (+ (* 1/576 (* x x)) -1/36)) (/ 1 (neg (+ (* 1/24 x) 1/6)))) (neg (+ (* 1/576 (* x x)) -1/36)) (neg (+ (* 1/24 x) 1/6)) (/ -1 (- (exp (neg x)) 1)) (+ (* 1/24 x) -1/6) (* (+ (* 1/24 x) -1/6) x) (* (* (+ (* 1/24 x) -1/6) x) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (- (exp (neg x)) 1) (+ (* 1/24 x) 1/6) (/ 1 (neg (+ (* 1/24 x) 1/6))))","x","-inf"],[2.820068359375,"((/ 1 (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (/ 1 (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))) x) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* 1/2 x) -1) x) (+ (* 1/2 x) -1) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ x (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1)) (* (neg (+ (* 1/576 (* x x)) -1/36)) (/ 1 (neg (+ (* 1/24 x) 1/6)))) (neg (+ (* 1/576 (* x x)) -1/36)) (neg (+ (* 1/24 x) 1/6)) (/ -1 (- (exp (neg x)) 1)) (+ (* 1/24 x) -1/6) (* (+ (* 1/24 x) -1/6) x) (* (* (+ (* 1/24 x) -1/6) x) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (- (exp (neg x)) 1) (+ (* 1/24 x) 1/6) (/ 1 (neg (+ (* 1/24 x) 1/6))))","x","inf"],[2.47900390625,"((/ 1 (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (/ 1 (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))) x) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* 1/2 x) -1) x) (+ (* 1/2 x) -1) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ x (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (/ 1 (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1)) (* (neg (+ (* 1/576 (* x x)) -1/36)) (/ 1 (neg (+ (* 1/24 x) 1/6)))) (neg (+ (* 1/576 (* x x)) -1/36)) (neg (+ (* 1/24 x) 1/6)) (/ -1 (- (exp (neg x)) 1)) (+ (* 1/24 x) -1/6) (* (+ (* 1/24 x) -1/6) x) (* (* (+ (* 1/24 x) -1/6) x) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (- (exp (neg x)) 1) (+ (* 1/24 x) 1/6) (/ 1 (neg (+ (* 1/24 x) 1/6))))","x","0"]],"time":9.923095703125,"type":"series"},{"count":[[75,75]],"egraph":[[0,8484,553,0.079998869],[3,4120,608,0.033705594],[2,1605,613,0.01969744],[1,607,629,0.006516551],[0,226,653,0.002203208]],"inputs":[["-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -1/6 x))) 1)","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -1/12 x) 1/2)) 1)","(- (* x (- (* x (- (* -1/144 (pow x 2)) 1/12)) 1/2)) 1)","-1/6","(- (* 1/24 x) 1/6)","1/36","(+ 1/36 (* -1/576 (pow x 2)))","(- (* -1/24 x) 1/6)","(* -1/6 x)","(* x (- (* 1/24 x) 1/6))","(* -1/6 (pow x 2))","(* (pow x 2) (- (* 1/24 x) 1/6))","1/6","(+ 1/6 (* 1/24 x))","-6","(- (* 3/2 x) 6)","(- (* x (+ 3/2 (* -3/8 x))) 6)","(- (* x (+ 3/2 (* x (- (* 3/32 x) 3/8)))) 6)","(* 1/24 (pow x 3))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(* 1/2 (pow x 2))","(* (pow x 2) (- 1/2 (/ 1 x)))","(* 1/2 x)","(* x (- 1/2 (/ 1 x)))","(/ 24 (pow x 3))","(/ (+ 24 (* 96 (/ 1 x))) (pow x 3))","(/ (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (pow x 3))","(/ (- (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (* 192 (/ 1 (pow x 3)))) (pow x 3))","(* 1/24 x)","(* x (- 1/24 (* 1/6 (/ 1 x))))","(* -1/576 (pow x 2))","(* (pow x 2) (- (* 1/36 (/ 1 (pow x 2))) 1/576))","(* -1/24 x)","(* -1 (* x (+ 1/24 (* 1/6 (/ 1 x)))))","(* 1/24 (pow x 2))","(* (pow x 2) (- 1/24 (* 1/6 (/ 1 x))))","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(/ -24 x)","(/ (- (* 96 (/ 1 x)) 24) x)","(/ (- (* 96 (/ 1 x)) (+ 24 (/ 384 (pow x 2)))) x)","(/ (- (+ (* 96 (/ 1 x)) (* 1536 (/ 1 (pow x 3)))) (+ 24 (/ 384 (pow x 2)))) x)","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(* -1 (* x (- (/ 1 x) 1/2)))","(* -1 (/ (- (* -1 (/ (+ 96 (* 96 (/ 1 x))) x)) 24) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 96 (* -1 (/ (- (* 192 (/ 1 x)) 96) x))) x)) 24) (pow x 3)))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (/ (- 24 (* 96 (/ 1 x))) x))","(* -1 (/ (+ 24 (* -1 (/ (- 96 (* 384 (/ 1 x))) x))) x))","(* -1 (/ (+ 24 (* -1 (/ (+ 96 (* -1 (/ (- 384 (* 1536 (/ 1 x))) x))) x))) x))"]],"memory":[[-306560,37018464]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -1/6 x))) 1)","(fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/2 x) 1))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(- (* -1/2 x) 1)","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(- (* x (- (* -1/12 x) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -1/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1/144 (pow x 2)) 1/12)) 1/2)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/144 binary64) (*.f64 x x) #s(literal -1/12 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","-1/6","#s(literal -1/6 binary64)","(- (* 1/24 x) 1/6)","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","1/36","#s(literal 1/36 binary64)","(+ 1/36 (* -1/576 (pow x 2)))","(fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))","(- (* -1/24 x) 1/6)","(fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))","(* -1/6 x)","(*.f64 #s(literal -1/6 binary64) x)","(* x (- (* 1/24 x) 1/6))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)","(* -1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/6 binary64))","(* (pow x 2) (- (* 1/24 x) 1/6))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","-6","#s(literal -6 binary64)","(- (* 3/2 x) 6)","(fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64))","(- (* x (+ 3/2 (* -3/8 x))) 6)","(fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 3/2 binary64)) x #s(literal -6 binary64))","(- (* x (+ 3/2 (* x (- (* 3/32 x) 3/8)))) 6)","(fma.f64 (fma.f64 (fma.f64 #s(literal 3/32 binary64) x #s(literal -3/8 binary64)) x #s(literal 3/2 binary64)) x #s(literal -6 binary64))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(*.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 x x)) #s(literal -1/24 binary64)) x #s(literal -1/6 binary64)) x (/.f64 #s(literal -1 binary64) x)) x)","(/ -1 (- (exp (neg x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (neg x)) 1)","(expm1.f64 (neg.f64 x))","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) x)))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (- 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (- 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(/ 24 (pow x 3))","(/.f64 #s(literal 24 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 24 (* 96 (/ 1 x))) (pow x 3))","(/.f64 (+.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (pow x 3))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 96 binary64) x) #s(literal -96 binary64)) x) #s(literal -24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (- (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (* 192 (/ 1 (pow x 3)))) (pow x 3))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 (-.f64 (/.f64 #s(literal 192 binary64) x) #s(literal 96 binary64)) x)) x) #s(literal -24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (- 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(* -1/576 (pow x 2))","(*.f64 #s(literal -1/576 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/36 (/ 1 (pow x 2))) 1/576))","(fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))","(* -1/24 x)","(*.f64 #s(literal -1/24 binary64) x)","(* -1 (* x (+ 1/24 (* 1/6 (/ 1 x)))))","(fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(/ -24 x)","(/.f64 #s(literal -24 binary64) x)","(/ (- (* 96 (/ 1 x)) 24) x)","(/.f64 (-.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) x)","(/ (- (* 96 (/ 1 x)) (+ 24 (/ 384 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 #s(literal 384 binary64) x)) x) #s(literal 24 binary64)) x)","(/ (- (+ (* 96 (/ 1 x)) (* 1536 (/ 1 (pow x 3)))) (+ 24 (/ 384 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 #s(literal 384 binary64) x)) x) (-.f64 #s(literal 24 binary64) (/.f64 #s(literal 1536 binary64) (pow.f64 x #s(literal 3 binary64))))) x)","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(*.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 x x)) #s(literal -1/24 binary64)) x #s(literal -1/6 binary64)) x (/.f64 #s(literal -1 binary64) x)) x)","(/ -1 (- (exp (* -1 x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (* -1 x)) 1)","(expm1.f64 (neg.f64 x))","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)))","(* -1 (* x (- (/ 1 x) 1/2)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(* -1 (/ (- (* -1 (/ (+ 96 (* 96 (/ 1 x))) x)) 24) (pow x 3)))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 96 binary64) x) #s(literal -96 binary64)) x) #s(literal -24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- (* -1 (/ (+ 96 (* -1 (/ (- (* 192 (/ 1 x)) 96) x))) x)) 24) (pow x 3)))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 (-.f64 (/.f64 #s(literal 192 binary64) x) #s(literal 96 binary64)) x)) x) #s(literal -24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(* -1 (/ (- 24 (* 96 (/ 1 x))) x))","(/.f64 (-.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) x)","(* -1 (/ (+ 24 (* -1 (/ (- 96 (* 384 (/ 1 x))) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 #s(literal 384 binary64) x)) x) #s(literal 24 binary64)) x)","(* -1 (/ (+ 24 (* -1 (/ (+ 96 (* -1 (/ (- 384 (* 1536 (/ 1 x))) x))) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 (-.f64 #s(literal 384 binary64) (/.f64 #s(literal 1536 binary64) x)) x)) x) #s(literal 24 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":235.9228515625,"type":"simplify"},{"count":[[27,1113]],"egraph":[[0,8454,340,0.064313171],[2,1956,366,0.027872368],[1,306,366,0.007423985],[0,85,367,0.002562338],[0,54,422,0.000545884]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))","(*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)","#s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","#s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))","(neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))"]],"memory":[[4868080,69973424]],"outputs":[["(*.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)))","(-.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 x (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 x (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 x (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(*.f64 (neg.f64 x) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x))","(*.f64 x (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(pow.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x) (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) x)) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))))","(/.f64 x (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x))","(+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))))","(*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)","(*.f64 x #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","#s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x))))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x))))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x))))","(*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) x)","(*.f64 x #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)))","(/.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)) (pow.f64 x #s(literal -1 binary64)))","#s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 x (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 x (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 x (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(*.f64 (neg.f64 x) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x))","(*.f64 x (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(pow.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x) (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) x)) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))))","(/.f64 x (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x))","(+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(pow.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(-.f64 (/.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) #s(literal 1 binary64)))","(exp.f64 (neg.f64 (log.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(*.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))","(*.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal -1 binary64))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal -1/144 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))","(*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(pow.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))) (-.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x)))) (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)))) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (-.f64 (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64))) (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64))))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 1/36 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal -1/144 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal -1 binary64)) (/.f64 #s(literal 1/24 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal -1 binary64)) (/.f64 #s(literal 1/24 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/24 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/24 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) (/.f64 #s(literal 1/576 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) (/.f64 #s(literal 1/576 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 #s(literal 1/576 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 #s(literal 1/576 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 #s(literal -1/576 binary64) (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 #s(literal -1/576 binary64) (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 #s(literal -1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 #s(literal -1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)))","(fma.f64 #s(literal 1/576 binary64) (/.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 #s(literal 1/576 binary64) (/.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/24 binary64) x) #s(literal -1/6 binary64))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))","(fma.f64 #s(literal 1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 #s(literal 1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))) (/.f64 #s(literal 1/216 binary64) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 (/.f64 #s(literal 1/1296 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(-.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(-.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/6 binary64))","(+.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)))","(+.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(+.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(+.f64 #s(literal 0 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(+.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1/6 binary64))","(+.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))","(*.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/191102976 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) #s(literal 1/36 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))))))","(*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64))) #s(literal 1/1296 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)))","(/.f64 (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)))) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1/191102976 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal -1/46656 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))))","(/.f64 (-.f64 #s(literal 1/46656 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 6 binary64))) (+.f64 #s(literal 1/1296 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal 1/576 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) #s(literal 1/46656 binary64)) (fma.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)))))","(/.f64 (+.f64 #s(literal 1/46656 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1/1296 binary64) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal 1/46656 binary64) (*.f64 #s(literal -1/191102976 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 #s(literal 1/1296 binary64) (-.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 4 binary64)) (*.f64 #s(literal 1/36 binary64) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)))) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))","(/.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 3 binary64))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/191102976 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) #s(literal 1/36 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64))))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))","(/.f64 (-.f64 #s(literal 1/1296 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 4 binary64))) (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))))","(/.f64 (fma.f64 #s(literal -1/191102976 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) #s(literal 1/36 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64))) (neg.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))))","(/.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))))))","(/.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64))))))","(/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64)) (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) #s(literal 1/36 binary64)))) (fma.f64 #s(literal -1/191102976 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/46656 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64))))","(neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))","(fma.f64 (neg.f64 (*.f64 #s(literal 1/576 binary64) x)) x #s(literal 1/36 binary64))","(fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))","(fma.f64 (neg.f64 (*.f64 x x)) #s(literal 1/576 binary64) #s(literal 1/36 binary64))","(fma.f64 (*.f64 #s(literal 1/576 binary64) x) (neg.f64 x) #s(literal 1/36 binary64))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64) #s(literal 1/36 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/576 binary64) #s(literal 1/36 binary64))","(fma.f64 #s(literal 1/576 binary64) (neg.f64 (*.f64 x x)) #s(literal 1/36 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal 1/36 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 4 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/1296 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 4 binary64)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)))) (/.f64 #s(literal 1/1296 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)))))","(-.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) #s(literal -1/36 binary64))","(-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal 1/576 binary64)))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64))","(+.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) #s(literal 1/36 binary64))","(+.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) #s(literal -1 binary64)))","(+.f64 #s(literal 1/36 binary64) (*.f64 #s(literal -1/576 binary64) (*.f64 x x)))","(+.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(*.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal -1/24 binary64) x) #s(literal -1/6 binary64))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))))","(*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))))","(*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))","(*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (/.f64 #s(literal -1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(*.f64 #s(literal -1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(pow.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64))) #s(literal 1/36 binary64)) (-.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) #s(literal -1/6 binary64)))","(/.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)))) (-.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/216 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 (-.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) #s(literal -1/216 binary64)) (fma.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) #s(literal -1/6 binary64)))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))))","(/.f64 (+.f64 #s(literal -1/216 binary64) (pow.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64))) (*.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1/216 binary64) (*.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 #s(literal -1/6 binary64) (*.f64 #s(literal -1/24 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal -1/24 binary64) x) #s(literal -1/6 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64)))","(/.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal -1/24 binary64) x) #s(literal -1/6 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 1 binary64))","(/.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal -1/24 binary64) x)))","(/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (neg.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64))))","(/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64)))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64)) (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal -1/24 binary64) x) #s(literal -1/6 binary64)))) (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))","(fma.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64) #s(literal -1/6 binary64))","(fma.f64 (neg.f64 x) #s(literal 1/24 binary64) #s(literal -1/6 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/24 binary64)) #s(literal -1/6 binary64))","(fma.f64 x #s(literal -1/24 binary64) #s(literal -1/6 binary64))","(fma.f64 #s(literal 1/24 binary64) (neg.f64 x) #s(literal -1/6 binary64))","(-.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal 1/6 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))) (/.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal -1/24 binary64) x) #s(literal 1 binary64)) #s(literal 1/6 binary64))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal -1 binary64)))","(-.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) #s(literal 1/6 binary64))","(-.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (/.f64 #s(literal -1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (/.f64 (/.f64 #s(literal 1/1296 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (/.f64 #s(literal 1/36 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(-.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(-.f64 (*.f64 #s(literal -1/24 binary64) x) #s(literal 1/6 binary64))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(-.f64 #s(literal 0 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(-.f64 #s(literal -1/6 binary64) (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1 binary64)))","(-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) #s(literal -1/6 binary64))","(+.f64 (*.f64 #s(literal -1/24 binary64) x) #s(literal -1/6 binary64))","(+.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(+.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)))","(+.f64 #s(literal -1/6 binary64) (*.f64 #s(literal -1/24 binary64) x))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(*.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))","(*.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal -1 binary64))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal -1/144 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))","(*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(pow.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))) (-.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x)))) (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)))) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (-.f64 (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64))) (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64))))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 1/36 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal -1/144 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal -1 binary64)) (/.f64 #s(literal 1/24 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal -1 binary64)) (/.f64 #s(literal 1/24 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/24 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/24 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) (/.f64 #s(literal 1/576 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) (/.f64 #s(literal 1/576 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 #s(literal 1/576 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 #s(literal 1/576 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 #s(literal -1/576 binary64) (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 #s(literal -1/576 binary64) (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 #s(literal -1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 #s(literal -1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)))","(fma.f64 #s(literal 1/576 binary64) (/.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 #s(literal 1/576 binary64) (/.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/24 binary64) x) #s(literal -1/6 binary64))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))","(fma.f64 #s(literal 1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 #s(literal 1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))) (/.f64 #s(literal 1/216 binary64) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 (/.f64 #s(literal 1/1296 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(-.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(-.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/6 binary64))","(+.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1/576 binary64) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/36 binary64)))","(+.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(+.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(+.f64 #s(literal 0 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(+.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1/6 binary64))","(+.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))","(*.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(*.f64 (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) x) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))","(*.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 x))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) x))","(*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (/.f64 x (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(*.f64 (neg.f64 x) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) x))","(*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)","(*.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (*.f64 (*.f64 #s(literal -1/6 binary64) x) (*.f64 #s(literal -1/6 binary64) x))) (-.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (*.f64 #s(literal -1/6 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) x) (*.f64 #s(literal -1/6 binary64) x)) (*.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x))) (-.f64 (*.f64 #s(literal -1/6 binary64) x) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (*.f64 x (*.f64 x #s(literal 1/24 binary64)))) (*.f64 (*.f64 x #s(literal -1/6 binary64)) (*.f64 x #s(literal -1/6 binary64)))) (-.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (*.f64 x #s(literal -1/6 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1/6 binary64)) (*.f64 x #s(literal -1/6 binary64))) (*.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (*.f64 x (*.f64 x #s(literal 1/24 binary64))))) (-.f64 (*.f64 x #s(literal -1/6 binary64)) (*.f64 x (*.f64 x #s(literal 1/24 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/6 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (-.f64 (*.f64 (*.f64 #s(literal -1/6 binary64) x) (*.f64 #s(literal -1/6 binary64) x)) (*.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (*.f64 #s(literal -1/6 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1/6 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (*.f64 #s(literal -1/6 binary64) x) (-.f64 (*.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (*.f64 (*.f64 #s(literal -1/6 binary64) x) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 x #s(literal -1/6 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (-.f64 (*.f64 (*.f64 x #s(literal -1/6 binary64)) (*.f64 x #s(literal -1/6 binary64))) (*.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (*.f64 x #s(literal -1/6 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal -1/6 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 x #s(literal -1/6 binary64)) (*.f64 x #s(literal -1/6 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (*.f64 x (*.f64 x #s(literal 1/24 binary64)))) (*.f64 (*.f64 x #s(literal -1/6 binary64)) (*.f64 x (*.f64 x #s(literal 1/24 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) x)) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) x)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 x (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)))))","(neg.f64 (*.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) x))","(fma.f64 (*.f64 x #s(literal 1/24 binary64)) x (*.f64 #s(literal -1/6 binary64) x))","(fma.f64 #s(literal -1/6 binary64) x (*.f64 (*.f64 x #s(literal 1/24 binary64)) x))","(fma.f64 x (*.f64 x #s(literal 1/24 binary64)) (*.f64 x #s(literal -1/6 binary64)))","(fma.f64 x #s(literal -1/6 binary64) (*.f64 x (*.f64 x #s(literal 1/24 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) x))","(+.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (*.f64 #s(literal -1/6 binary64) x))","(+.f64 (*.f64 #s(literal -1/6 binary64) x) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x))","(+.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (*.f64 x #s(literal -1/6 binary64)))","(+.f64 (*.f64 x #s(literal -1/6 binary64)) (*.f64 x (*.f64 x #s(literal 1/24 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (/.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) x)","(*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))","(*.f64 x (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (*.f64 x x))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (*.f64 x x))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (*.f64 x x)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (*.f64 x x)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (*.f64 x x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64)) (*.f64 x x))))","(*.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x) #s(literal 1 binary64)))","(-.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) #s(literal -1/1296 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/191102976 binary64) #s(literal -1/46656 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal 1/144 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/331776 binary64) (-.f64 #s(literal 1/1296 binary64) (*.f64 (*.f64 x x) #s(literal -1/20736 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) (/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))))","(*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(*.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(pow.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal 1/36 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal 2 binary64)))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))","(/.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 1 binary64))","(/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64))))","(/.f64 (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64)) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (neg.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (*.f64 x #s(literal 1/144 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal 1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(neg.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 x (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 x (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/24 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/24 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal -1 binary64)) (/.f64 #s(literal 1/24 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 x #s(literal 1/24 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/24 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 x (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal -1 binary64)) (/.f64 x (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) #s(literal 1 binary64)) (/.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/576 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) (/.f64 #s(literal 1/576 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 #s(literal 1/576 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1/576 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/576 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 x (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/13824 binary64) #s(literal -1/216 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 #s(literal 1/24 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) (fma.f64 #s(literal -1/576 binary64) (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 (*.f64 x #s(literal 1/24 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 #s(literal -1/576 binary64) (/.f64 (*.f64 x x) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 #s(literal -1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 #s(literal 1/576 binary64) (/.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 (neg.f64 x) (/.f64 (*.f64 #s(literal 1/576 binary64) x) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/24 binary64) x) #s(literal 1/6 binary64))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 x (/.f64 (*.f64 #s(literal 1/576 binary64) x) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))","(fma.f64 #s(literal 1/24 binary64) (/.f64 (*.f64 x (*.f64 x #s(literal 1/24 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(-.f64 (/.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1 binary64)) #s(literal -1/6 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))) (/.f64 #s(literal -1/216 binary64) (fma.f64 (*.f64 #s(literal 1/576 binary64) x) x (+.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal -1/576 binary64) (*.f64 x x)) (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))) (/.f64 #s(literal -1/36 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (-.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(-.f64 (/.f64 #s(literal 1/36 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (/.f64 (/.f64 #s(literal 1/1296 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64))) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(-.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(-.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(-.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1/6 binary64))","(+.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/576 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(+.f64 #s(literal 0 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(+.f64 #s(literal 1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))","(+.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 1/6 binary64))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)))","(neg.f64 (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64))) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal -1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":238.214111328125,"type":"rewrite"},{"compiler":[[34755,6120]],"memory":[[4380752,103350688]],"time":201.94384765625,"type":"eval"},{"alts":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","done",0.00390625,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","done",6.440297101034764,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 (fma.f64 #s(literal 3/32 binary64) x #s(literal -3/8 binary64)) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",3.122080301534051,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",3.5984951620784416,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",4.083671185165837,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",5.105417818035097,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",7.7277524385107395,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","done",11.161652720238745,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","fresh",48.31525783659884,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))) x)))","fresh",47.29614019319766,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","done",47.29614019319766,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","fresh",48.515415435607814,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","fresh",48.48982800447192,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","fresh",48.48982800447192,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","done",52.834204531432384,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.11633331223943,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",20.042485755438328,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","done",62.19665106240517,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","done",20.093280064789926,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","done",20.08434900256687,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","done",61.95910899505782,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","done",62.03704299744866,"binary64"]],"compiler":[[740,196],[5,5],[20,15],[43,32],[40,30],[37,28],[34,26],[23,18],[14,11],[33,26],[32,25],[32,25],[39,25],[37,24],[39,25],[19,16],[21,15],[16,12],[18,13],[11,8],[13,10],[21,15],[15,11]],"count":[[907,22]],"kept":[{"done":[10,10],"fresh":[4,2],"new":[888,8],"picked":[5,2]}],"memory":[[-431920,42894560]],"min-error":[[0.0,"binary64"]],"time":30.529052734375,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.00390625,1,"binary64"],["(exp.f64 x)",0.00390625,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[29,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 (fma.f64 #s(literal 3/32 binary64) x #s(literal -3/8 binary64)) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"memory":[[-10704320,12209760]],"oracle":[63.67951606430181],"outputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))"]],"repr":["binary64"],"time":23.68408203125,"times":[[7.952880859375,"x"],[5.575927734375,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[8.171142578125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[3.122080301534051],"baseline":[3.122080301534051],"branch":[["x",3.122080301534051,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",3.122080301534051,1,"binary64"],["(exp.f64 x)",3.122080301534051,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[27,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 (fma.f64 #s(literal 3/32 binary64) x #s(literal -3/8 binary64)) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))"]],"memory":[[3814608,11629056]],"oracle":[63.60572387159672],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 (fma.f64 #s(literal 3/32 binary64) x #s(literal -3/8 binary64)) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":20.156982421875,"times":[[6.31298828125,"x"],[5.794921875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[6.0,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[3.5984951620784416],"baseline":[3.5984951620784416],"branch":[["x",3.598495162078442,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",3.5984951620784416,1,"binary64"],["(exp.f64 x)",3.5984951620784416,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[24,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"memory":[[2777024,10670336]],"oracle":[63.29899215781994],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":16.903076171875,"times":[[5.711181640625,"x"],[4.700927734375,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[4.7890625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[4.083671185165837],"baseline":[4.083671185165837],"branch":[["x",4.083671185165837,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",4.083671185165837,1,"binary64"],["(exp.f64 x)",4.083671185165837,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[23,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"memory":[[-7628496,10542848]],"oracle":[63.29899215781994],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":16.579833984375,"times":[[5.65283203125,"x"],[4.43603515625,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[4.359130859375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[5.105417818035097],"baseline":[5.105417818035097],"branch":[["x",5.1054178180350975,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",5.105417818035097,1,"binary64"],["(exp.f64 x)",5.105417818035097,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[20,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))))"]],"memory":[[1487232,9596496]],"oracle":[63.29899215781994],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":14.565185546875,"times":[[5.125,"x"],[4.117919921875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[3.85400390625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[6.440297101034763],"baseline":[6.440297101034764],"branch":[["x",6.440297101034764,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",6.440297101034763,1,"binary64"],["(exp.f64 x)",6.440297101034763,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[18,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"memory":[[846720,9018720]],"oracle":[63.29899215781994],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":13.699951171875,"times":[[4.590087890625,"x"],[3.8740234375,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[3.764892578125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[6.4019495087564975],"baseline":[7.7277524385107395],"branch":[["x",6.401949508756498,2,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",7.727752438510739,1,"binary64"],["(exp.f64 x)",6.4019495087564975,2,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[17,2]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))"]],"memory":[[-326736,8581296]],"oracle":[63.29899215781994],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":13.096923828125,"times":[[4.197998046875,"x"],[4.14501953125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[3.373046875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[6.4019495088050835],"baseline":[7.7277524385107395],"branch":[["x",6.4019495088050835,2,"binary64"],["(exp.f64 x)",6.4019495088050835,2,"binary64"]],"compiler":[[1,1],[2,2]],"count":[[16,2]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) (*.f64 x x))) x)))"]],"memory":[[-2152976,6014464]],"oracle":[63.29899215781994],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":8.662109375,"times":[[4.2490234375,"x"],[3.2529296875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[6.401949530341051],"baseline":[7.7277524385107395],"branch":[["x",6.401949530341053,2,"binary64"],["(exp.f64 x)",6.401949530341051,2,"binary64"]],"compiler":[[1,1],[2,2]],"count":[[14,2]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))"]],"memory":[[5621392,5621392]],"oracle":[63.29899215781994],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":7.73681640625,"times":[[3.7099609375,"x"],[3.02294921875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[7.727752438510739],"baseline":[7.7277524385107395],"branch":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",7.727752438510739,1,"binary64"],["x",7.7277524385107395,1,"binary64"],["(exp.f64 x)",7.7277524385107395,1,"binary64"]],"compiler":[[7,5],[1,1],[2,2]],"count":[[13,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"memory":[[-735344,7333776]],"oracle":[63.27573793730099],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":10.63818359375,"times":[[2.952880859375,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[3.490966796875,"x"],[2.9609375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[7.620043495979363],"baseline":[11.161652720238745],"branch":[["x",7.620043495979363,2,"binary64"],["(exp.f64 x)",7.620043495979363,2,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",8.52440663376256,2,"binary64"]],"compiler":[[1,1],[2,2],[7,5]],"count":[[10,2]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 #s(literal -1/6 binary64) x)) x)) x)))"]],"memory":[[-1827600,6447040]],"oracle":[63.17748445701702],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":8.85888671875,"times":[[3.010986328125,"x"],[2.47607421875,"(exp.f64 x)"],[2.443115234375,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[11.161652720238745],"baseline":[11.161652720238745],"branch":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",11.161652720238745,1,"binary64"],["x",11.161652720238745,1,"binary64"],["(exp.f64 x)",11.161652720238745,1,"binary64"]],"compiler":[[7,5],[1,1],[2,2]],"count":[[8,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))"]],"memory":[[-3116080,5904752]],"oracle":[63.17748445701702],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":7.953125,"times":[[2.343017578125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[2.73095703125,"x"],[2.008056640625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[10.945302105356767],"baseline":[20.042485755438328],"branch":[["x",10.945302105356767,2,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",11.83379272155172,2,"binary64"],["(exp.f64 x)",10.945302105356767,2,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[7,2]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))"]],"memory":[[5545120,5545120]],"oracle":[63.17748445701702],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":7.22802734375,"times":[[2.2958984375,"x"],[2.036865234375,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[1.97900390625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[20.042485755438328],"baseline":[20.042485755438328],"branch":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",20.042485755438328,1,"binary64"],["x",20.042485755438328,1,"binary64"],["(exp.f64 x)",20.042485755438328,1,"binary64"]],"compiler":[[7,5],[1,1],[2,2]],"count":[[6,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"memory":[[-3052064,5244128]],"oracle":[62.52268868485772],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":6.505859375,"times":[[1.7529296875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[2.0791015625,"x"],[1.848876953125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[20.08434900256686],"baseline":[20.08434900256687],"branch":[["x",20.08434900256686,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",20.08434900256687,1,"binary64"],["(exp.f64 x)",20.084349002566867,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[5,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))"]],"memory":[[-3361008,4925776]],"oracle":[62.52268868485772],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))"]],"repr":["binary64"],"time":5.964111328125,"times":[[2.10400390625,"x"],[1.556884765625,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[1.510986328125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[20.093280064789926],"baseline":[20.093280064789926],"branch":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",20.093280064789926,1,"binary64"],["(exp.f64 x)",20.093280064789926,1,"binary64"],["x",20.09328006478994,1,"binary64"]],"compiler":[[7,5],[2,2],[1,1]],"count":[[4,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[4714880,4714880]],"oracle":[62.52268868485772],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":5.423828125,"times":[[1.421142578125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[1.568115234375,"(exp.f64 x)"],[1.75,"x"]],"type":"regimes"},{"accuracy":[61.95910899505779],"baseline":[61.95910899505782],"branch":[["x",61.95910899505779,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",61.95910899505784,1,"binary64"],["(exp.f64 x)",61.959108995057846,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[3,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))"]],"memory":[[-3916640,4369328]],"oracle":[62.52268868485772],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))"]],"repr":["binary64"],"time":4.85107421875,"times":[[1.674072265625,"x"],[1.251220703125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[1.2080078125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[62.03704299744869],"baseline":[62.03704299744866],"branch":[["(exp.f64 x)",62.03704299744874,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",62.037042997448744,1,"binary64"],["x",62.03704299744869,1,"binary64"]],"compiler":[[2,2],[7,5],[1,1]],"count":[[1,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]],"link":["."],"memory":[[3700736,3700736]],"name":["expq2 (section 3.11)"],"oracle":[62.03704299744866],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]],"repr":["binary64"],"time":3.402099609375,"times":[[0.81298828125,"(exp.f64 x)"],[0.919189453125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[1.10400390625,"x"]],"type":"regimes"},{"bstep":[[0.053955078125,0.0,0.999740609787039]],"compiler":[[7,7],[2,2]],"memory":[[161824,161824]],"method":["left-value"],"time":0.5029296875,"type":"bsearch"},{"bstep":[[0.031005859375,0.0,0.999740609787039]],"compiler":[[7,7],[2,2]],"memory":[[175280,175280]],"method":["left-value"],"time":0.405029296875,"type":"bsearch"},{"bstep":[[0.033935546875,0.0,0.999740609787039]],"compiler":[[7,7],[2,2]],"memory":[[156256,156256]],"method":["left-value"],"time":0.286865234375,"type":"bsearch"},{"bstep":[[0.027099609375,0.0,0.999740609787039]],"compiler":[[7,7],[2,2]],"memory":[[150528,150528]],"method":["left-value"],"time":0.252197265625,"type":"bsearch"},{"bstep":[[0.02587890625,0.0,0.999740609787039]],"compiler":[[7,7],[2,2]],"memory":[[146448,146448]],"method":["left-value"],"time":0.246826171875,"type":"bsearch"},{"egraph":[[14,5089,564,0.028431236],[13,5067,564,0.034313503],[12,5008,564,0.027005754],[11,4958,564,0.023854934],[10,4930,564,0.017980678],[9,4726,564,0.020684571],[8,3951,564,0.020681664],[7,2832,564,0.021091228],[6,1297,564,0.013423318],[5,797,564,0.00667979],[4,612,564,0.005154411],[3,382,564,0.004067748],[2,254,564,0.003391968],[1,187,568,0.002892472],[0,143,568,0.002567916]],"inputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 (fma.f64 #s(literal 3/32 binary64) x #s(literal -3/8 binary64)) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]],"memory":[[-382944,8593376]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 (fma.f64 #s(literal 3/32 binary64) x #s(literal -3/8 binary64)) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 3/2 binary64)) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) (fma.f64 #s(literal 3/2 binary64) x #s(literal -6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) #s(approx (/ 1 (neg (+ (* 1/24 x) 1/6))) #s(literal -6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 #s(approx (* (+ (* 1/24 x) -1/6) x) (*.f64 (*.f64 x x) #s(literal 1/24 binary64))) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) #s(approx (* (* (+ (* 1/24 x) -1/6) x) x) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (pow.f64 x #s(literal -1 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]],"stop":[["saturated",1]],"time":248.7509765625,"type":"simplify"},{"compiler":[[568,148]],"memory":[[-3190928,5000464]],"stop":[["fuel",1]],"time":17.863037109375,"type":"soundness"},{"compiler":[[568,148],[568,148],[6,6],[6,6],[7,5],[7,5]],"memory":[[8378976,63821968]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":105.26708984375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02001953125,"type":"end"}]