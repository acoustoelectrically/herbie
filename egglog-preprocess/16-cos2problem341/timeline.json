[{"memory":[[10384,10384]],"time":0.029052734375,"type":"start"},{"compiler":[[10,8]],"memory":[[448400,448400]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.00048804283142089844,"valid":0.9990236759185791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":1.472900390625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.00048828125,"valid":0.99951171875}],"memory":[[19453792,298999168]],"mixsample":[[73.093994140625,"adjust",800],[119.73828125,"ival-div",0],[0.068359375,"ival-div",400],[498.76123046875,"ival-cos",1600],[0.0380859375,"ival-sub",2000],[0.03125,"ival-mult",2000],[4.0458984375,"ival-assert",0],[113.236083984375,"ival-sub",0],[295.765380859375,"ival-cos",0],[0.049560546875,"ival-sub",400],[68.164306640625,"ival-cos",400],[41.21728515625,"adjust",2000],[0.011962890625,"ival-mult",800],[0.053466796875,"ival-mult",400],[73.013671875,"ival-mult",0],[0.011962890625,"ival-sub",800],[159.198974609375,"ival-cos",3600],[0.01611328125,"ival-div",800],[7.22802734375,"ival-true",0],[7.585693359375,"adjust",2800],[0.052001953125,"ival-div",2000],[6.79443359375,"exact",0]],"outcomes":[[168.844970703125,1,"valid",1279],[825.3349609375,2,"valid",2249],[283.50634765625,3,"valid",564],[458.4169921875,0,"valid",4164]],"time":2068.7060546875,"type":"sample"},{"compiler":[[8,6],[21,8],[21,8]],"confusion":[[134,0,0,122]],"explanations":[["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","n/o",2,0,[["(*.f64 x x)","overflow",61]],[[]]],["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","u/u",49,0,[["(-.f64 #s(literal 1 binary64) (cos.f64 x))","underflow",49],["(*.f64 x x)","underflow",49]],[[]]],["-.f64","(-.f64 #s(literal 1 binary64) (cos.f64 x))","cancellation",83,4,[],[[1]]]],"fperrors":[["(-.f64 #s(literal 1 binary64) (cos.f64 x))",84,0,false,1,[-4.356350779426528e+181]],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",52,0,false,1,[-4.080595552077323e-160]],["#s(literal 1 binary64)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["(*.f64 x x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,134],[0,122]],"maybe-confusion":[[134,0,0,0,4,118]],"memory":[[1715184,44042832]],"mixsample":[[5.97607421875,"ival-div",0],[4.25732421875,"adjust",800],[4.232666015625,"ival-mult",0],[23.58935546875,"ival-cos",1600],[0.235595703125,"ival-assert",0],[3.74072265625,"ival-cos",3600],[6.2783203125,"ival-sub",0],[0.30126953125,"adjust",2800],[0.49853515625,"ival-true",0],[15.74560546875,"ival-cos",0],[3.704345703125,"ival-cos",400],[0.37109375,"exact",0],[1.869873046875,"adjust",2000]],"outcomes":[[11.28955078125,1,"valid",92],[44.10791015625,2,"valid",142],[8.275390625,3,"valid",20],[26.217529296875,0,"valid",258]],"time":141.2490234375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"egraph":[[0,1179,8,0.003543719],[10,1179,8,0.007238146],[9,1047,8,0.015854629],[8,629,8,0.008716599],[7,324,8,0.004915166],[6,188,8,0.001437603],[5,131,8,0.00091933],[4,82,8,0.000569609],[3,46,8,0.000349935],[2,30,8,0.000212811],[1,19,8,0.000164655],[0,10,8,0.000175053],[0,6,8,0.000211436]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"memory":[[467792,16695344]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(abs x)"]],"time":250.81787109375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.092041015625,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","next",31.630069183552916,"binary64"]],"compiler":[[8,6]],"memory":[[-8739520,296656]],"time":2.24609375,"type":"prune"},{"egraph":[[0,1179,19,0.003978304],[10,1179,19,0.007792068],[9,1047,19,0.010822975],[8,629,19,0.009035852],[7,324,19,0.00424258],[6,188,19,0.00170719],[5,131,19,0.000883311],[4,82,19,0.000770271],[3,46,19,0.00052766],[2,30,19,0.00026367],[1,19,19,0.000292984],[0,10,19,0.000288651],[0,6,19,0.000106136]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 x x)"]],"locations":[["(*.f64 x x)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","cost-diff",0]],"memory":[[2153440,2153440]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 x x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":62.466796875,"type":"simplify"},{"compiler":[[21,8]],"locations":[["(*.f64 x x)","accuracy",0.0],["(cos.f64 x)","accuracy",0.125],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","accuracy",12.23215511119967],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",18.60365167981119]],"memory":[[2535280,10544480]],"mixsample":[[3.33203125,"ival-div",0],[2.21337890625,"adjust",800],[1.969970703125,"ival-mult",0],[13.95556640625,"ival-cos",1600],[0.097412109375,"ival-assert",0],[1.893798828125,"ival-cos",3600],[3.0703125,"ival-sub",0],[0.12939453125,"adjust",2800],[0.222900390625,"ival-true",0],[9.47998046875,"ival-cos",0],[1.891845703125,"ival-cos",400],[0.195068359375,"exact",0],[1.078125,"adjust",2000]],"outcomes":[[6.00830078125,1,"valid",46],[25.218994140625,2,"valid",71],[4.452880859375,3,"valid",10],[14.75634765625,0,"valid",129]],"time":63.93212890625,"type":"localize"},{"count":[[4,16]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 x x)"]],"memory":[[1307776,1307776]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)"]],"series":[[1.66015625,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","-inf"],[1.279052734375,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","inf"],[1.212890625,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","0"]],"time":4.625,"type":"series"},{"count":[[16,16]],"egraph":[[0,8119,135,0.103556223],[13,7710,153,0.033304865],[12,7708,153,0.019919916],[11,7690,153,0.020461912],[10,7480,153,0.020740821],[9,6581,153,0.028439764],[8,4960,153,0.02832466],[7,3409,153,0.023674258],[6,2536,153,0.010180567],[5,1981,153,0.008136183],[4,1281,153,0.006830329],[3,601,153,0.003978455],[2,258,153,0.002128746],[1,105,153,0.001357909],[0,42,153,0.000678453]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)"]],"memory":[[1317008,34051328]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/720 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(pow x 2)","(*.f64 x x)","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1]],"time":408.256103515625,"type":"simplify"},{"count":[[4,629]],"egraph":[[0,9915,17,0.076397506],[3,2843,17,0.037223617],[2,270,17,0.014176022],[1,40,17,0.001725276],[0,10,17,0.000850944],[0,6,17,0.00010789]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 x x)"]],"memory":[[3107408,60428704]],"outputs":[["(*.f64 (pow.f64 (/.f64 (*.f64 (neg.f64 x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (pow.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -4 binary64)))","(*.f64 (pow.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 x (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (pow.f64 (/.f64 x (sin.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 x (sin.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal -4 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(pow.f64 (exp.f64 (-.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) (log1p.f64 (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (cos.f64 x) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x) (*.f64 x (neg.f64 (cos.f64 x))))) (neg.f64 (*.f64 x (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (+.f64 x (*.f64 x (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 x (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (+.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) x)))","(/.f64 (neg.f64 (fma.f64 x x (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 x) x (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x))))) (neg.f64 (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 x x))) (neg.f64 (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (pow.f64 (pow.f64 (/.f64 x (sin.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal -1 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 x (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x))))) (neg.f64 (*.f64 x (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 x (*.f64 x (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 x (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x))))) (neg.f64 (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x x))) (neg.f64 (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (/.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (cos.f64 x) x))) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x)) (neg.f64 x))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (/.f64 (cos.f64 x) x)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x)) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (neg.f64 x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 x (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) x))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 x x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (+.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (fma.f64 x x (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (fma.f64 (neg.f64 x) x (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (pow.f64 (pow.f64 (/.f64 x (sin.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (neg.f64 x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 (neg.f64 x) x))) (/.f64 (*.f64 x (neg.f64 (cos.f64 x))) (*.f64 x (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x (cos.f64 x)) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x (*.f64 x (/.f64 x (cos.f64 x))))) (/.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 x (*.f64 x (/.f64 x (cos.f64 x))))))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) x)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x)))","(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x))))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x))))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))) (/.f64 (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x))))) (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x)) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (neg.f64 (neg.f64 x))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) x) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) x) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (cos.f64 x) x) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x)) x))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) x) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x) x) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) x))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) x) x) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) x) x))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64)))))","(-.f64 (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(-.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x))) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (*.f64 (-.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) (log1p.f64 (cos.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))) (/.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))) (/.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (cos.f64 x)))","(*.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)","(*.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64)) x)","(*.f64 (pow.f64 (neg.f64 x) #s(literal 1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (neg.f64 x)) x)","(*.f64 (*.f64 #s(literal 1 binary64) x) x)","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 x (pow.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64)))","(*.f64 x (pow.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 x (/.f64 x #s(literal 1 binary64)))","(*.f64 x (neg.f64 (neg.f64 x)))","(*.f64 x x)","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 x))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (neg.f64 x) (neg.f64 (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":257.56689453125,"type":"rewrite"},{"compiler":[[13688,1661]],"memory":[[739216,52643424]],"time":67.465087890625,"type":"eval"},{"alts":[["(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","next",31.15476859275914,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","next",31.12742485534024,"binary64"],["(/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))) (*.f64 x x))","fresh",12.83370582291747,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","fresh",31.220768336885314,"binary64"],["(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","next",52.71646201972755,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.630069183552916,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","fresh",47.341517204525125,"binary64"],["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","next",12.654953443056588,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","fresh",31.22795198614396,"binary64"],["(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","fresh",31.643382900881395,"binary64"],["(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (cos.f64 x) x) (neg.f64 (neg.f64 x))))","fresh",31.581433370982726,"binary64"],["(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","fresh",55.424318781519325,"binary64"],["(-.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) x)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x)))","fresh",53.12203868597508,"binary64"],["(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","fresh",31.528709265417756,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","fresh",31.157053602500437,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",31.018944816220678,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","fresh",31.266830581024532,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","next",30.614087025754195,"binary64"]],"compiler":[[10,8],[8,6],[15,12],[12,9],[19,9],[8,6],[10,7],[11,8],[10,7],[13,10],[16,10],[30,10],[26,10],[8,7],[10,8],[20,13],[15,11],[10,8],[10,8],[8,6],[15,12],[12,9],[19,9],[10,7],[11,8],[10,7],[13,10],[16,10],[30,10],[26,10],[8,7],[10,8],[20,13],[15,11],[10,8]],"count":[[646,18]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[645,17],"picked":[1,1]}],"memory":[[-2736288,30722144]],"min-error":[[0.01171875,"binary64"]],"time":88.27783203125,"type":"prune"},{"egraph":[[0,8390,127,0.031988051],[8,7345,127,0.018869055],[7,6534,127,0.025623395],[6,5935,127,0.020707353],[5,4974,127,0.020200101],[4,3345,127,0.022357146],[3,1281,127,0.015586601],[2,246,127,0.00600717],[1,89,138,0.000863763],[0,49,139,0.000466918],[0,30,152,0.000310543]],"inputs":[["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(sin.f64 x)","x","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))","(neg.f64 x)","x","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))","(*.f64 (neg.f64 x) x)","(/.f64 (cos.f64 x) x)","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 x #s(literal -1 binary64))","x","#s(literal -1 binary64)","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)"]],"locations":[["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","cost-diff",0],["(pow.f64 x #s(literal -1 binary64))","cost-diff",0],["(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","cost-diff",2],["(*.f64 (*.f64 (neg.f64 x) x) x)","cost-diff",2],["(-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))","cost-diff",2],["(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","cost-diff",3],["(*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))","cost-diff",4],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","cost-diff",0],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","cost-diff",0],["(tan.f64 (/.f64 x #s(literal 2 binary64)))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","cost-diff",0],["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","cost-diff",0]],"memory":[[-2182624,20321536]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (sin.f64 x))","(sin.f64 x)","x","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))","(fma.f64 (cos.f64 x) x (neg.f64 x))","(neg.f64 x)","x","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))","(*.f64 (neg.f64 x) (cos.f64 x))","(*.f64 (neg.f64 x) x)","(/.f64 (cos.f64 x) x)","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) x)","(pow.f64 (neg.f64 x) #s(literal 3 binary64))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 x #s(literal -1 binary64))","x","#s(literal -1 binary64)","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":224.05908203125,"type":"simplify"},{"compiler":[[152,28]],"locations":[["(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","accuracy",0.10546875],["(cos.f64 x)","accuracy",0.125],["(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","accuracy",11.866573056697128],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",18.60365167981119],["(/.f64 (cos.f64 x) x)","accuracy",0.14453125],["(-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))","accuracy",11.9669307051045],["(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","accuracy",25.293050239119058],["(*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))","accuracy",26.176282420602615],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","accuracy",0.06640625],["(cos.f64 x)","accuracy",0.125],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","accuracy",11.825181938968734],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",18.60365167981119],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","accuracy",30.614087025754195],["(sin.f64 x)","accuracy",0.15234375],["(*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","accuracy",0.1796875],["(tan.f64 (/.f64 x #s(literal 2 binary64)))","accuracy",0.2464638183790941],["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","accuracy",12.23215511119967]],"memory":[[5134048,38857888]],"mixsample":[[20.09423828125,"ival-div",0],[5.2607421875,"adjust",800],[0.770263671875,"ival-div",400],[13.541015625,"ival-cos",1600],[0.114990234375,"ival-assert",0],[0.487548828125,"ival-div",1600],[5.216064453125,"ival-sub",0],[6.945068359375,"ival-tan",0],[1.6279296875,"ival-cos",4000],[6.375,"ival-cos",0],[2.04296875,"ival-cos",400],[3.041015625,"adjust",2000],[4.827880859375,"ival-pow",0],[0.04833984375,"ival-mult",3600],[0.015869140625,"ival-cos",800],[0.007080078125,"ival-sub",800],[1.55810546875,"ival-mult",400],[9.431640625,"ival-mult",0],[0.656005859375,"ival-mult",1600],[8.221435546875,"ival-sin",0],[0.757080078125,"ival-cos",3600],[0.03955078125,"ival-div",3600],[0.420654296875,"adjust",2800],[0.230224609375,"ival-true",0],[0.60205078125,"exact",0],[1.12939453125,"ival-neg",0]],"outcomes":[[19.42431640625,1,"valid",46],[47.924560546875,2,"valid",70],[10.7666015625,3,"valid",11],[42.953857421875,0,"valid",129]],"time":145.6630859375,"type":"localize"},{"count":[[17,54]],"inputs":[["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(sin.f64 x)","(tan.f64 (/.f64 x #s(literal 2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))","(*.f64 (*.f64 (neg.f64 x) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 x #s(literal -1 binary64))","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (cos.f64 x) x)"]],"memory":[[-1683712,5945856]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1 x)","(* x (- (* 1/2 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1))","(* -1/2 (pow x 3))","(* (pow x 3) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* -1 (pow x 3))","(/ 1 x)","(/ 2 x)","(/ (+ 2 (* 1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2))))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2))))))) x)","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (* (sin x) (sin (* 1/2 x))) (cos (* 1/2 x)))","(sin x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (- 1 (cos x)) (pow x 2))","(/ (- 1 (cos x)) x)","(- 1 (cos x))","(cos x)","(* -1 (* x (cos x)))","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(* -1 (* x (+ 1 (* -1 (cos x)))))","(/ x (- 1 (cos x)))","(/ (cos x) x)","(* -1 (* x (- 1 (cos x))))"]],"series":[[4.554931640625,"((/ (* (sin x) (tan (/ x 2))) (* x x)) (* (sin x) (tan (/ x 2))) (sin x) (tan (/ x 2)) (/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (cos x) (* (* (neg x) x) (/ (cos x) x)) (/ (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (* (* (neg x) x) x)) (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (* (* (neg x) x) x) (/ (pow x -1) (/ x (- 1 (cos x)))) (pow x -1) (/ x (- 1 (cos x))) (/ (cos x) x))","x","-inf"],[5.331787109375,"((/ (* (sin x) (tan (/ x 2))) (* x x)) (* (sin x) (tan (/ x 2))) (sin x) (tan (/ x 2)) (/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (cos x) (* (* (neg x) x) (/ (cos x) x)) (/ (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (* (* (neg x) x) x)) (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (* (* (neg x) x) x) (/ (pow x -1) (/ x (- 1 (cos x)))) (pow x -1) (/ x (- 1 (cos x))) (/ (cos x) x))","x","inf"],[4.375,"((/ (* (sin x) (tan (/ x 2))) (* x x)) (* (sin x) (tan (/ x 2))) (sin x) (tan (/ x 2)) (/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (cos x) (* (* (neg x) x) (/ (cos x) x)) (/ (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (* (* (neg x) x) x)) (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (* (* (neg x) x) x) (/ (pow x -1) (/ x (- 1 (cos x)))) (pow x -1) (/ x (- 1 (cos x))) (/ (cos x) x))","x","0"]],"time":15.2080078125,"type":"series"},{"count":[[54,53]],"egraph":[[0,8406,503,0.096029597],[5,6202,560,0.028507372],[4,3795,560,0.021492492],[3,2801,560,0.013646943],[2,970,560,0.010870525],[1,387,568,0.003248549],[0,143,574,0.001277335]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1 x)","(* x (- (* 1/2 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1))","(* -1/2 (pow x 3))","(* (pow x 3) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* -1 (pow x 3))","(/ 1 x)","(/ 2 x)","(/ (+ 2 (* 1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2))))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2))))))) x)","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (* (sin x) (sin (* 1/2 x))) (cos (* 1/2 x)))","(sin x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (- 1 (cos x)) (pow x 2))","(/ (- 1 (cos x)) x)","(- 1 (cos x))","(cos x)","(* -1 (* x (cos x)))","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(* -1 (* x (+ 1 (* -1 (cos x)))))","(/ x (- 1 (cos x)))","(/ (cos x) x)","(* -1 (* x (- 1 (cos x))))"]],"memory":[[8046464,44779808]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* 1/2 (pow x 2)) 1))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64) (neg.f64 x))","(* x (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) (neg.f64 x))","(* x (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (neg.f64 x))","(* -1/2 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))","(* (pow x 3) (- (* 1/24 (pow x 2)) 1/2))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (pow x 3))","(pow.f64 (neg.f64 x) #s(literal 3 binary64))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ 2 x)","(/.f64 #s(literal 2 binary64) x)","(/ (+ 2 (* 1/6 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2))))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3024 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(*.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal -1/2 binary64) x))) (*.f64 x x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (* (sin x) (sin (* 1/2 x))) (cos (* 1/2 x)))","(*.f64 (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal -1/2 binary64) x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(sin x)","(sin.f64 x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/ (- 1 (cos x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(* -1 (* x (cos x)))","(*.f64 (neg.f64 (cos.f64 x)) x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(* -1 (* x (+ 1 (* -1 (cos x)))))","(fma.f64 (cos.f64 x) x (neg.f64 x))","(/ x (- 1 (cos x)))","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/ (cos x) x)","(/.f64 (cos.f64 x) x)","(* -1 (* x (- 1 (cos x))))","(fma.f64 (cos.f64 x) x (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":280.966796875,"type":"simplify"},{"count":[[17,364]],"egraph":[[0,1182,113,0.006885582],[1,173,115,0.005382374],[0,49,121,0.002631104],[0,30,123,0.000311445]],"inputs":[["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(sin.f64 x)","(tan.f64 (/.f64 x #s(literal 2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))","(*.f64 (*.f64 (neg.f64 x) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 x #s(literal -1 binary64))","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (cos.f64 x) x)"]],"memory":[[-24807632,13149376]],"outputs":[["(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 x #s(literal -2 binary64))) (sin.f64 x))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(*.f64 (/.f64 (sin.f64 x) x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) (*.f64 x x)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (sin.f64 x) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (sin.f64 x) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 x #s(literal -2 binary64))))","(pow.f64 (/.f64 (*.f64 x x) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x) (neg.f64 x))","(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(/.f64 (*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (*.f64 x x))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) x)","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 x x) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","(neg.f64 (/.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x x)))","(neg.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 (neg.f64 x) x)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))","(*.f64 (sin.f64 x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(sin.f64 x)","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (sin.f64 x) (sin.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (/.f64 (cos.f64 x) x) x))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (/.f64 (cos.f64 x) x) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (sin.f64 x) (sin.f64 x))) (*.f64 x (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 x (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 (*.f64 x x) (*.f64 x x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) x))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 x x)))","(neg.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (neg.f64 x)))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(neg.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(+.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 x #s(literal -1 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (/.f64 (cos.f64 x) x) (/.f64 (cos.f64 x) x))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (/.f64 (cos.f64 x) x) (/.f64 (cos.f64 x) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 x (cos.f64 x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (cos.f64 x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 x (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 x (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (/.f64 (cos.f64 x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (cos.f64 x) x)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (cos.f64 x) x)))","(*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x)))) (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 x))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (/.f64 (cos.f64 x) x) (neg.f64 x)) x)","(*.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x))","(*.f64 #s(literal -1 binary64) (*.f64 x (*.f64 (/.f64 (cos.f64 x) x) x)))","(*.f64 (/.f64 (cos.f64 x) x) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))","(*.f64 (neg.f64 x) (*.f64 (/.f64 (cos.f64 x) x) x))","(*.f64 (cos.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 x (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x)))","(/.f64 (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (/.f64 x (cos.f64 x)))","(/.f64 (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x))) (neg.f64 x))","(/.f64 (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)) (/.f64 x (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) x)","(/.f64 (*.f64 (neg.f64 x) x) (/.f64 x (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))))","(neg.f64 (*.f64 x (*.f64 (/.f64 (cos.f64 x) x) x)))","(neg.f64 (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x)))","(*.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)))","(*.f64 (neg.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) x)))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(pow.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (neg.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) x) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 2 binary64))) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 3 binary64))) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (*.f64 x x)))","(/.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) #s(literal 1 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x))) (*.f64 (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x) (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x)) (fma.f64 (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x)) (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (*.f64 (neg.f64 x) x))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (*.f64 (neg.f64 x) x)) x)","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 2 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x))))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x))) (*.f64 (*.f64 x x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)))))","(/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(neg.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (*.f64 (*.f64 x x) x)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x) (neg.f64 (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (*.f64 (neg.f64 x) x)) (neg.f64 (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (*.f64 x x)) (neg.f64 (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(fma.f64 (neg.f64 x) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x)) (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x x)) (neg.f64 (/.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x))))","(*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x)) (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x)))) (-.f64 (neg.f64 x) (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x)) (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x))) (*.f64 (neg.f64 x) (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 2 binary64))) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (*.f64 x x)) (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 3 binary64)))))","(neg.f64 (+.f64 x (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x))))","(fma.f64 (neg.f64 (/.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x) (neg.f64 x))","(fma.f64 (neg.f64 (neg.f64 x)) (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x))","(fma.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x)))","(fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x))","(fma.f64 (*.f64 (neg.f64 x) x) (neg.f64 (/.f64 (cos.f64 x) x)) (neg.f64 x))","(fma.f64 (neg.f64 x) (neg.f64 (*.f64 (/.f64 (cos.f64 x) x) x)) (neg.f64 x))","(fma.f64 (*.f64 x x) (/.f64 (cos.f64 x) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 x #s(literal -1 binary64) (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x)))","(-.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x))) (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 2 binary64)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (*.f64 x x))) (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)) (fma.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x) (neg.f64 x)) (*.f64 x x))))","(-.f64 #s(literal 0 binary64) (-.f64 x (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x))))","(-.f64 #s(literal 0 binary64) (+.f64 x (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x))))","(-.f64 (neg.f64 x) (*.f64 (*.f64 (/.f64 (cos.f64 x) x) x) (neg.f64 x)))","(+.f64 (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (/.f64 (cos.f64 x) x) x)))","(+.f64 (neg.f64 x) (*.f64 (/.f64 (cos.f64 x) x) (*.f64 x x)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (*.f64 x x) x))","(*.f64 (*.f64 (neg.f64 x) x) x)","(*.f64 (neg.f64 x) (*.f64 x x))","(*.f64 (*.f64 x x) (neg.f64 x))","(*.f64 x (*.f64 (neg.f64 x) x))","(pow.f64 (neg.f64 x) #s(literal 3 binary64))","(neg.f64 (pow.f64 x #s(literal 3 binary64)))","(neg.f64 (*.f64 (*.f64 x x) x))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 3 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (sin.f64 x) (sin.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (/.f64 (cos.f64 x) x) x))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (/.f64 (cos.f64 x) x) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (sin.f64 x) (sin.f64 x))) (*.f64 x (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 x (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 (*.f64 x x) (*.f64 x x)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) x))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 x x)))","(neg.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (neg.f64 x)))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(neg.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(+.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) x)","(exp.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 x (*.f64 (sin.f64 x) (sin.f64 x))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 x))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x)","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (neg.f64 x) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(/.f64 (neg.f64 x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(neg.f64 (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (cos.f64 x))","(*.f64 (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) x))","(pow.f64 (/.f64 x (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (cos.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (cos.f64 x))))","(/.f64 (cos.f64 x) x)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (cos.f64 x)))","(neg.f64 (/.f64 (neg.f64 (cos.f64 x)) x))","(neg.f64 (/.f64 (cos.f64 x) (neg.f64 x)))"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":200.339111328125,"type":"rewrite"},{"compiler":[[7119,1103]],"memory":[[2202672,32445680]],"time":51.22705078125,"type":"eval"},{"alts":[["(/.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (neg.f64 x)) (*.f64 x x))","fresh",46.472957872592126,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 x (cos.f64 x))) (*.f64 x x)) x)","fresh",31.632013358961267,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","done",31.12742485534024,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) x) x)","fresh",61.6402355410761,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","fresh",31.15476859275914,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","next",31.220768336885314,"binary64"],["(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","fresh",62.18994860135179,"binary64"],["(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","fresh",38.00650911374365,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.630069183552916,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","fresh",47.341517204525125,"binary64"],["(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","fresh",12.654953443056588,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","fresh",31.22795198614396,"binary64"],["(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","fresh",31.586013000921927,"binary64"],["(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","fresh",55.424318781519325,"binary64"],["(-.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) x)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x)))","fresh",53.12203868597508,"binary64"],["(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","next",31.528709265417756,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","fresh",31.157053602500437,"binary64"],["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","next",0.17615131837909412,"binary64"],["(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 x #s(literal -2 binary64))) (sin.f64 x))","fresh",12.63184186687422,"binary64"],["(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","fresh",13.038599266436634,"binary64"],["(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","next",31.656771199348352,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",31.018944816220678,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","next",31.266830581024532,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","done",30.614087025754195,"binary64"]],"compiler":[[17,8],[14,9],[8,6],[15,10],[10,7],[12,9],[21,11],[25,15],[8,6],[10,7],[11,8],[10,7],[10,7],[30,10],[26,10],[8,7],[10,8],[11,8],[11,9],[15,12],[12,9],[20,13],[15,11],[10,8],[17,8],[14,9],[15,10],[10,7],[12,9],[21,11],[25,15],[10,7],[11,8],[10,7],[10,7],[30,10],[26,10],[8,7],[10,8],[11,8],[11,9],[15,12],[12,9],[20,13],[15,11]],"count":[[401,24]],"kept":[{"done":[1,1],"fresh":[12,9],"new":[383,12],"picked":[5,2]}],"memory":[[-3958448,23362032]],"min-error":[[0.0,"binary64"]],"time":32.308837890625,"type":"prune"},{"egraph":[[0,3419,142,0.008209332],[14,3419,142,0.021739484],[13,3415,142,0.023603922],[12,3415,142,0.015840072],[11,3415,142,0.01621889],[10,3412,142,0.012689006],[9,3386,142,0.014886097],[8,3279,142,0.013986951],[7,3028,142,0.015398476],[6,2781,142,0.017757166],[5,2228,142,0.014938758],[4,1615,142,0.01486762],[3,604,142,0.008898739],[2,229,142,0.003681039],[1,99,146,0.001483453],[0,55,155,0.000605102],[0,33,155,0.000418529]],"inputs":[["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(/.f64 (sin.f64 x) x)","(sin.f64 x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) x)","(neg.f64 x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(neg.f64 (/.f64 (cos.f64 x) x))","(/.f64 (cos.f64 x) x)","(cos.f64 x)","(neg.f64 x)","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(pow.f64 x #s(literal -2 binary64))","cost-diff",0],["(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","cost-diff",0],["(neg.f64 (/.f64 (cos.f64 x) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","cost-diff",1],["(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","cost-diff",3],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","cost-diff",1],["(neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))","cost-diff",1],["(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","cost-diff",2],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)","cost-diff",0],["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","cost-diff",0]],"memory":[[5601088,5601088]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (sin.f64 x) (*.f64 x x)))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","x","(/.f64 (sin.f64 x) x)","(sin.f64 x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(*.f64 (neg.f64 x) x)","(neg.f64 x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(neg.f64 (/.f64 (cos.f64 x) x))","(/.f64 (cos.f64 x) (neg.f64 x))","(/.f64 (cos.f64 x) x)","(cos.f64 x)","(neg.f64 x)","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":232.259033203125,"type":"simplify"},{"compiler":[[151,32]],"locations":[["(pow.f64 x #s(literal -2 binary64))","accuracy",0.0078125],["(cos.f64 x)","accuracy",0.125],["(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","accuracy",12.527758958735543],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",18.60365167981119],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","accuracy",0.06640625],["(cos.f64 x)","accuracy",0.125],["(/.f64 (cos.f64 x) x)","accuracy",0.14453125],["(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","accuracy",30.76298381337442],["(cos.f64 x)","accuracy",0.125],["(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","accuracy",0.247696655539177],["(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","accuracy",12.527758958735543],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",18.60365167981119],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","accuracy",0.078125],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","accuracy",31.266830581024532],["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)","accuracy",0.109375],["(/.f64 (sin.f64 x) x)","accuracy",0.1171875],["(sin.f64 x)","accuracy",0.15234375],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.2464638183790941]],"memory":[[1713008,42103488]],"mixsample":[[15.259033203125,"ival-div",0],[6.503173828125,"adjust",800],[0.144775390625,"ival-neg",2400],[0.330322265625,"ival-div",400],[0.10986328125,"ival-assert",0],[0.02001953125,"ival-div",1600],[0.207275390625,"ival-neg",800],[4.744140625,"ival-sub",0],[8.09765625,"ival-tan",0],[6.735595703125,"ival-cos",0],[4.69091796875,"const",0],[1.05908203125,"ival-cos",1200],[0.45654296875,"ival-cos",400],[5.23291015625,"ival-pow",0],[0.09814453125,"ival-neg",400],[1.365966796875,"ival-add",0],[4.1875,"ival-cos",800],[0.210693359375,"ival-neg",1200],[0.094482421875,"ival-div",2000],[0.500244140625,"ival-div",2400],[0.020751953125,"ival-cos",1600],[0.004150390625,"ival-neg",1600],[13.9130859375,"ival-cos",2400],[1.986328125,"adjust",2000],[0.611083984375,"ival-div",1200],[13.460693359375,"ival-mult",0],[20.22998046875,"ival-sin",0],[1.269287109375,"ival-cos",2000],[0.704345703125,"ival-div",800],[0.02734375,"ival-neg",2000],[0.271484375,"ival-true",0],[0.71533203125,"exact",0],[4.14208984375,"ival-neg",0]],"outcomes":[[38.44873046875,1,"valid",80],[44.864013671875,2,"valid",47],[64.181396484375,0,"valid",129]],"time":177.759033203125,"type":"localize"},{"count":[[21,62]],"inputs":[["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) x)","(neg.f64 (/.f64 (cos.f64 x) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 x #s(literal -2 binary64))","(cos.f64 x)","(sin.f64 x)","(/.f64 (sin.f64 x) x)","(/.f64 (cos.f64 x) x)"]],"memory":[[-1355568,6245648]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(+ 1/2 (* 1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2)))))))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(pow x 2)","(* -1/2 (pow x 2))","(* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ -1 (pow x 2))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* -1/2 x)","(* x (- (* 1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ -1 x)","(/ (- (* 1/2 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) x)","(/ 1 (pow x 2))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ 1 (* -1/6 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6)))","(/ 1 x)","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (* x (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (- 1 (cos x)) (pow x 2))","(* -1/24 (pow x 2))","(* (pow x 2) (- (* 1/2 (/ 1 (pow x 2))) 1/24))","(* -1 (/ (- (cos x) 1) (pow x 2)))","(- (cos x) 1)","(- 1 (cos x))","(/ (- (cos x) 1) x)","(* -1 (/ (cos x) x))","(cos x)","(sin x)","(/ (sin x) x)","(/ (cos x) x)","(* -1 (/ (+ 1 (* -1 (cos x))) x))","(/ (+ 1 (* -1 (cos x))) (pow x 2))"]],"series":[[8.011962890625,"((* (/ (tan (* 1/2 x)) x) (/ (sin x) x)) (/ (tan (* 1/2 x)) x) (tan (* 1/2 x)) (* 1/2 x) (/ (- 1 (cos x)) (* x x)) (+ (* (* x x) -1/24) 1/2) (* x x) (* (neg (- 1 (cos x))) (/ 1 (* (neg x) x))) (neg (- 1 (cos x))) (/ 1 (* (neg x) x)) (- 1 (cos x)) (- (/ -1 x) (neg (/ (cos x) x))) (/ (- (/ -1 x) (neg (/ (cos x) x))) (neg x)) (/ -1 x) (neg (/ (cos x) x)) (* (pow x -2) (- 1 (cos x))) (pow x -2) (cos x) (sin x) (/ (sin x) x) (/ (cos x) x))","x","-inf"],[6.10400390625,"((* (/ (tan (* 1/2 x)) x) (/ (sin x) x)) (/ (tan (* 1/2 x)) x) (tan (* 1/2 x)) (* 1/2 x) (/ (- 1 (cos x)) (* x x)) (+ (* (* x x) -1/24) 1/2) (* x x) (* (neg (- 1 (cos x))) (/ 1 (* (neg x) x))) (neg (- 1 (cos x))) (/ 1 (* (neg x) x)) (- 1 (cos x)) (- (/ -1 x) (neg (/ (cos x) x))) (/ (- (/ -1 x) (neg (/ (cos x) x))) (neg x)) (/ -1 x) (neg (/ (cos x) x)) (* (pow x -2) (- 1 (cos x))) (pow x -2) (cos x) (sin x) (/ (sin x) x) (/ (cos x) x))","x","inf"],[2.69189453125,"((* (/ (tan (* 1/2 x)) x) (/ (sin x) x)) (/ (tan (* 1/2 x)) x) (tan (* 1/2 x)) (* 1/2 x) (/ (- 1 (cos x)) (* x x)) (+ (* (* x x) -1/24) 1/2) (* x x) (* (neg (- 1 (cos x))) (/ 1 (* (neg x) x))) (neg (- 1 (cos x))) (/ 1 (* (neg x) x)) (- 1 (cos x)) (- (/ -1 x) (neg (/ (cos x) x))) (/ (- (/ -1 x) (neg (/ (cos x) x))) (neg x)) (/ -1 x) (neg (/ (cos x) x)) (* (pow x -2) (- 1 (cos x))) (pow x -2) (cos x) (sin x) (/ (sin x) x) (/ (cos x) x))","x","0"]],"time":17.885986328125,"type":"series"},{"count":[[62,61]],"egraph":[[0,8132,550,0.129664135],[5,6410,616,0.025467458],[4,4723,618,0.020905086],[3,2423,618,0.018267705],[2,806,624,0.009121353],[1,329,630,0.004047953],[0,128,630,0.00144031]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(+ 1/2 (* 1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2)))))","(+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2)))))))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(pow x 2)","(* -1/2 (pow x 2))","(* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ -1 (pow x 2))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* -1/2 x)","(* x (- (* 1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ -1 x)","(/ (- (* 1/2 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) x)","(/ 1 (pow x 2))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ 1 (* -1/6 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6)))","(/ 1 x)","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (* x (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (- 1 (cos x)) (pow x 2))","(* -1/24 (pow x 2))","(* (pow x 2) (- (* 1/2 (/ 1 (pow x 2))) 1/24))","(* -1 (/ (- (cos x) 1) (pow x 2)))","(- (cos x) 1)","(- 1 (cos x))","(/ (- (cos x) 1) x)","(* -1 (/ (cos x) x))","(cos x)","(sin x)","(/ (sin x) x)","(/ (cos x) x)","(* -1 (/ (+ 1 (* -1 (cos x))) x))","(/ (+ 1 (* -1 (cos x))) (pow x 2))"]],"memory":[[2998848,41806384]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* 1/24 (pow x 2)))","(fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(pow x 2)","(*.f64 x x)","(* -1/2 (pow x 2))","(*.f64 #s(literal -1/2 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) x)","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x #s(literal -1/2 binary64)) (*.f64 x x))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)","(/ -1 (pow x 2))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/24 (pow x 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* 1/2 (pow x 2)) 1) x)","(fma.f64 #s(literal 1/2 binary64) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) x)","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x (/.f64 #s(literal -1 binary64) x))","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(+ 1 (* -1/6 (pow x 2)))","(fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6)))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* -1/2 (pow x 2))) x)","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(/.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) x) x #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(*.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal -1/2 binary64) x))) (*.f64 x x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (sin (* 1/2 x)) (* x (cos (* 1/2 x))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) x)) x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal -1/2 binary64) x)))","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(* -1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/24 binary64))","(* (pow x 2) (- (* 1/2 (/ 1 (pow x 2))) 1/24))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(* -1 (/ (- (cos x) 1) (pow x 2)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(- (cos x) 1)","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(/ (- (cos x) 1) x)","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(* -1 (/ (cos x) x))","(/.f64 (cos.f64 x) (neg.f64 x))","(cos x)","(cos.f64 x)","(sin x)","(sin.f64 x)","(/ (sin x) x)","(/.f64 (sin.f64 x) x)","(/ (cos x) x)","(/.f64 (cos.f64 x) x)","(* -1 (/ (+ 1 (* -1 (cos x))) x))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":374.1259765625,"type":"simplify"},{"count":[[21,1340]],"egraph":[[0,8738,113,0.063301991],[2,1304,113,0.042643851],[1,188,113,0.008337406],[0,55,118,0.002382706],[0,33,127,0.000572928]],"inputs":[["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) x)","(neg.f64 (/.f64 (cos.f64 x) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 x #s(literal -2 binary64))","(cos.f64 x)","(sin.f64 x)","(/.f64 (sin.f64 x) x)","(/.f64 (cos.f64 x) x)"]],"memory":[[422320,59695648]],"outputs":[["(*.f64 (/.f64 (/.f64 (sin.f64 x) x) (/.f64 x (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 x) x)) (/.f64 (sin.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) #s(literal 1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) x) (/.f64 (sin.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) x))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) #s(literal 1 binary64)) (/.f64 (sin.f64 x) x))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (neg.f64 (sin.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (sin.f64 x) (*.f64 (neg.f64 x) x)) (/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (/.f64 (sin.f64 x) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) (/.f64 x (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (/.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (/.f64 (/.f64 (sin.f64 x) x) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (sin.f64 x) (/.f64 x (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 x x)))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (neg.f64 x)))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) (*.f64 x x)))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (sin.f64 x) x) (neg.f64 x)))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 x #s(literal -2 binary64))) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 x x)))","(*.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) x))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (sin.f64 x) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (neg.f64 (sin.f64 x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)) (/.f64 (/.f64 (sin.f64 x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)) (/.f64 (neg.f64 (sin.f64 x)) x))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) x) (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) x) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) x) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)))","(*.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (sin.f64 x) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (sin.f64 x))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (sin.f64 x))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (sin.f64 x)) (neg.f64 x))))","(*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x)))))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 x))))","(*.f64 (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (sin.f64 x) x) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","(*.f64 (sin.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (/.f64 (sin.f64 x) x))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (sin.f64 x)) x)))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (/.f64 (sin.f64 x) x) x))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (sin.f64 x) (pow.f64 x #s(literal -2 binary64))))","(pow.f64 (/.f64 (*.f64 x x) (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))) x)","(/.f64 (neg.f64 (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (sin.f64 x) x))) x)","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))) x)","(/.f64 (neg.f64 (*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (neg.f64 (sin.f64 x)))) x)","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))) x)","(/.f64 (neg.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 x))) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (sin.f64 x)))) (*.f64 x x))","(/.f64 (neg.f64 (/.f64 (sin.f64 x) x)) (neg.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)) (neg.f64 (/.f64 x (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)) (neg.f64 x))","(/.f64 (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (sin.f64 x) x)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 x))","(/.f64 (*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (neg.f64 (sin.f64 x))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (sin.f64 x) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (sin.f64 x))) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 x)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)","(/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (*.f64 (/.f64 x (sin.f64 x)) x)))","(/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (*.f64 x (/.f64 x (sin.f64 x)))))","(/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (/.f64 x (sin.f64 x)) (neg.f64 x)))","(/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (/.f64 x (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","(/.f64 (neg.f64 (sin.f64 x)) (/.f64 (neg.f64 x) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 x)))","(/.f64 (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (sin.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (neg.f64 (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 x) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 x (sin.f64 x)) (neg.f64 x)) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (sin.f64 x) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x))) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x) (sin.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (/.f64 x (sin.f64 x))) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 x x) (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (sin.f64 x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (/.f64 (sin.f64 x) x) (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (sin.f64 x) (neg.f64 (/.f64 (neg.f64 x) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))))","(/.f64 (sin.f64 x) (neg.f64 (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 x))))","(/.f64 (sin.f64 x) (/.f64 x (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)))","(/.f64 (sin.f64 x) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x))","(/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (/.f64 x (sin.f64 x)))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (*.f64 (/.f64 x (sin.f64 x)) (neg.f64 x))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x)))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (/.f64 x (sin.f64 x)) x))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 x (/.f64 x (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (/.f64 x (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) x) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) x)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))))","(*.f64 #s(literal -1 binary64) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) #s(literal 1 binary64))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) x)) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) x) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (*.f64 x (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (*.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) x)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 x))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 x (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) x) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (cos.f64 (*.f64 x #s(literal 1/2 binary64)))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)","(neg.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))","(neg.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(*.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))))","(/.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x))) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))))","(fma.f64 (*.f64 #s(literal -1/24 binary64) x) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(fma.f64 x (*.f64 #s(literal -1/24 binary64) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(literal -1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (*.f64 (neg.f64 x) x))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 x x))","(*.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(*.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) x) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 x #s(literal -2 binary64))) (/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))) (+.f64 #s(literal 0 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (*.f64 #s(literal 0 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x))) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (*.f64 (neg.f64 x) x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) x)) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (+.f64 #s(literal -1 binary64) (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x (cos.f64 x)) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) x) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) (neg.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x))) x)","(/.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(-.f64 (/.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) (+.f64 #s(literal -1 binary64) (cos.f64 x)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) #s(literal 1 binary64)))) (-.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) (+.f64 #s(literal -1 binary64) (cos.f64 x))) (*.f64 #s(literal 0 binary64) (+.f64 #s(literal -1 binary64) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64)) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 #s(literal 0 binary64) (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(+.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal -1 binary64) (cos.f64 x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(pow.f64 (exp.f64 (log.f64 (*.f64 (neg.f64 x) x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2 binary64))","(pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))) (+.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))) (+.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))) (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(neg.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(-.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(+.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(+.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(*.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(*.f64 (-.f64 (neg.f64 x) (*.f64 x (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (-.f64 x (*.f64 x (cos.f64 x))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(pow.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))) (*.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))) (+.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))) (+.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (fma.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 x (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 x (*.f64 x (cos.f64 x)))) (*.f64 x x))","(/.f64 (neg.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (cos.f64 x))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (neg.f64 x)) (*.f64 (/.f64 x (cos.f64 x)) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 x (*.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (*.f64 x (neg.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))))) (*.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64))) (*.f64 x (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)))) (*.f64 x (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) x) (*.f64 x (/.f64 (neg.f64 x) (cos.f64 x))))","(/.f64 (-.f64 x (*.f64 (neg.f64 x) (*.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (/.f64 (cos.f64 x) x) (*.f64 (neg.f64 x) (neg.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))))) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64))) (*.f64 (neg.f64 x) (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)))) (*.f64 (neg.f64 x) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) x (neg.f64 x)) (*.f64 x x))","(/.f64 (fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) x (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 x) (neg.f64 x)) (*.f64 x x))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 (/.f64 (neg.f64 x) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (/.f64 (neg.f64 x) (cos.f64 x)) x))","(/.f64 (+.f64 x (*.f64 (/.f64 (neg.f64 x) (cos.f64 x)) #s(literal 1 binary64))) (*.f64 (/.f64 x (cos.f64 x)) x))","(/.f64 (fma.f64 (cos.f64 x) x (neg.f64 x)) (*.f64 x x))","(/.f64 (+.f64 x (/.f64 (neg.f64 x) (cos.f64 x))) (*.f64 (/.f64 x (cos.f64 x)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) x (/.f64 x (cos.f64 x))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 x (/.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (+.f64 x (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (+.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 x (/.f64 (neg.f64 x) (cos.f64 x))))","(/.f64 (+.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 x (cos.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 x (cos.f64 x))) (*.f64 x x))","(/.f64 (fma.f64 (/.f64 x (cos.f64 x)) #s(literal -1 binary64) x) (*.f64 (/.f64 x (cos.f64 x)) x))","(/.f64 (+.f64 x (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (fma.f64 (/.f64 x (cos.f64 x)) #s(literal -1 binary64) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 x (cos.f64 x)) x))","(/.f64 (+.f64 x (*.f64 (neg.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 (neg.f64 x) (*.f64 x (neg.f64 (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (-.f64 x (*.f64 x (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (+.f64 #s(literal -1 binary64) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))) (neg.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(fma.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))) (neg.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (/.f64 (cos.f64 x) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (cos.f64 x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))))","(fma.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64) (/.f64 (cos.f64 x) x))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))) (neg.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))","(fma.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (cos.f64 x) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))) (neg.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(fma.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x))","(-.f64 (/.f64 (neg.f64 x) (*.f64 x x)) (/.f64 (*.f64 x (neg.f64 (cos.f64 x))) (*.f64 x x)))","(-.f64 (/.f64 (neg.f64 x) (*.f64 x x)) (/.f64 (*.f64 (neg.f64 x) (cos.f64 x)) (*.f64 x x)))","(-.f64 (/.f64 x (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 x (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 x (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(-.f64 (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) (neg.f64 x)))","(+.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(+.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))))","(+.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x))","(+.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x))","(*.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(*.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) x) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 x #s(literal -2 binary64))) (/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))) (+.f64 #s(literal 0 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (*.f64 #s(literal 0 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x))) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (*.f64 (neg.f64 x) x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) x)) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (+.f64 #s(literal -1 binary64) (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x (cos.f64 x)) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) x) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) (neg.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x))) x)","(/.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(-.f64 (/.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (neg.f64 x) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 0 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) #s(literal 0 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 0 binary64) (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64)))))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (neg.f64 x))","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64))","(*.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (/.f64 x (cos.f64 x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (cos.f64 x) x) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) x))","(*.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (neg.f64 x)))","(pow.f64 (/.f64 (neg.f64 x) (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) x)","(/.f64 (neg.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (/.f64 (cos.f64 x) x))","(/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (cos.f64 x) (neg.f64 x)))","(/.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) (neg.f64 x))))))","(/.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64)))","(/.f64 (neg.f64 (cos.f64 x)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 x) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (/.f64 x (cos.f64 x)))","(/.f64 (cos.f64 x) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (cos.f64 x) x) (neg.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64)) (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 x) (cos.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (cos.f64 x)))","(neg.f64 (/.f64 (cos.f64 x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x)) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (cos.f64 x) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64))) (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))","(+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(*.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) x) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 x #s(literal -2 binary64))) (/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (+.f64 #s(literal -1 binary64) (cos.f64 x)))","(*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))) (+.f64 #s(literal 0 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (*.f64 #s(literal 0 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x))) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (*.f64 (neg.f64 x) x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) x)) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (+.f64 #s(literal -1 binary64) (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x (cos.f64 x)) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) x) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) (neg.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x))) x)","(/.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 #s(literal -1 binary64) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x) (*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(-.f64 (/.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (exp.f64 #s(literal -2 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 2 binary64))","(pow.f64 (neg.f64 x) #s(literal -2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1 binary64))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (pow.f64 x #s(literal -1 binary64)) x)","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(neg.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (*.f64 (log.f64 x) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(neg.f64 (neg.f64 (cos.f64 x)))","(fma.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 x) (*.f64 (sin.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(+.f64 (*.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 x)) (*.f64 (sin.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 x)))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(neg.f64 (sin.f64 (neg.f64 x)))","(neg.f64 (neg.f64 (sin.f64 x)))","(sin.f64 x)","(-.f64 (*.f64 (sin.f64 #s(literal 0 binary64)) (cos.f64 x)) (*.f64 (cos.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (sin.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (sin.f64 x)) x))","(*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) x))","(*.f64 (/.f64 (sin.f64 x) x) #s(literal 1 binary64))","(*.f64 (sin.f64 x) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (/.f64 x (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (sin.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (sin.f64 x)))","(/.f64 (sin.f64 x) x)","(neg.f64 (/.f64 (neg.f64 (sin.f64 x)) x))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (sin.f64 x)) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (cos.f64 x))","(*.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) (neg.f64 x)))","(*.f64 (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) x))","(pow.f64 (/.f64 x (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (/.f64 (cos.f64 x) (neg.f64 x)))","(/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) (neg.f64 x))))))","(/.f64 (neg.f64 (cos.f64 x)) (neg.f64 x))","(/.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal -1 binary64))","(/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (cos.f64 x)))","(/.f64 (cos.f64 x) x)","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (neg.f64 x) (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 x (cos.f64 x)))","(neg.f64 (/.f64 (cos.f64 x) (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (cos.f64 x) x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (cos.f64 x))) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":271.4970703125,"type":"rewrite"},{"compiler":[[19006,2805]],"memory":[[4382784,84955568]],"time":196.802978515625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (neg.f64 x)) (*.f64 x x))","fresh",46.472957872592126,"binary64"],["(/.f64 (/.f64 (fma.f64 (cos.f64 x) x (neg.f64 x)) (*.f64 x x)) (neg.f64 x))","fresh",31.63562283737934,"binary64"],["(/.f64 (/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) x)) (neg.f64 x))","fresh",31.632013358961267,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","done",31.12742485534024,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) x) x)","fresh",61.6402355410761,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","fresh",31.15476859275914,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","next",31.17388831296338,"binary64"],["(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","fresh",62.18994860135179,"binary64"],["(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","next",38.00650911374365,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.630069183552916,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","next",47.341517204525125,"binary64"],["(/.f64 (+.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))","fresh",31.220768336885314,"binary64"],["(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","fresh",12.654953443056588,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","fresh",31.22795198614396,"binary64"],["(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","fresh",31.586013000921927,"binary64"],["(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","fresh",55.424318781519325,"binary64"],["(-.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) x)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x)))","fresh",53.12203868597508,"binary64"],["(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","next",43.884295849280974,"binary64"],["(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","fresh",31.55281052234639,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","fresh",31.157053602500437,"binary64"],["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","done",0.17615131837909412,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","fresh",31.656771199348352,"binary64"],["(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","fresh",13.038599266436634,"binary64"],["(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","next",0.35270950514949734,"binary64"],["(*.f64 #s(approx (neg (- 1 (cos x))) (*.f64 #s(literal -1/2 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","fresh",43.86086385408066,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",31.018944816220678,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","done",31.266830581024532,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","done",30.614087025754195,"binary64"]],"compiler":[[17,8],[13,7],[14,8],[8,6],[15,10],[10,7],[13,8],[21,11],[25,15],[8,6],[10,7],[11,8],[11,8],[10,7],[10,7],[30,10],[26,10],[14,11],[11,9],[10,8],[11,8],[10,7],[15,12],[13,10],[18,14],[20,13],[15,11],[10,8],[17,8],[13,7],[14,8],[15,10],[10,7],[13,8],[21,11],[25,15],[10,7],[11,8],[11,8],[10,7],[10,7],[30,10],[26,10],[14,11],[11,9],[10,8],[10,7],[15,12],[13,10],[18,14],[20,13]],"count":[[1024,28]],"kept":[{"done":[3,3],"fresh":[16,14],"new":[1000,9],"picked":[5,2]}],"memory":[[-3600384,48122080]],"min-error":[[0.0,"binary64"]],"time":34.4189453125,"type":"prune"},{"egraph":[[0,8031,199,0.030994147],[6,7569,199,0.014416073],[5,5198,199,0.035864901],[4,2407,199,0.024541265],[3,827,203,0.010853139],[2,290,207,0.002913198],[1,125,226,0.001092064],[0,68,228,0.000602376],[0,40,231,0.000402331]],"inputs":[["(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","(sin.f64 x)","x","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x))","#s(literal 1 binary64)","(*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)","(/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","x","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)","#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))","(neg.f64 x)","x","#s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))","(*.f64 (neg.f64 (cos.f64 x)) x)","(neg.f64 (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) x)","(*.f64 (neg.f64 x) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))","(cos.f64 x)","(neg.f64 x)"]],"locations":[["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["(*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))","cost-diff",1],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","cost-diff",1],["(-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))","cost-diff",3],["(neg.f64 x)","cost-diff",0],["(-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))","cost-diff",0],["(*.f64 (*.f64 (neg.f64 x) x) x)","cost-diff",2],["(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","cost-diff",2],["(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","cost-diff",0],["#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","cost-diff",0],["(pow.f64 x #s(literal -2 binary64))","cost-diff",0],["(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["#s(approx (cos x) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","cost-diff",0],["(*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x))","cost-diff",2]],"memory":[[913632,17246752]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(sin.f64 x)","x","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x x))","#s(literal 1 binary64)","(*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)","(/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x) x)","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","x","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)","#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","#s(approx (- 1 (cos x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x) (pow.f64 x #s(literal 3 binary64)))","(-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))","(neg.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))","(neg.f64 x)","x","#s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))","(*.f64 (neg.f64 (cos.f64 x)) x)","(neg.f64 (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) x)","(pow.f64 (neg.f64 x) #s(literal 3 binary64))","(*.f64 (neg.f64 x) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))","(/.f64 (neg.f64 (cos.f64 x)) x)","(cos.f64 x)","(neg.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":192.906005859375,"type":"simplify"},{"compiler":[[197,35]],"locations":[["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","accuracy",0.06640625],["(cos.f64 x)","accuracy",0.125],["(*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))","accuracy",0.1953125],["(-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))","accuracy",30.76298381337442],["(*.f64 (neg.f64 (cos.f64 x)) x)","accuracy",0.11328125],["(cos.f64 x)","accuracy",0.125],["(-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))","accuracy",11.9669307051045],["(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","accuracy",25.293050239119058],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["(pow.f64 x #s(literal -2 binary64))","accuracy",0.0078125],["(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","accuracy",12.527758958735543],["#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","accuracy",30.610410838366626],["(*.f64 x x)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","accuracy",12.23215511119967],["(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","accuracy",18.60365167981119],["#s(approx (cos x) #s(literal 1 binary64))","accuracy",28.221709805766867],["(sin.f64 x)","accuracy",0.15234375],["(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","accuracy",0.1875],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x))","accuracy",0.19041934820760587],["(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","accuracy",0.2464638183790941]],"memory":[[-4774816,49759680]],"mixsample":[[8.62646484375,"adjust",800],[20.28466796875,"ival-div",0],[0.393310546875,"ival-mult",1200],[1.196044921875,"ival-div",400],[0.722412109375,"ival-div",1600],[0.134765625,"ival-assert",0],[9.15771484375,"ival-sub",0],[8.557373046875,"ival-tan",0],[8.385498046875,"ival-cos",0],[0.795166015625,"ival-cos",1200],[0.647705078125,"ival-cos",400],[6.993408203125,"ival-pow",0],[0.690673828125,"ival-mult",800],[0.05712890625,"ival-mult",3600],[5.06298828125,"ival-cos",800],[0.762451171875,"ival-mult",1600],[0.710693359375,"adjust",2800],[0.0673828125,"ival-div",2000],[0.404296875,"ival-mult",2400],[0.332275390625,"ival-div",2400],[4.86962890625,"ival-cos",1600],[0.09375,"ival-mult",2000],[16.669189453125,"ival-cos",2400],[4.70654296875,"adjust",2000],[0.4111328125,"ival-div",1200],[2.07177734375,"ival-mult",400],[29.21484375,"ival-mult",0],[10.233642578125,"ival-sin",0],[1.94775390625,"ival-cos",2000],[2.80859375,"ival-cos",3600],[0.48583984375,"ival-div",800],[0.059326171875,"ival-div",3600],[0.370361328125,"ival-true",0],[0.8505859375,"exact",0],[4.348388671875,"ival-neg",0]],"outcomes":[[29.927734375,1,"valid",46],[82.33544921875,2,"valid",70],[19.415771484375,3,"valid",11],[63.943359375,0,"valid",129]],"time":235.531005859375,"type":"localize"},{"count":[[24,62]],"inputs":[["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","(sin.f64 x)","(*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(pow.f64 x #s(literal -2 binary64))","#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(*.f64 (*.f64 (neg.f64 x) x) x)","(-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))","(neg.f64 x)","(-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))","(/.f64 #s(literal -1 binary64) x)","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(cos.f64 x)","(*.f64 (neg.f64 (cos.f64 x)) x)"]],"memory":[[-472272,7258912]],"outputs":[["(/ 1/2 x)","(/ (+ 1/2 (* 1/24 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))) x)","1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 2 x)","(* x (+ 2 (* -1/6 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ 1 (pow x 2))","(* -1 (pow x 3))","(* -1/2 (pow x 3))","(* (pow x 3) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* -1 x)","(* -1/2 x)","(* x (- (* 1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ -1 x)","(/ (- (* 1/2 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) x)","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (- (* 1/2 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1))","(/ (sin (* 1/2 x)) (* (pow x 2) (cos (* 1/2 x))))","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(sin x)","(/ (* (pow x 2) (cos (* 1/2 x))) (sin (* 1/2 x)))","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(* -1 (* x (+ 1 (* -1 (cos x)))))","(* -1 (/ (+ 1 (* -1 (cos x))) x))","(* -1 (/ (cos x) x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(* -1 (* x (cos x)))","(* -1 (* x (- 1 (cos x))))","(* -1 (/ (- 1 (cos x)) x))"]],"series":[[5.906982421875,"((/ 1 (* (/ x (tan (* x 1/2))) x)) (* (sin x) (/ 1 (* (/ x (tan (* x 1/2))) x))) (sin x) (* (/ x (tan (* x 1/2))) x) (/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x) (* (pow x -2) (- 1 (cos x))) (pow x -2) (- 1 (cos x)) (* (* 1/2 x) x) (/ (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (* (* (neg x) x) x)) (* (* (neg x) x) x) (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (neg x) (- (/ -1 x) (* (/ -1 x) (cos x))) (/ (- (/ -1 x) (* (/ -1 x) (cos x))) (neg x)) (* (/ -1 x) (cos x)) (/ -1 x) (tan (* x 1/2)) (* 1/2 x) (cos x) (* (neg (cos x)) x))","x","-inf"],[6.988037109375,"((/ 1 (* (/ x (tan (* x 1/2))) x)) (* (sin x) (/ 1 (* (/ x (tan (* x 1/2))) x))) (sin x) (* (/ x (tan (* x 1/2))) x) (/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x) (* (pow x -2) (- 1 (cos x))) (pow x -2) (- 1 (cos x)) (* (* 1/2 x) x) (/ (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (* (* (neg x) x) x)) (* (* (neg x) x) x) (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (neg x) (- (/ -1 x) (* (/ -1 x) (cos x))) (/ (- (/ -1 x) (* (/ -1 x) (cos x))) (neg x)) (* (/ -1 x) (cos x)) (/ -1 x) (tan (* x 1/2)) (* 1/2 x) (cos x) (* (neg (cos x)) x))","x","inf"],[2.926025390625,"((/ 1 (* (/ x (tan (* x 1/2))) x)) (* (sin x) (/ 1 (* (/ x (tan (* x 1/2))) x))) (sin x) (* (/ x (tan (* x 1/2))) x) (/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x) (* (pow x -2) (- 1 (cos x))) (pow x -2) (- 1 (cos x)) (* (* 1/2 x) x) (/ (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (* (* (neg x) x) x)) (* (* (neg x) x) x) (- (neg x) (* (* (neg x) x) (/ (cos x) x))) (neg x) (- (/ -1 x) (* (/ -1 x) (cos x))) (/ (- (/ -1 x) (* (/ -1 x) (cos x))) (neg x)) (* (/ -1 x) (cos x)) (/ -1 x) (tan (* x 1/2)) (* 1/2 x) (cos x) (* (neg (cos x)) x))","x","0"]],"time":17.39208984375,"type":"series"},{"count":[[62,61]],"egraph":[[0,8184,565,0.116527932],[4,4224,628,0.03776819],[3,3039,628,0.016830478],[2,991,636,0.011353959],[1,407,644,0.004728087],[0,155,650,0.002144899]],"inputs":[["(/ 1/2 x)","(/ (+ 1/2 (* 1/24 (pow x 2))) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))) x)","1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(* 2 x)","(* x (+ 2 (* -1/6 (pow x 2))))","(* x (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))))","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ 1 (pow x 2))","(* -1 (pow x 3))","(* -1/2 (pow x 3))","(* (pow x 3) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* -1 x)","(* -1/2 x)","(* x (- (* 1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ -1 x)","(/ (- (* 1/2 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) x)","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(* x (- (* 1/2 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1))","(/ (sin (* 1/2 x)) (* (pow x 2) (cos (* 1/2 x))))","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(sin x)","(/ (* (pow x 2) (cos (* 1/2 x))) (sin (* 1/2 x)))","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(* -1 (* x (+ 1 (* -1 (cos x)))))","(* -1 (/ (+ 1 (* -1 (cos x))) x))","(* -1 (/ (cos x) x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(* -1 (* x (cos x)))","(* -1 (* x (- 1 (cos x))))","(* -1 (/ (- 1 (cos x)) x))"]],"memory":[[4016096,45603328]],"method":["egg-herbie"],"outputs":[["(/ 1/2 x)","(/.f64 #s(literal 1/2 binary64) x)","(/ (+ 1/2 (* 1/24 (pow x 2))) x)","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(/ (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(* x (+ 2 (* -1/6 (pow x 2))))","(*.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)","(* x (+ 2 (* (pow x 2) (- (* -1/360 (pow x 2)) 1/6))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/360 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(* x (+ 2 (* (pow x 2) (- (* (pow x 2) (- (* -1/15120 (pow x 2)) 1/360)) 1/6))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/15120 binary64) (*.f64 x x) #s(literal -1/360 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(pow x 2)","(*.f64 x x)","(/ 1 (pow x 2))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(* -1 (pow x 3))","(neg.f64 (pow.f64 x #s(literal 3 binary64)))","(* -1/2 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))","(* (pow x 3) (- (* 1/24 (pow x 2)) 1/2))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)))","(* (pow x 3) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 x)","(neg.f64 x)","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/24 (pow x 2)) 1/2))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* 1/2 (pow x 2)) 1) x)","(fma.f64 #s(literal 1/2 binary64) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) x)","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/24 binary64) (fma.f64 #s(literal 1/2 binary64) x (/.f64 #s(literal -1 binary64) x)))","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) x)","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/2 binary64) x (/.f64 #s(literal -1 binary64) x)))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (- (* 1/2 (pow x 2)) 1))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64) (neg.f64 x))","(* x (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) (neg.f64 x))","(* x (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) (neg.f64 x))","(/ (sin (* 1/2 x)) (* (pow x 2) (cos (* 1/2 x))))","(/.f64 (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(*.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(sin x)","(sin.f64 x)","(/ (* (pow x 2) (cos (* 1/2 x))) (sin (* 1/2 x)))","(*.f64 (/.f64 (*.f64 x x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(* -1 (* x (+ 1 (* -1 (cos x)))))","(fma.f64 (cos.f64 x) x (neg.f64 x))","(* -1 (/ (+ 1 (* -1 (cos x))) x))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(* -1 (/ (cos x) x))","(/.f64 (neg.f64 (cos.f64 x)) x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(* -1 (* x (cos x)))","(*.f64 (neg.f64 (cos.f64 x)) x)","(* -1 (* x (- 1 (cos x))))","(fma.f64 (cos.f64 x) x (neg.f64 x))","(* -1 (/ (- 1 (cos x)) x))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":358.0849609375,"type":"simplify"},{"count":[[24,937]],"egraph":[[0,8459,167,0.074075002],[2,1490,167,0.037310037],[1,226,170,0.005195587],[0,68,180,0.001806014],[0,40,185,0.000403954]],"inputs":[["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","(sin.f64 x)","(*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(pow.f64 x #s(literal -2 binary64))","#s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(*.f64 (*.f64 (neg.f64 x) x) x)","(-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))","(neg.f64 x)","(-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))","(/.f64 #s(literal -1 binary64) x)","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(cos.f64 x)","(*.f64 (neg.f64 (cos.f64 x)) x)"]],"memory":[[-5225104,63780256]],"outputs":[["(*.f64 (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (neg.f64 x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (neg.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(pow.f64 (exp.f64 (log.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))) x)","(/.f64 (neg.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)) (neg.f64 x))","(/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(neg.f64 (*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) #s(literal -1 binary64)) (/.f64 (sin.f64 x) (neg.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (neg.f64 (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 (sin.f64 x) (neg.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (neg.f64 x)))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 (sin.f64 x) (neg.f64 x)) (/.f64 #s(literal -1 binary64) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (*.f64 (sin.f64 x) (pow.f64 x #s(literal -2 binary64))) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (sin.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (sin.f64 x)) (*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (*.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (neg.f64 (sin.f64 x)) (*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (sin.f64 x) (neg.f64 (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (sin.f64 x) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (*.f64 (sin.f64 x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) #s(literal 1 binary64))","(*.f64 (sin.f64 x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (sin.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 x))","(*.f64 #s(literal 1 binary64) (*.f64 (sin.f64 x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(pow.f64 (/.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (sin.f64 x))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (sin.f64 x))) (neg.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) #s(literal -1 binary64))) (neg.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (sin.f64 x) x)) (neg.f64 (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (sin.f64 x)) x)","(/.f64 (*.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(/.f64 (/.f64 (sin.f64 x) x) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (sin.f64 x)) (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 x))))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 #s(literal -1 binary64) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (sin.f64 x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 x)))","(*.f64 (sin.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sin.f64 x))","(neg.f64 (sin.f64 (neg.f64 x)))","(sin.f64 x)","(-.f64 (*.f64 (sin.f64 #s(literal 0 binary64)) (cos.f64 x)) (*.f64 (cos.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(*.f64 (/.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 x (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x)) (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (*.f64 (neg.f64 x) x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (/.f64 #s(literal -1 binary64) x)) (pow.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (neg.f64 x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 x x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 x (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 x x))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)))","(*.f64 #s(literal -1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (neg.f64 x) (/.f64 (neg.f64 x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 x x) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))","(*.f64 (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(*.f64 x (/.f64 x (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) #s(literal 1 binary64))","(/.f64 (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (*.f64 (neg.f64 x) x) (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 x) (neg.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 (*.f64 x x) (neg.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))","(/.f64 x (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)) (/.f64 (neg.f64 x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (/.f64 (*.f64 (neg.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))))","(*.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(approx (cos x) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (neg.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x) x))","(pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) x)) x)","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x))) x)","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(approx (cos x) #s(literal 1 binary64))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x #s(approx (cos x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) x) (*.f64 x (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) #s(approx (cos x) #s(literal 1 binary64)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) x) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x)) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))) (*.f64 x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(approx (cos x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(approx (cos x) #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))))))","(/.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))))","(neg.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 x (pow.f64 x #s(literal -3 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))) (/.f64 (*.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))))","(-.f64 (/.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(approx (cos x) #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(approx (cos x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))))) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))","(-.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","(+.f64 (neg.f64 #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3/2 binary64)) x) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 x x) x) x)","(*.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) x) (neg.f64 x))","(*.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) x)","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 #s(literal -1 binary64) x)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 x) (/.f64 (*.f64 (neg.f64 x) x) x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 x (/.f64 (*.f64 x x) x))","(*.f64 x (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x)))","(*.f64 x x)","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (pow.f64 x #s(literal 3 binary64)) x)","(/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (neg.f64 x))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (/.f64 x (/.f64 #s(literal -1 binary64) x)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(*.f64 #s(approx (- 1 (cos x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (pow.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 x (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (exp.f64 #s(literal -2 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 2 binary64))","(pow.f64 (neg.f64 x) #s(literal -2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1 binary64))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) x)) (pow.f64 x #s(literal 6 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) x)","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 x (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(neg.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (*.f64 (log.f64 x) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2 binary64)))","#s(approx (- 1 (cos x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(*.f64 #s(literal 1/2 binary64) (*.f64 x x))","(*.f64 x (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal -1 binary64)) (pow.f64 x #s(literal -3 binary64)))","(*.f64 (/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal 1 binary64)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))","(*.f64 (/.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))))","(*.f64 (/.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))))","(*.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (*.f64 x x)) (/.f64 (pow.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (/.f64 x (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (pow.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal 1 binary64)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))","(*.f64 (*.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))))))","(*.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))","(*.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(*.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(*.f64 (-.f64 (*.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (pow.f64 x #s(literal -6 binary64)))","(*.f64 (/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) x))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))))","(*.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)))))","(*.f64 (neg.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (pow.f64 x #s(literal -3 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 (*.f64 x x) (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))))","(*.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (pow.f64 x #s(literal 3 binary64))))","(pow.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) x))) x)","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) (neg.f64 (pow.f64 x #s(literal 6 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (*.f64 (neg.f64 x) x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (*.f64 (neg.f64 x) x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) (*.f64 x (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 x #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (*.f64 x (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) x) (*.f64 x (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (*.f64 (neg.f64 x) x)))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (*.f64 (neg.f64 x) x)))) (*.f64 (pow.f64 x #s(literal 3 binary64)) x))","(/.f64 (-.f64 (*.f64 x (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) (pow.f64 x #s(literal 6 binary64)))","(/.f64 (-.f64 (*.f64 x (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 x (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (*.f64 (neg.f64 x) x)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) (*.f64 (*.f64 x x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (*.f64 (*.f64 x x) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (*.f64 x x)) (*.f64 (*.f64 x x) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 x) x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal 1 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) x)) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)))) (neg.f64 (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (pow.f64 x #s(literal 6 binary64)))","(/.f64 (/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))) x) x)","(/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))))","(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal -1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (*.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))","(neg.f64 (*.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 x #s(literal -3 binary64))))","(fma.f64 (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (pow.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 x (pow.f64 x #s(literal -3 binary64)) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))) (/.f64 (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))))) (/.f64 (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))))))","(-.f64 (/.f64 (*.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) (/.f64 (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 x #s(literal 6 binary64))))","(-.f64 (/.f64 (*.f64 x x) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))) (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)))) (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)))))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 x #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 x #s(literal -3 binary64))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))))","(*.f64 (pow.f64 (neg.f64 x) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 (neg.f64 x) x) x)","(*.f64 (neg.f64 x) (*.f64 x x))","(*.f64 (*.f64 x x) (neg.f64 x))","(*.f64 x (*.f64 (neg.f64 x) x))","(pow.f64 (exp.f64 (log.f64 (neg.f64 x))) #s(literal 3 binary64))","(pow.f64 (pow.f64 (neg.f64 x) #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 x) #s(literal 3 binary64))","(pow.f64 (*.f64 x x) #s(literal 3/2 binary64))","(/.f64 (pow.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x))) #s(literal 3 binary64)))","(/.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 0 binary64) x) #s(literal 3 binary64)))","(/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64))","(/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))","(neg.f64 (pow.f64 x #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 3 binary64)))","(*.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)))))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))))))","(*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(pow.f64 (pow.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 x x) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (/.f64 (*.f64 x x) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (fma.f64 (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (*.f64 (/.f64 (*.f64 x x) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (fma.f64 (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (-.f64 x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (*.f64 #s(literal 0 binary64) (-.f64 x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (+.f64 x #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (+.f64 x #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 #s(literal 0 binary64) (+.f64 x #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (*.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (*.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (-.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64))) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64))) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))) (-.f64 (*.f64 x x) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))) (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) #s(literal -1 binary64)))","(neg.f64 (+.f64 x #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(fma.f64 #s(literal -1 binary64) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) x)) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(fma.f64 x #s(literal -1 binary64) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))) (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (-.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))))","(-.f64 (/.f64 (*.f64 x x) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 2 binary64)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))) (/.f64 (pow.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) #s(literal 3 binary64)) (fma.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (+.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x)) (*.f64 x x))))","(-.f64 #s(literal 0 binary64) (-.f64 x (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))))","(-.f64 #s(literal 0 binary64) (+.f64 x #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)))","(+.f64 (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (neg.f64 x))","(+.f64 (neg.f64 x) (neg.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))))","(*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(*.f64 #s(literal -1 binary64) x)","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) x)))","(*.f64 (neg.f64 x) #s(literal 1 binary64))","(*.f64 x #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (neg.f64 x))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(pow.f64 (neg.f64 x) #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 0 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x))))","(/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 x) x) (+.f64 #s(literal 0 binary64) x))","(/.f64 (neg.f64 x) #s(literal 1 binary64))","(/.f64 (*.f64 x x) (neg.f64 (+.f64 #s(literal 0 binary64) x)))","(/.f64 x #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x))) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) x) (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(neg.f64 x)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) x)) (/.f64 (*.f64 x x) (+.f64 #s(literal 0 binary64) x)))","(-.f64 #s(literal 0 binary64) x)","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(*.f64 (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x)))","(*.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(*.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)))","(pow.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (fma.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 (cos.f64 x)) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 (cos.f64 x)) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 (neg.f64 (cos.f64 x)) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 (neg.f64 (cos.f64 x)) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (/.f64 (neg.f64 (cos.f64 x)) x) #s(literal 3 binary64)))) (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 x (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (neg.f64 (cos.f64 x)))) x) (*.f64 x (/.f64 x (neg.f64 (cos.f64 x)))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (neg.f64 (cos.f64 x)))) (neg.f64 x)) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x (neg.f64 x)) (*.f64 x x))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) x (neg.f64 x)) (*.f64 x x))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 (neg.f64 (/.f64 x (cos.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (/.f64 x (cos.f64 x))) x))","(/.f64 (+.f64 x (*.f64 (neg.f64 (/.f64 x (cos.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 x (cos.f64 x))) (neg.f64 x)))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) x (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 x) (neg.f64 x)) (*.f64 x x))","(/.f64 (fma.f64 (cos.f64 x) x (neg.f64 x)) (*.f64 x x))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(/.f64 (+.f64 x (*.f64 (/.f64 x (cos.f64 x)) #s(literal -1 binary64))) (*.f64 (/.f64 x (cos.f64 x)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) x (/.f64 x (cos.f64 x))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (cos.f64 x))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 (cos.f64 x) x)) (*.f64 x x))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 x (cos.f64 x)) x) (*.f64 x (/.f64 x (cos.f64 x))))","(/.f64 (+.f64 x (*.f64 #s(literal -1 binary64) (/.f64 x (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (*.f64 (neg.f64 x) x))","(/.f64 (+.f64 x (*.f64 (neg.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (+.f64 x (*.f64 (neg.f64 (cos.f64 x)) x)) (*.f64 (neg.f64 x) x))","(/.f64 (+.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 (cos.f64 x)) x)) (*.f64 x x))","(/.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x)","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x)))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 (neg.f64 x) (*.f64 (neg.f64 (cos.f64 x)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (/.f64 (cos.f64 x) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (cos.f64 x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) x) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64) (/.f64 (cos.f64 x) x))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (cos.f64 x)))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))","(fma.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (cos.f64 x)) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (cos.f64 x) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 x (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 (cos.f64 x) x))","(fma.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 (neg.f64 (cos.f64 x)) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (*.f64 (neg.f64 (cos.f64 x)) x) (*.f64 x x)))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 (cos.f64 x)) x))","(+.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x))","(+.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(*.f64 (/.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) x) (/.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))))))","(*.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) x)))","(*.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x) #s(literal -1 binary64))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(*.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) (neg.f64 x)))","(pow.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x) (*.f64 #s(literal 0 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) x))) (neg.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal 1 binary64))) x)","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))))) x)","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) x) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 #s(literal -1 binary64) (/.f64 x (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (/.f64 (cos.f64 x) x))) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) (/.f64 x (pow.f64 (cos.f64 x) #s(literal -1 binary64))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)) (*.f64 (*.f64 x x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) x)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal 1 binary64)) (neg.f64 x))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (neg.f64 x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (neg.f64 x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) x) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)) (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x) (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (*.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))))","(neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x))","(fma.f64 (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3/2 binary64))) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 x (pow.f64 x #s(literal -3 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))))) (/.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))))))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (*.f64 (neg.f64 x) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 (neg.f64 (cos.f64 x)) x) #s(literal 3 binary64)) (*.f64 (neg.f64 x) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 (neg.f64 (cos.f64 x)) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))","(*.f64 (/.f64 (cos.f64 x) x) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) x))","(*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 x)) x))","(pow.f64 (/.f64 x (neg.f64 (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) x) #s(literal 3 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 #s(literal 0 binary64) x) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (cos.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) x) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) x) (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (/.f64 x (cos.f64 x)))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) x) (*.f64 (cos.f64 x) x)) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 x (cos.f64 x))) x) (*.f64 x (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (neg.f64 (cos.f64 x)))) x)","(/.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (cos.f64 x)) x)","(/.f64 (cos.f64 x) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (neg.f64 (cos.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 x (neg.f64 (cos.f64 x))))","(neg.f64 (/.f64 (cos.f64 x) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (cos.f64 x) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 x (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (neg.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) x)","(/.f64 (neg.f64 x) (*.f64 x x))","(/.f64 x (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 #s(literal 1 binary64) (neg.f64 x))","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(pow.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(fma.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 x) (*.f64 (sin.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(+.f64 (*.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 x)) (*.f64 (sin.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(*.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) x))","(*.f64 (neg.f64 (cos.f64 x)) x)","(*.f64 (cos.f64 x) (neg.f64 x))","(*.f64 (neg.f64 x) (cos.f64 x))","(*.f64 x (neg.f64 (cos.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (*.f64 (cos.f64 x) x) (*.f64 (cos.f64 x) x) (*.f64 #s(literal 0 binary64) (*.f64 (cos.f64 x) x)))))","(neg.f64 (*.f64 (cos.f64 x) x))","(-.f64 #s(literal 0 binary64) (*.f64 (cos.f64 x) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":297.953125,"type":"rewrite"},{"compiler":[[27604,3054]],"memory":[[15491984,88998976]],"time":130.639892578125,"type":"eval"},{"alts":[["(/.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (neg.f64 x)) (*.f64 x x))","fresh",46.472957872592126,"binary64"],["(/.f64 (/.f64 (fma.f64 (cos.f64 x) x (neg.f64 x)) (*.f64 x x)) (neg.f64 x))","fresh",31.63562283737934,"binary64"],["(/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","fresh",31.632013358961267,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","done",31.12742485534024,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) x) x)","fresh",61.6402355410761,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","fresh",31.15476859275914,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","done",31.17388831296338,"binary64"],["(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","fresh",62.43925640546189,"binary64"],["(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","fresh",62.18994860135179,"binary64"],["(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","done",38.00650911374365,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (*.f64 x x))","fresh",31.614444183552916,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",31.630069183552916,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","done",47.341517204525125,"binary64"],["(/.f64 (+.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))","fresh",31.220768336885314,"binary64"],["(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","fresh",12.654953443056588,"binary64"],["(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","fresh",12.418722167180242,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","fresh",31.22795198614396,"binary64"],["(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","fresh",31.586013000921927,"binary64"],["(-.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) x)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x)))","fresh",53.12203868597508,"binary64"],["(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","fresh",31.55281052234639,"binary64"],["(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","fresh",43.94126835906023,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","fresh",31.157053602500437,"binary64"],["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","done",0.17615131837909412,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","fresh",31.656771199348352,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","fresh",43.86086385408066,"binary64"],["(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","fresh",44.016814648134,"binary64"],["(*.f64 (sin.f64 x) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x))","fresh",0.2441788086106521,"binary64"],["(*.f64 (sin.f64 x) #s(approx (/ 1 (* (/ x (tan (* x 1/2))) x)) (/.f64 #s(literal 1/2 binary64) x)))","fresh",30.23631735178298,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",31.018944816220678,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","done",31.266830581024532,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","done",30.614087025754195,"binary64"]],"compiler":[[695,178],[17,8],[13,7],[14,8],[8,6],[15,10],[10,7],[13,8],[27,13],[21,11],[25,15],[24,16],[8,6],[10,7],[11,8],[11,8],[11,8],[10,7],[10,7],[26,10],[11,9],[17,13],[10,8],[11,8],[10,7],[16,12],[18,12],[11,8],[17,13],[20,13],[15,11],[10,8]],"count":[[1094,31]],"kept":[{"done":[5,5],"fresh":[18,14],"new":[1066,9],"picked":[5,3]}],"memory":[[-14970992,53720480]],"min-error":[[0.0,"binary64"]],"time":45.199951171875,"type":"prune"},{"accuracy":[0.1761513183790941],"baseline":[0.17615131837909412],"branch":[["x",0.1761513183790941,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",0.1761513183790941,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[48,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 #s(approx (neg (- 1 (cos x))) (*.f64 #s(literal -1/2 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) x) x)","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(*.f64 (sin.f64 x) #s(approx (/ 1 (* (/ x (tan (* x 1/2))) x)) (/.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (fma.f64 (cos.f64 x) x (neg.f64 x)) (*.f64 x x)) (neg.f64 x))","(/.f64 (+.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (*.f64 x x))","(/.f64 (/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 x (cos.f64 x))) (*.f64 x x)) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (neg.f64 x)) (*.f64 x x))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) x)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x)))","(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (sin.f64 x) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","(*.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (cos.f64 x) x) (neg.f64 (neg.f64 x))))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 x #s(literal -2 binary64))) (sin.f64 x))","(/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))) (*.f64 x x))"]],"memory":[[5587536,13316176]],"oracle":[63.570413136428705],"outputs":[["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))"]],"repr":["binary64"],"time":22.945068359375,"times":[[10.426025390625,"x"],[9.9541015625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"type":"regimes"},{"accuracy":[0.24417880861065208],"baseline":[0.2441788086106521],"branch":[["x",0.2441788086106521,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",0.24417880861065208,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[40,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 #s(approx (neg (- 1 (cos x))) (*.f64 #s(literal -1/2 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) x) x)","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(*.f64 (sin.f64 x) #s(approx (/ 1 (* (/ x (tan (* x 1/2))) x)) (/.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (fma.f64 (cos.f64 x) x (neg.f64 x)) (*.f64 x x)) (neg.f64 x))","(/.f64 (+.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (*.f64 x x))","(/.f64 (/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 x (cos.f64 x))) (*.f64 x x)) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (neg.f64 x)) (*.f64 x x))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) x)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x)))","(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (sin.f64 x) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x))"]],"memory":[[-5283168,11579024]],"oracle":[63.570413136428705],"outputs":[["(*.f64 (sin.f64 x) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x))"]],"repr":["binary64"],"time":19.947021484375,"times":[[9.488037109375,"x"],[8.009033203125,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"type":"regimes"},{"accuracy":[0.18976521855001469],"baseline":[12.654953443056588],"branch":[["x",0.18976521855001469,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",0.4049534430565894,2,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[39,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 #s(approx (neg (- 1 (cos x))) (*.f64 #s(literal -1/2 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) x) x)","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(*.f64 (sin.f64 x) #s(approx (/ 1 (* (/ x (tan (* x 1/2))) x)) (/.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 (neg.f64 x) #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (/.f64 (fma.f64 (cos.f64 x) x (neg.f64 x)) (*.f64 x x)) (neg.f64 x))","(/.f64 (+.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (* (neg x) x) (/ (cos x) x)) (*.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))) (*.f64 x x))","(/.f64 (/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 x (cos.f64 x))) (*.f64 x x)) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) x) (*.f64 x x) (neg.f64 x)) (neg.f64 x)) (*.f64 x x))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) x)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x)))","(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))"]],"memory":[[3473744,11447840]],"oracle":[63.570413136428705],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)"]],"repr":["binary64"],"time":18.97705078125,"times":[[8.72509765625,"x"],[7.676025390625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"type":"regimes"},{"accuracy":[0.30905719439418594],"baseline":[30.23631735178298],"branch":[["x",0.30905719439418594,2,"binary64"]],"compiler":[[1,1]],"count":[[15,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 #s(approx (neg (- 1 (cos x))) (*.f64 #s(literal -1/2 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) x) x)","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(*.f64 (sin.f64 x) #s(approx (/ 1 (* (/ x (tan (* x 1/2))) x)) (/.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))"]],"memory":[[-4593088,3651728]],"oracle":[63.41391327471608],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"repr":["binary64"],"time":5.789794921875,"times":[[4.60009765625,"x"]],"type":"regimes"},{"accuracy":[15.63322183796126],"baseline":[30.23631735178298],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",30.236317351782983,1,"binary64"],["x",15.63322183796126,2,"binary64"]],"compiler":[[8,6],[1,1]],"count":[[13,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 #s(approx (neg (- 1 (cos x))) (*.f64 #s(literal -1/2 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)))) x) x)","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(*.f64 (sin.f64 x) #s(approx (/ 1 (* (/ x (tan (* x 1/2))) x)) (/.f64 #s(literal 1/2 binary64) x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(approx (- 1 (cos x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))"]],"memory":[[5616608,5616608]],"oracle":[63.410659781985345],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))"]],"repr":["binary64"],"time":8.34912109375,"times":[[3.56494140625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"],[3.666015625,"x"]],"type":"regimes"},{"accuracy":[15.685691816249106],"baseline":[30.614087025754195],"branch":[["x",15.685691816249106,2,"binary64"]],"compiler":[[1,1]],"count":[[3,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))"]],"memory":[[1944752,1944752]],"oracle":[62.87649432616796],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))"]],"repr":["binary64"],"time":2.006103515625,"times":[[1.570068359375,"x"]],"type":"regimes"},{"accuracy":[30.614087025754134],"baseline":[30.614087025754195],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",30.614087025754134,1,"binary64"],["x",30.61408702575424,1,"binary64"]],"compiler":[[8,6],[1,1]],"count":[[2,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))"]],"link":["."],"memory":[[-5323744,2972272]],"name":["cos2 (problem 3.4.1)"],"oracle":[31.442465252482325],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]],"repr":["binary64"],"time":3.40185546875,"times":[[1.1728515625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"],[1.599853515625,"x"]],"type":"regimes"},{"bstep":[[12.445068359375,0.000833145642550436,1234.7395017739207]],"compiler":[[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[10,9],[1,1]],"memory":[[4350064,4350064]],"method":["binary-search"],"mixsample":[[0.736572265625,"ival-sub",0],[0.807373046875,"ival-div",0],[0.15283203125,"ival-true",0],[1.8154296875,"ival-cos",0],[0.925048828125,"ival-mult",0],[0.0810546875,"exact",0],[0.056396484375,"ival-assert",0]],"outcomes":[[7.19775390625,0,"valid",144]],"stop":[["narrow-enough",1]],"time":14.60107421875,"type":"bsearch"},{"bstep":[[1.282958984375,0.000833145642550436,1234.7395017739207]],"compiler":[[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[8,7],[20,14],[10,9],[1,1]],"memory":[[677520,677520]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.7548828125,"type":"bsearch"},{"bstep":[[15.4619140625,1.2676707227451566e+38,2.8814930759727953e+42]],"compiler":[[10,8],[20,14],[10,8],[20,14],[10,8],[20,14],[10,8],[20,14],[10,8],[20,14],[10,8],[20,14],[10,8],[20,14],[10,8],[20,14],[10,9],[1,1]],"memory":[[-4636624,4415536]],"method":["binary-search"],"mixsample":[[1.259033203125,"ival-sub",0],[0.679931640625,"ival-div",0],[0.0908203125,"ival-true",0],[4.925537109375,"ival-cos",0],[0.820556640625,"ival-mult",0],[0.083251953125,"exact",0],[0.048095703125,"ival-assert",0]],"outcomes":[[10.36279296875,0,"valid",128]],"stop":[["narrow-enough",1]],"time":17.420166015625,"type":"bsearch"},{"bstep":[[18.35791015625,2.788274790150416e+75,7.886228447660054e+87]],"compiler":[[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,9],[1,1]],"memory":[[-2796592,5276096]],"method":["binary-search"],"mixsample":[[0.801513671875,"ival-sub",0],[0.849609375,"ival-div",0],[0.11328125,"ival-true",0],[6.19091796875,"ival-cos",0],[1.798828125,"ival-mult",0],[0.094482421875,"exact",0],[0.05615234375,"ival-assert",0]],"outcomes":[[12.94384765625,0,"valid",160]],"stop":[["narrow-enough",1]],"time":20.39501953125,"type":"bsearch"},{"egraph":[[10,6854,154,0.031362335],[9,4117,154,0.032547705],[8,2228,154,0.019990953],[7,796,154,0.016819097],[6,296,154,0.003405724],[5,189,154,0.001664131],[4,131,154,0.001214042],[3,87,154,0.001029535],[2,68,154,0.000887017],[1,53,154,0.000837754],[0,40,154,0.000731724]],"inputs":[["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(*.f64 (sin.f64 x) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x))","(if (<=.f64 x #s(literal 7926335344172073/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(if (<=.f64 x #s(literal 7926335344172073/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))","(if (<=.f64 x #s(literal 849999999999999971420150533636998823936 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)))","(if (<=.f64 x #s(literal 160000000000000007529621519344875134264953622525866092228459352558371992502272 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]],"memory":[[5111920,12698832]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(*.f64 (sin.f64 x) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x))","(if (<=.f64 x #s(literal 7926335344172073/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(if (<=.f64 x #s(literal 7926335344172073/288230376151711744 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))","(if (<=.f64 x #s(literal 849999999999999971420150533636998823936 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)))","(if (<=.f64 x #s(literal 160000000000000007529621519344875134264953622525866092228459352558371992502272 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]],"stop":[["node limit",1]],"time":133.64697265625,"type":"simplify"},{"compiler":[[154,41]],"memory":[[1519744,1519744]],"stop":[["fuel",1]],"time":2.574951171875,"type":"soundness"},{"compiler":[[154,41],[154,41],[8,6],[8,6],[11,8],[11,8]],"memory":[[85152,25201248]],"remove-preprocessing":[["(abs x)"],[],[],[],[],[],[],[]],"time":46.218994140625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02294921875,"type":"end"}]